module ExcelTest {
	export module ChartUtil {
		export module Rest {
			export module Thenable {
				
				export function createBasicChart(worksheetName?: string): () => OfficeExtension.IPromise<any> {
					return () => Rest.createBasicChart(worksheetName);
				}
				export function createChart(worksheetName?: string, chartType?: string, sourceData?: string, seriesBy?: string): () => OfficeExtension.IPromise<any> {
					return () => Rest.createChart(worksheetName, chartType, sourceData, seriesBy);
				}
				export function patchChart(relativePath: string, properties: any): (resp: RichApiTest.RestResponseInfo) => OfficeExtension.IPromise<any> {
					return (resp) => Rest.patchChart(resp, relativePath, properties);
				}
				export function getChartCount(worksheetName?: string): () => OfficeExtension.IPromise<number> {
					return () => Rest.getChartCount(worksheetName);
				}
				export function removeAll(worksheetName?: string): () => OfficeExtension.IPromise<RichApiTest.RestResponseInfo[]> {
					return () => Rest.removeAll(worksheetName);
				}
			}
			
			export function createBasicChart(worksheetName?: string): OfficeExtension.IPromise<any> {
				worksheetName = worksheetName || "Charts";
				return RestUtility.post("worksheets('" + worksheetName + "')/charts/add", { "type": "pie", "sourceData": worksheetName + "!A1:B4" })
					.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
					.then(RestUtility.Thenable.getBodyAsObject())
			}
			export function createChart(worksheetName?: string, chartType?: string, sourceData?: string, seriesBy?: string): OfficeExtension.IPromise<any> {
				worksheetName = worksheetName || "Charts";
				chartType = chartType || "pie";
				sourceData = sourceData || (worksheetName + "!A1:B4");
				seriesBy = seriesBy || "auto";
				return RestUtility.post("worksheets('" + worksheetName + "')/charts/add", { "type": chartType, "sourceData": sourceData, "seriesBy": seriesBy })
					.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
					.then(RestUtility.Thenable.getBodyAsObject())
			}
			export function patchChart(resp: RichApiTest.RestResponseInfo, relativePath: string, properties: any): OfficeExtension.IPromise<any> {
				return RestUtility.patch(RestUtility.getODataId(resp) + (relativePath ? ("/" + relativePath) : ""), properties);
			}
			export function patchChartById(id: string, relativePath: string, properties: any): OfficeExtension.IPromise<any> {
				return RestUtility.patch(id + (relativePath ? ("/" + relativePath) : ""), properties);
			}
			export function getChartCount(worksheetName?: string): OfficeExtension.IPromise<number> {
				worksheetName = worksheetName || "Charts";
				return RestUtility.get("worksheets('" + worksheetName + "')/charts")
					.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
					.then(RestUtility.Thenable.getBodyAsObject<Array<any>>((obj) => obj.value))
					.then((result) => {
						return result.length;
					})
			}
			export function removeAll(worksheetName?: string): OfficeExtension.IPromise<RichApiTest.RestResponseInfo[]> {
				worksheetName = worksheetName || "Charts";
				return RestUtility.get("worksheets('" + worksheetName + "')/charts")
					.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
					.then(RestUtility.Thenable.getBodyAsObject<Array<any>>((obj) => obj.value))
					.then((result) => OfficeExtension.Promise.all(result.map((item) => RestUtility.deleteItem(item))))
					.then(RestUtility.Thenable.validateStatuses(RestUtility.Status.NoContent))
			}
			export function getChartPropertyAndValidateObjectType(relativeUrl: string, objectType: string) {
				ChartUtil.Rest.removeAll()
					.then(ChartUtil.Rest.Thenable.createBasicChart())
					.then(RestUtility.Thenable.get(relativeUrl))
					.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
					.then(RestUtility.Thenable.getBodyAsObject())
					.then(ExcelTest.pass)
					.catch(ExcelTest.reportError);
			}
			export function getChartPropertyWithAxisAndValidateObjectType(relativeUrl: string, objectType: string) {
				var sheetName: string = "Charts";
				var chartType: string = Excel.ChartType.barClustered;
				var sourceData: string = sheetName + "!E2:H5";
				ChartUtil.Rest.removeAll()
					.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
					.then(RestUtility.Thenable.get(relativeUrl))
					.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
					.then(RestUtility.Thenable.getBodyAsObject())
					.then(ExcelTest.pass)
					.catch(ExcelTest.reportError);
			}
			export function getChartPropertyAndValidateValue(relativeUrl: string, expectedValue: any) {
				ChartUtil.Rest.removeAll()
					.then(ChartUtil.Rest.Thenable.createBasicChart())
					.then(RestUtility.Thenable.get(relativeUrl))
					.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
					.then(RestUtility.Thenable.getBodyAsObject((body) => body.value))
					.then((value) => {
						RestUtility.validateValue(value, expectedValue);
					})
					.then(ExcelTest.pass)
					.catch(ExcelTest.reportError);
			}
			export function setChartFontPropertyAndValidateValue(setUrl: string, properties: any, getUrl: string, expectedValue: any) {
				ChartUtil.Rest.removeAll()
					.then(ChartUtil.Rest.Thenable.createBasicChart())
					.then(RestUtility.Thenable.patch(setUrl, properties))
					.then(RestUtility.Thenable.get(getUrl))
					.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
					.then(RestUtility.Thenable.getBodyAsObject((body) => body.value))
					.then((value) => {
						RestUtility.validateValue(value, expectedValue);
					})
					.then(ExcelTest.pass)
					.catch(ExcelTest.reportError);
			}
		}
		export function getDefaultChartValue() {
			return Util.isApple() ? defaultChartValueApple : defaultChartValue;
		}
		var defaultChartValue = "";
		var defaultChartValueApple = "";
		export function getDefaultColumnWidth() {
			return Util.isMacOS() ? 53 : 48;
		}
	}
}
?module ExcelTest {
	
	
	export var reportError = RichApiTest.reportError;
	export var reportJQueryError = RichApiTest.reportJQueryError;
	export var settings = RichApiTest.settings;
	export var IntentionalSkip = RichApiTest.IntentionalSkip;
	
	export function pass() {
		if (Util.isGraphTest()) {
			RichApiTest.log.done(true);
		}
		else {
			var ctx = new Excel.RequestContext();
			var countResult = ctx.workbook._GetReferenceCount();
			return ctx.sync()
				.then(() => {
					if (countResult.value !== 0) {
						RichApiTest.log.comment("_GetReferenceCount=" + countResult.value);
						ctx.workbook._RemoveAllReferences();
						return ctx.sync();
					}
				})
				.then(function () {
					if (countResult.value !== 0) {
						throw "The workbook level reference count should be zero, but it's " + countResult.value;
					}
					RichApiTest.log.done(true);
				})
		}
	}
	export function getNewScriptText() {
		return `
			(async () => {
				var sheetName = "Sheet1";
				await Excel.run(async (ctx) => {
					var worksheet = ctx.workbook.worksheets.getItem(sheetName);
					ctx.load(worksheet);
					await ctx.sync();
					Util.assertCompareValues("expected", "actual");
				});
			})();
		`;
	}
	export function _injectCollectionCountTest_JS(
		objectFetcher: (ctx: Excel.RequestContext) => OfficeExtension.ClientObject): OfficeExtension.IPromise<number>
	{
		return Excel.run(function (ctx) {
			var collection: any = objectFetcher(ctx);
			collection.load("count");
			var count = collection.getCount();
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment("Child item count: " + collection.items.length);
					RichApiTest.log.comment("Reported count via getCount method: " + count.value);
					Util.assert(() => collection.items.length == count.value);
					if (collection.count) {
						RichApiTest.log.comment("Reported count via count property: " + count.value);
						Util.assert(() => collection.items.length == collection.count);
					}
					return count.value;
				});
		});
	}
	export function _injectCollectionCountTest_REST(path: string): OfficeExtension.IPromise<number> {
		var elementCount: number;
		return OfficeExtension.Promise.resolve()
			.then(RestUtility.Thenable.get(path))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				elementCount = data.value.length;
				RichApiTest.log.comment("Count of items in returned list: " + elementCount);
			})
			.then(RestUtility.Thenable.get(path + "/count"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				var reportedCount = data.value;
				RichApiTest.log.comment("Reported count: " + reportedCount);
				Util.assert(() => reportedCount === elementCount);
				return reportedCount;
			});
	}
	export async function _async_injectCollectionCountTest_JS(
		objectFetcher: (ctx: Excel.RequestContext) => OfficeExtension.ClientObject) {
		await Excel.run(async ctx => {
			var collection: any = objectFetcher(ctx);
			collection.load("count");
			var count = collection.getCount();
			await ctx.sync();
			RichApiTest.log.comment("Child item count: " + collection.items.length);
			RichApiTest.log.comment("Reported count via getCount method: " + count.value);
			Util.assert(() => collection.items.length == count.value);
			if (collection.count) {
				RichApiTest.log.comment("Reported count via count property: " + count.value);
				Util.assert(() => collection.items.length == collection.count);
			}
			return count.value;
		});
	}
}
?module ExcelTest {
	export module CustomXmlPartsUtil {
		export module Namespace {
			export var ns1: string = "https://microsoft.com/excel/test/ns1";
			export var ns2: string = "https://microsoft.com/excel/test/ns2";
			export var ns3: string = "https://microsoft.com/excel/test/ns3";
		}
		export module Id {
			export var bad: string = "garbage";
		}
		export module Xml {
			export function makeFragment(ns?: string): string {
				return ns
					? "<o xmlns=\"" + ns + "\">some content</o>"
					: "<o>some content</o>";
			}
		}
		export module Common {
			export module Helper {
				export function validateResetCollection(parts: Array<Excel.CustomXmlPart>) {
					var ns1Count: number = 0;
					var ns2Count: number = 0;
					validateCollection(parts, 3 , (part: Excel.CustomXmlPart) => {
						switch (part.namespaceUri) {
							case Namespace.ns1:
								return ++ns1Count <= 1;
							case Namespace.ns2:
								return ++ns2Count <= 2;
							default:
								return false;
						}
					});
					Util.assertCompareValues(1, ns1Count, "ns1 Count");
					Util.assertCompareValues(2, ns2Count, "ns2 Count");
				}
				export function validateCollectionNamespace(parts: Array<Excel.CustomXmlPart>, expectedCount: number, ns: string) {
					return validateCollection(parts, expectedCount, (part: Excel.CustomXmlPart) => part.namespaceUri === ns);
				}
				export function validateCollection(parts: Array<Excel.CustomXmlPart>, expectedCount: number, itemValidation?: (part: Excel.CustomXmlPart) => boolean) {
					for (var i = 0; i < parts.length; i++) {
						RichApiTest.log.comment("[" + i + "] id='" + parts[i].id + "', namespace='" + parts[i].namespaceUri + "'");
						if (itemValidation) {
							Util.assert(itemValidation(parts[i]), "Validation of item " + i);
						}
					}
					Util.assertCompareValues(expectedCount, parts.length, "Count");
				}
			}
		}
		export module JScript {
			export module Thenable {
				export function reset(ctx: Excel.RequestContext): OfficeExtension.IPromise<Excel.CustomXmlPart> {
					return removeAllParts(ctx)
						.then(() => addPart(ctx, Namespace.ns1))
						.then(() => addPart(ctx, Namespace.ns2))
						.then(() => addPart(ctx, Namespace.ns2));
				}
				function removeAllParts(ctx: Excel.RequestContext): OfficeExtension.IPromise<any> {
					var parts = ctx.workbook.customXmlParts;
					ctx.load(parts);
					return ctx.sync()
						.then(() => {
							parts.items.map((part) => part.delete());
							return ctx.sync();
						});
				}
				function addPart(ctx: Excel.RequestContext, ns: string): OfficeExtension.IPromise<Excel.CustomXmlPart> {
					var part = ctx.workbook.customXmlParts.add(Xml.makeFragment(ns));
					ctx.load(part);
					return ctx.sync()
						.then(() => {
							RichApiTest.log.comment("Added part id='" + part.id + "', namespace='" + part.namespaceUri + "'");
							return part;
						});
				}
			}
		}
		export module Rest {
			export module Thenable {
				export function reset(): OfficeExtension.IPromise<Excel.CustomXmlPart> {
					return removeAllParts()
						.then(() => addPart(Namespace.ns1))
						.then(() => addPart(Namespace.ns2))
						.then(() => addPart(Namespace.ns2));
				}
				function removeAllParts(): OfficeExtension.IPromise<any> {
					return RestUtility.get("customXmlParts")
						.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
						.then(RestUtility.Thenable.getBodyAsObject<Array<any>>((obj) => obj.value))
						.then((parts) => OfficeExtension.Promise.all(parts.map((part) => RestUtility.deleteItem(part))));
				}
				function addPart(ns: string): OfficeExtension.IPromise<Excel.CustomXmlPart> {
					return RestUtility.post("customXmlParts/add", { "xml": Xml.makeFragment(ns) })
						.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
						.then(RestUtility.Thenable.getBodyAsObject())
						.then((part: Excel.CustomXmlPart) => {
							RichApiTest.log.comment("Added part id='" + part.id + "', namespace='" + part.namespaceUri + "'");
							return part;
						});
				}
			}
		}
	}
}
?
module ExcelTest {
	export module RestUtility {
		export enum Status {
			OK = 200,
			Created = 201,
			NoContent = 204,
			BadRequest = 400,
			NotFound = 404,
			MethodNotAllowed = 405,
			InternalServeError = 500
		}
		export module Thenable {
			
			export function post(relativePath: string, body: any): () => OfficeExtension.IPromise<RichApiTest.RestResponseInfo> {
				return () => RestUtility.post(relativePath, body);
			}
			
			export function postAsUrlAction(relativePath: string, methodParameters?: any): () => OfficeExtension.IPromise<RichApiTest.RestResponseInfo> {
				return () => RestUtility.postAsUrlAction(relativePath, methodParameters);
			}
			
			export function get(relativePath: string): () => OfficeExtension.IPromise<RichApiTest.RestResponseInfo> {
				return () => RestUtility.get(relativePath);
			}
			
			export function deleteItem(relativePath: string): () => OfficeExtension.IPromise<RichApiTest.RestResponseInfo> {
				return () => RestUtility.deleteItem(relativePath);
			}
			
			export function patch(id: string, properties: any): () => OfficeExtension.IPromise<RichApiTest.RestResponseInfo> {
				return () => RestUtility.patch(id, properties);
			}
			
			
			export function getBodyAsObject<T>(transform?: (obj: any) => T): (resp: RichApiTest.RestResponseInfo) => T {
				return (resp) => RestUtility.getBodyAsObject(resp, transform);
			}
			
			export function verifyObjectType<T>(expectedObjectType: string): (obj: T) => T {
				return (obj) => {
					var odataType = getODataType(obj); 
					var same = odataType === expectedObjectType;
					if (!same && odataType && expectedObjectType) {
						var index;
						index = odataType.lastIndexOf(".");
						if (index > 0) {
							odataType = odataType.substr(index + 1);
						}
						index = expectedObjectType.lastIndexOf(".");
						if (index > 0) {
							expectedObjectType = expectedObjectType.substr(index + 1);
						}
						same = odataType === expectedObjectType;
					}
					Util.assert(same);
					return obj;
				}
			}
			
			export function validateStatus(expected: RestUtility.Status|number): (resp: RichApiTest.RestResponseInfo) => RichApiTest.RestResponseInfo {
				return (resp) => RestUtility.validateStatus(expected, resp);
			}
			
			export function validateStatuses(expected: RestUtility.Status|number): (responses: RichApiTest.RestResponseInfo[]) => RichApiTest.RestResponseInfo[] {
				return (responses) => responses.map(validateStatus(expected));
			}
			export function validateErrorCodeWithVadidateAction(validateAction: (errorCode: string) => void): (resp: RichApiTest.RestResponseInfo) => RichApiTest.RestResponseInfo {
				return (resp) => {
					if (OfficeExtension.Utility.isNullOrEmptyString(resp.body)) {
						throw new Error("Empty body");
					}
					var bodyTrimmed = OfficeExtension.Utility.trim(resp.body);
					if (bodyTrimmed.length == 0) {
						throw new Error("Empty body");
					}
					if (bodyTrimmed.charAt(0) != '{') {
						throw new Error("Not JSON body:" + resp.body);
					}
					var errorBody = JSON.parse(resp.body);
					if (!errorBody) {
						throw new Error("Cannot parse response body: " + resp.body);
					}
					if (!errorBody.error) {
						throw new Error("Cannot get error from response body: " + resp.body);
					}
					validateAction(errorBody.error.code);
					return resp;
				}
			}
			export function validateErrorCode(expectedCode: string): (resp: RichApiTest.RestResponseInfo) => RichApiTest.RestResponseInfo {
				return validateErrorCodeWithVadidateAction(
					(errorCode: string) => {
						Util.assertCompareValues(expectedCode, errorCode, "Error response code");
				});
			}
			
			export function invokeGetAndValidateResponsePromise(relativeUrl: string, expectedValue: any, transform: (obj: any) => any): () => OfficeExtension.IPromise<void> {
				return function () {
					return RestUtility.invokeGetAndValidateResponsePromise(relativeUrl, expectedValue, transform);
				}
			}
		}
		
		export function invokeGetAndValidateResponsePromise(relativeUrl: string, expectedValue: any, transform: (obj: any) => any): OfficeExtension.IPromise<void> {
			return RestUtility.get(relativeUrl)
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
				.then(RestUtility.Thenable.getBodyAsObject(transform))
				.then((value) => {
					RestUtility.validateValue(value, expectedValue);
				});
		}
		
		export function validateStatus(expected: RestUtility.Status | number, response: RichApiTest.RestResponseInfo): RichApiTest.RestResponseInfo {
			RichApiTest.RestUtility.verifyStatusCodeThrow(response, expected);
			return response;
		}
		
		export function invokeGetAndValidateResponse(relativeUrl: string, expectedValue: any, transform: (obj: any) => any): void {
			RestUtility.invokeGetAndValidateResponsePromise(relativeUrl, expectedValue, transform)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		}
		
		export function validateValue(value: any, expectedValue: any, delta?: number): void {
			Util.assert(Util.compare(value, expectedValue, delta));
		}
		
		export function ensureDisabledApiFailed(relativePath: string, httpMethod: string): void {
			var expectedErrorCode = Excel.ErrorCodes.invalidArgument;
			var expectedErrorCodeFromGraph = "BadRequest";
			RichApiTest.RestUtility.invoke(
				{
					method: httpMethod,
					url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + relativePath,
					body: ""
				}
				).then((resp: RichApiTest.RestResponseInfo) => {
					RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusBadRequest);
					var responseJson = JSON.parse(resp.body);
					if (responseJson) {
						if (responseJson.error.code != expectedErrorCode && responseJson.error.code != expectedErrorCodeFromGraph) {
							throw new Error("Expected response code is " + expectedErrorCode + "; actual response code is " + responseJson.error.code);
						}
					}
					else {
						throw new Error("Cannot parse response");
					}
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		}
		
		export function post(relativePath: string, body?: any): OfficeExtension.IPromise<RichApiTest.RestResponseInfo> {
			var request: RichApiTest.RestRequestInfo = {
				url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + relativePath,
				method: RichApiTest.RestUtility.httpMethodPost,
				body: JSON.stringify(body)
			}
			RichApiTest.log.comment("Invoking POST with URL: " + request.url);
			return RichApiTest.RestUtility.invoke(request);
		}
		
		export function postAsUrlAction(relativePath: string, methodParameters?: { [key: string]: any }): OfficeExtension.IPromise<RichApiTest.RestResponseInfo> {
			var body = "";
			if (methodParameters) {
				body = JSON.stringify(methodParameters);
			}
			var request: RichApiTest.RestRequestInfo = {
				url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + relativePath,
				body: body,
				method: RichApiTest.RestUtility.httpMethodPost,
			}
			RichApiTest.log.comment("Invoking POST method action with URL: " + request.url);
			return RichApiTest.RestUtility.invoke(request);
		}
		
		export function get(relativePath: string): OfficeExtension.IPromise<RichApiTest.RestResponseInfo> {
			var request: RichApiTest.RestRequestInfo = {
				url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + relativePath,
				method: RichApiTest.RestUtility.httpMethodGet
			};
			RichApiTest.log.comment("Invoking GET with URL: " + request.url);
			return RichApiTest.RestUtility.invoke(request);
		}
		export async function getAndExtract(relativePath: string, propertyName: string): Promise<any> {
			const response = await RestUtility.get(relativePath);
			validateStatus(200, response);
			return RestUtility.getBodyAsObject(response)[propertyName];
		}
		
		export function patch(id: string, properties: any): OfficeExtension.IPromise<RichApiTest.RestResponseInfo> {
			var parsedBody = JSON.stringify(properties);
			var request: RichApiTest.RestRequestInfo = {
				url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + id,
				method: RichApiTest.RestUtility.httpMethodPatch,
				body: parsedBody
			}
			RichApiTest.log.comment("Invoking PATCH with URL: " + request.url);
			RichApiTest.log.comment("Invoking PATCH with Body: " + parsedBody);
			return RichApiTest.RestUtility.invoke(request);
		}
		
		export function deleteItem(obj: string|Object): OfficeExtension.IPromise<RichApiTest.RestResponseInfo> {
			var relativePath = extractId(obj);
			var request: RichApiTest.RestRequestInfo = {
				url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + relativePath,
				method: RichApiTest.RestUtility.httpMethodDelete
			};
			RichApiTest.log.comment("Invoking DELETE with URL: " + request.url);
			return RichApiTest.RestUtility.invoke(request);
		}
		
		export function getBodyAsObject<T>(resp: RichApiTest.RestResponseInfo, transform?: (obj: any) => T): T {
			try {
				var obj = JSON.parse(resp.body);
				if (transform) {
					obj = transform(obj);
				}
				return <T>obj;
			}
			catch (e) {
				RichApiTest.log.comment("Exception caught while parsing response. Exception: " + e);
				RichApiTest.log.comment("Response: ");
				RichApiTest.log.comment(resp.body);
				throw e;
			}
		}
		
		export function getODataId(obj: any): string {
			var ret = decodeURI(obj["@odata.id"]);
			if (ret) {
				var index = ret.toLowerCase().indexOf('workbook/');
				if (index >= 0) {
					ret = ret.substr(index + 'workbook/'.length);
				}
			}
			return ret;
		}
		
		export function getODataType(obj: any): string {
			return obj["@odata.type"];
		}
		
		function extractId(obj: string|Object): string {
			if (typeof obj === 'string') {
				return obj;
			}
			var extracted = getODataId(obj);
			if (extracted != undefined) {
				return extracted;
			}
			throw new Error("Cannot get the OData id for the object. The parameter is neither a string, nor an object that has a '@odata.id' field.");
		}
		
		export function encodeODataLiteral(value: any): any {
			if (typeof value === 'string') {
				
				return "'" + replaceAll(value, "'", "''") + "'";
			} else if (typeof value == 'boolean' || typeof value == 'number') {
				return value;
			} else {
				throw new Error("Unsupported type " + typeof value);
			}
		}
		
		function replaceAll(text, search, replace) {
			return text.split(search).join(replace);
		}
	}
}
?module ExcelTest {
	export function test_SampleTest_SetAndGetRangeValue_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1";
		var values = [["Foobar"]];
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			range.values = values;
			ctx.load(range);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(rangeAddress, range.address, "Range Address");
					Util.assertCompareArray(range.values, values);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SampleTest_SetAndGetRangeValue_cvt_REST_V11() {
		var expectedValues = [["Foobar"]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1')", { values: expectedValues })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareArray(range["values"], expectedValues);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export async function test_SampleTest_SetAndGetRangeValue$AsyncAwait_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1";
		var values = [["Foobar"]];
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.values = values;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.load("values, address");
			await ctx.sync();
			Util.assertCompareValues(rangeAddress, rangeToGet.address, "Range Address");
			Util.assertCompareArray(values, rangeToGet.values);
		});
	}
	export async function test_SampleTest_SetAndGetRangeValue$AsyncAwait_cvt_REST_V11() {
		var expectedValues = [["Foobar"]];
		RichApiTest.log.comment(">> Clearing A1");
		RestUtility.validateStatus(RestUtility.Status.NoContent,
			await RestUtility.post("worksheets('Sheet1')/range(address='A1')/Clear"));
		RichApiTest.log.comment(">> Validating that the cell is now indeed clear");
		Util.assertCompareArray([[""]],
			await ExcelTest.RestUtility.getAndExtract("worksheets('Sheet1')/range(address='A1')", "values"));
		RichApiTest.log.comment(">> Patching A1 values");
		RestUtility.validateStatus(RestUtility.Status.OK,
			await RestUtility.patch("worksheets('Sheet1')/range(address='A1')", { values: expectedValues }));
		Util.assertCompareArray(expectedValues, await RestUtility.getAndExtract("worksheets('Sheet1')/range(address='A1')", "values"));
	}
	export async function test_SampleTest_Clear_bvt_JScript_V11() {
		var sheetName = "Sheet1";
		await Excel.run(async (ctx) => {
			var range = ctx.workbook.worksheets.getItem(sheetName).getRange(null);
			range.clear(null);
			await ctx.sync();
		});
	}
}
module ExcelTest {
	
	export class TestApi extends OfficeExtension.ClientObject {
		get _className(): string {
			return "Test";
		}
		
		
		
		
		scenario1(param1: string, param2: number): OfficeExtension.ClientResult<string> {
			
			
			var action = OfficeExtension.ActionFactory.createMethodAction(this.context, this, "Scenario1", OfficeExtension.OperationType.Default, [param1, param2]);
			var ret = new OfficeExtension.ClientResult<string>();
			OfficeExtension.Utility._addActionResultHandler(this, action, ret);
			return ret;
		}
		
		scenario2(param1: string, param2: number, param3: number, param4: string, param5: any): void {
			
			
			OfficeExtension.ActionFactory.createMethodAction(this.context, this, "Scenario2", OfficeExtension.OperationType.Default, [param1, param2, param3, param4, param5]);
		}
		
		_handleResult(value: any): void {
			super._handleResult(value);
			if (OfficeExtension.Utility.isNullOrUndefined(value))
				return;
			var obj: Object = value;
			OfficeExtension.Utility.fixObjectPathIfNecessary(this, obj);
		}
		toJSON() {
			return {
			};
		}
		
		static getTestObject(workbook: Excel.Workbook): ExcelTest.TestApi {
			var test = new ExcelTest.TestApi(workbook.context, OfficeExtension.ObjectPathFactory.createPropertyObjectPath(workbook.context, workbook, "Test", false , false ));
			return test;
		}
	}
}
?module ExcelTest {
	export module Util {
		
		
		export var ensureSyncFailed
			: (ctx: Excel.RequestContext,
			expectedErrorCode: string,
			additionalValidation?: (errorInfo: OfficeExtension.Error) => boolean,
			onCompletion?: () => void) => void
			= RichApiTest.Util.ensureSyncFailed;
		export var ensureSyncFailedPromise
			: (
				ctx: Excel.RequestContext,
				expectedErrorCode: string,
				expectedErrorLocation?: string
			) => OfficeExtension.IPromise<OfficeExtension.Error>
			= RichApiTest.Util.ensureSyncFailedPromise;
		export var expectException = RichApiTest.Util.expectException;
		export var promisify = RichApiTest.Util.promisify;
		export var throwOfficeError = RichApiTest.Util.throwOfficeError;
		export var ensureExpectedFailureAndPassOrFail = RichApiTest.Util.ensureExpectedFailureAndPassOrFail;
		export var ensureExpectedFailureAndThrowIfUnexpected = RichApiTest.Util.ensureExpectedFailureAndThrowIfUnexpected;
		export var wait = RichApiTest.Util.wait;
		export var vocalizeAssert = RichApiTest.Util.vocalizeAssert;
		export var assert = RichApiTest.Util.assert;
		export var assertCompareArray = RichApiTest.Util.assertCompareArray;
		export var assertCompareValues = RichApiTest.Util.assertCompareValues;
		export var assertCompareValuesNotEqual = RichApiTest.Util.assertCompareValuesNotEqual;
		export var assertCompareNumeric = RichApiTest.Util.assertCompareNumeric;
		export var assertCompareObjectsAsJson = RichApiTest.Util.assertCompareObjectsAsJson;
		export var compare = RichApiTest.Util.compare;
		export var parseStringAsNumberAndCompare = RichApiTest.Util.parseStringAsNumberAndCompare;
		export var compareProperty = RichApiTest.Util.compareProperty;
		export var compareArray = RichApiTest.Util.compareArray;
		export var isObject = RichApiTest.Util.isObject;
		export var startsWith = RichApiTest.Util.startsWith;
		
		export function moveSheet(
			sheetName: string,
			target) {
			var ctx = new Excel.RequestContext();
			var sheets = ctx.workbook.worksheets;
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var expected = target;
			ctx.load(sheets);
			ctx.load(sheet);
			ctx.sync().then(function () {
				var position = sheet.position;
				if (expected == -1) {
					expected = sheets.items.length;
				}
				sheet.position = target;
				ctx.load(sheet);
				ctx.sync().then(function () {
					var success = true;
					if (sheet.position != expected) {
						RichApiTest.log.comment("Sheet: " + sheet.name);
						RichApiTest.log.comment("position: " + position);
						RichApiTest.log.comment("Expect sheet at: " + expected);
						RichApiTest.log.comment("Actual sheet at: " + sheet.position);
						success = false;
					} else {
						RichApiTest.log.comment("Sheet: " + sheet.name);
						RichApiTest.log.comment("Moved to: " + sheet.position);
					}
					sheet.position = position; 
					ctx.load(sheet);
					ctx.sync().then(function () {
						if (sheet.position != position) {
							RichApiTest.log.comment("moved to: " + sheet.position);
							RichApiTest.log.comment("should be: " + position);
							RichApiTest.log.comment("Restore failed");
							success = false;
						}
						RichApiTest.log.done(success);
					}, ExcelTest.reportError);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		}
		
		export function removeAllChartsBefore(sheetName: string, test?: () => void): OfficeExtension.IPromise<any> {
			RichApiTest.log.comment('Cleaning all charts from the sheet "' + sheetName + '"');
			var ctx = new Excel.RequestContext();
			var charts = ctx.workbook.worksheets.getItem(sheetName).charts;
			ctx.load(charts, "id");
			var result: OfficeExtension.IPromise<void> = ctx.sync()
				.then(() => {
					RichApiTest.log.comment(charts.count + " charts were found");
					for (var i = 0; i < charts.count; i++) {
						charts.getItemAt(0).delete();
					}
				})
				.then(ctx.sync)
				.then(() => RichApiTest.log.comment("Charts cleaned, running the requested action..."));
			if (test) {
				result = result
					.then(function () {
						
						
						test();
					})
					.catch(ExcelTest.reportError)
				
				return null;
			} else {
				
				return result;
			}
		}
		export async function removeAllChartsAsync(sheetName: string) {
			RichApiTest.log.comment('Cleaning all charts from the sheet "' + sheetName + '"');
			var ctx = new Excel.RequestContext();
			var charts = ctx.workbook.worksheets.getItem(sheetName).charts;
			ctx.load(charts, "id");
			await ctx.sync();
			RichApiTest.log.comment(charts.count + " charts were found");
			for (var i = 0; i < charts.count; i++) {
				charts.getItemAt(0).delete();
			}
			await ctx.sync();
		}
		export function clearSheetBefore(sheetName: string, test: () => void): void {
			RichApiTest.log.comment('Clearing Sheet "' + sheetName + '"');
			var ctx = new Excel.RequestContext();
			var rangeClear = ctx.workbook.worksheets.getItem(sheetName).getRange(null);
			rangeClear.clear(null);
			ctx.sync().then(() => {
				RichApiTest.log.comment("Sheet cleared, running the requested action...");
				test();
			}, (error) => {
				RichApiTest.log.comment('Failed while trying to clear sheet "' + sheetName + '".');
				RichApiTest.log.fail(error);
			});
		}
		export async function clearSheet(sheetName: string) {
			RichApiTest.log.comment('Clearing Sheet "' + sheetName + '"');
			var ctx = new Excel.RequestContext();
			var rangeClear = ctx.workbook.worksheets.getItem(sheetName).getRange(null);
			rangeClear.clear(null);
			await ctx.sync();
		}
		export function clearSheetBeforePromise(ctx: Excel.RequestContext, sheetName: string): OfficeExtension.IPromise<void> {
			RichApiTest.log.comment('Clearing Sheet "' + sheetName + '"');
			var rangeClear = ctx.workbook.worksheets.getItem(sheetName).getRange(null);
			rangeClear.clear(null);
			return ctx.sync()
				.then(() => {
					RichApiTest.log.comment("Sheet cleared.");
				});
		}
		export function clearSheetRest(sheetName: string): OfficeExtension.IPromise<any> {
			RichApiTest.log.comment('Clearing Sheet "' + sheetName + '"');
			
			
			return ExcelTest.RestUtility.get("worksheets('" + sheetName + "')/tables")
				.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
				.then(ExcelTest.RestUtility.Thenable.getBodyAsObject<Array<any>>((obj) => obj.value))
				.then((result) => OfficeExtension.Promise.all(result.map((item) => ExcelTest.RestUtility.deleteItem(item))))
				.then(ExcelTest.RestUtility.Thenable.validateStatuses(ExcelTest.RestUtility.Status.NoContent))
				.then(ExcelTest.RestUtility.Thenable.post("worksheets('" + sheetName + "')/range(address=null)/clear", { applyTo: Excel.ClearApplyTo.all }))
				.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
				.then(() => {
					RichApiTest.log.comment("Sheet cleared, running the requested action...");
				});
		}
		export function clearSheetAndAddPivotTable(ctx: Excel.RequestContext, sheetName: string, simpleTable: boolean): OfficeExtension.IPromise<any> {
			return clearSheetBeforePromise(ctx, sheetName)
				.then(function () {
					
					var range = ctx.workbook.worksheets.getItem(sheetName).getRange("A1:D10");
					range.values = [
						["Category", "Item", "Quantity", "Date"],
						["Fruit", "Orange", 10, "1/2/2017"],
						["Veg", "Cellery", 8, "1/5/2017"],
						["Veg", "Broccoli", 15, "1/3/2017"],
						["Fruit", "Pear", 15, "1/10/2017"],
						["Fruit", "Orange", 15, "1/10/2017"],
						["Fruit", "Pear", 20, "2/2/2017"],
						["Veg", "Cellery", 30, "2/10/2017"],
						["Fruit", "Pear", 50, "2/10/2017"],
						["Veg", "Cellery", 15, "2/10/2017"]];
					
					var pivotCaches = ctx.workbook.pivotCaches;
					pivotCaches.load();
					var pivotCache = pivotCaches.add(Excel.PivotTableSourceType.database, range);
					
					var pivotTableName = "PivotTableName" + Math.random();
					var targetRange = range.getOffsetRange(6, 6);
					var pivotTable = ctx.workbook.pivotTables.add(pivotTableName, targetRange, pivotCache);
					
					var fieldDate = pivotTable.pivotFields.getItem("Date");
					fieldDate.orientation = Excel.PivotFieldOrientation.rowField;
					
					if (!simpleTable) {
						fieldDate.autoGroup();
						var fieldMonths = pivotTable.pivotFields.getItem("Months");
						fieldMonths.showDetail = true;
						var fieldCategory = pivotTable.pivotFields.getItem("Category");
						fieldCategory.orientation = Excel.PivotFieldOrientation.columnField;
					}
					var fieldItem = pivotTable.pivotFields.getItem("Item");
					fieldItem.orientation = Excel.PivotFieldOrientation.columnField;
					var fieldQuantity = pivotTable.pivotFields.getItem("Quantity");
					pivotTable.addDataField(fieldQuantity, "Sum of Quantity", Excel.ConsolidationFunction.sum);
					ctx.load(pivotTable);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment("PivotTable'" + pivotTable.name + "' added.");
							return pivotTable;
						})
				})
		}
		export function checkSheetExistsRunTest(
			ctx: Excel.RequestContext,
			sheetName: string,
			onCompletion?: () => void): void {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			ctx.load(sheet);
			ctx.sync().then(function () {
				RichApiTest.log.comment("Sheet '" + sheetName + "' was found, proceeding with test execution.");
				if (onCompletion != null) {
					onCompletion();
				} else {
					
					RichApiTest.log.done(true);
				}
			}, function (errorInfo: OfficeExtension.Error) {
				if (errorInfo.code == Excel.ErrorCodes.itemNotFound) {
					RichApiTest.log.comment("Sheet '" + sheetName + "' was not found, skipping test.");
					RichApiTest.log.done(true);
				} else {
					RichApiTest.log.comment("Received failure, but not the expected one!");
					RichApiTest.log.fail("Received error was " + errorInfo.code + ": " + errorInfo.message);
				}
			});
		}
		export function getTableAtPosition(address: string, callback: (table: Excel.Table) => void) {
			var ctx = new Excel.RequestContext();
			var tables = ctx.workbook.tables;
			ctx.load(tables, "id");
			ctx.sync().then(() => {
				var tableVisited = 0;
				for (var i = 0; i < tables.count; i++) {
					var table = tables.items[i];
					var range = table.getRange();
					ctx.load(range, "address");
					((boundTable, boundRange) => { 
						ctx.sync().then(() => {
							if (boundRange.address == address) {
								callback(boundTable);
							} else {
								tableVisited++;
								if (tableVisited == tables.count) {
									callback(null);
								}
							}
						}, ExcelTest.reportError);
					})(table, range);
				}
			}, ExcelTest.reportError);
		}
		export function deleteNameIfExist(ctx: Excel.RequestContext, name: string): OfficeExtension.IPromise<any> {
			ctx.workbook.names.getItemOrNullObject(name).delete();
			return ctx.sync();
		}
		export function deleteNameIfExistOnWorksheet(ctx: Excel.RequestContext, worksheet: Excel.Worksheet, name: string): OfficeExtension.IPromise<any> {
			worksheet.names.getItemOrNullObject(name).delete();
			return ctx.sync();
		}
		export function isGraphTest() {
			return window.location.href.indexOf("_host_Info=") < 0;
		}
		export function isWAC() {
			return (<any>window).Office.context.platform === (<any>window).Office.PlatformType.OfficeOnline;
		}
		export function isDesktop() {
			return (<any>window).Office.context.platform === (<any>window).Office.PlatformType.PC;
		}
		export function isMacOS() {
			return (<any>window).Office.context.platform === (<any>window).Office.PlatformType.Mac;
		}
		export function isiOS() {
			return (<any>window).Office.context.platform === (<any>window).Office.PlatformType.iOS;
		}
		export function isApple() {
			return isMacOS() || isiOS();
		}
		export function isAndroid() {
			return (<any>window).Office.context.platform === (<any>window).Office.PlatformType.Android;
		}
		export function isUniversal() {
			return (<any>window).Office.context.platform === (<any>window).Office.PlatformType.Universal;
		}
		export function testProperty(ctx: Excel.RequestContext, obj: any, objName: string, propertyName: string, defaultValue: any, newValue: any): OfficeExtension.IPromise<any> {
			Util.assertCompareValues(defaultValue, obj[propertyName], "Default value of " + objName + "." + propertyName + " is " + defaultValue);
			obj[propertyName] = newValue;
			return ctx.sync()
				.then(function () {
					
					Util.assertCompareValues(newValue, obj[propertyName], objName + "." + propertyName + " is now " + newValue);
					obj[propertyName] = defaultValue;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(defaultValue, obj[propertyName], objName + "." + propertyName + " is back to " + defaultValue);
				})
		}
		export function testBoolProperty(ctx: Excel.RequestContext, obj: any, objName: string, propertyName: string, defaultValue: boolean): OfficeExtension.IPromise<any> {
			return testProperty(ctx, obj, objName, propertyName, defaultValue, !defaultValue)
		}
	}
}
?module ExcelTest {
	export function richApiMessageHandler(eventArgs) {
		RichApiTest.log.comment(JSON.stringify(eventArgs));
		return OfficeExtension.Utility._createPromiseFromResult(null);
	}
	export function test_AddinMessage_AddHandler_cvt_JScript_V17() {
		Excel.run((ctx) => {
			ctx.workbook._onMessage.add(ExcelTest.richApiMessageHandler);
			return ctx.sync();
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_AddinMessage_Trigger$string_cvt_JScript_V17() {
		Excel.run((ctx) => {
				var testApi = ctx.workbook.internalTest;
				testApi.triggerMessage(0, 1, "ATarget", "Hello");
				return ctx.sync();
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_AddinMessage_Trigger$object_cvt_JScript_V17() {
		Excel.run((ctx) => {
			var testApi = ctx.workbook.internalTest;
			testApi.triggerMessage(0, 1, "BTarget", { "Street": "One Microsoft Way", "City": "Redmond" });
			return ctx.sync();
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_AddinMessage_Event$basic_cvt_JScript_V17() {
		Excel.run((ctx) => {
			var testApi = ctx.workbook.internalTest;
			var count = 0;
			var eventResult = testApi.onTestEvent.add((eventArgs: Excel.InternalTestEventArgs) => {
				RichApiTest.log.comment("Event1 triggered");
				RichApiTest.log.comment(JSON.stringify(eventArgs));
				count++;
				return null;
			});
			return ctx.sync()
				.then(() => {
					testApi.triggerTestEvent(100, ctx.workbook.worksheets.getFirst());
				})
				.then(() => {
					return OfficeExtension.Utility._createTimeoutPromise(10000);
				})
				.then(() => {
					RichApiTest.log.comment("After 10 seconds, count=" + count);
					ctx.workbook.load();
					return ctx.sync();
				})
				.then(() => {
					RichApiTest.log.comment("After 10 seconds and sync, count=" + count);
					eventResult.remove();
					return ctx.sync();
				})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_AddinMessage_Event$trigger3times_cvt_JScript_V17() {
		Excel.run((ctx) => {
			var testApi = ctx.workbook.internalTest;
			var count = 0;
			var eventResult = testApi.onTestEvent.add((eventArgs: Excel.InternalTestEventArgs) => {
				RichApiTest.log.comment("Event1 triggered");
				RichApiTest.log.comment(JSON.stringify(eventArgs));
				count++;
				return null;
			});
			return ctx.sync()
				.then(() => {
					testApi.triggerTestEvent(100, ctx.workbook.worksheets.getFirst());
					testApi.triggerTestEvent(101, ctx.workbook.worksheets.getFirst());
					testApi.triggerTestEvent(102, ctx.workbook.worksheets.getFirst());
				})
				.then(() => {
					return OfficeExtension.Utility._createTimeoutPromise(10000);
				})
				.then(() => {
					RichApiTest.log.comment("After 10 seconds, count=" + count);
					ctx.workbook.load();
					return ctx.sync();
				})
				.then(() => {
					RichApiTest.log.comment("After 10 seconds and sync, count=" + count);
					eventResult.remove();
					return ctx.sync();
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	export function test_AddinMessage_Event1Registered$event1triggered_cvt_JScript_V17() {
		Excel.run((ctx) => {
			var testApi = ctx.workbook.internalTest;
			var eventResult = testApi.onTestEvent.add((eventArgs: Excel.InternalTestEventArgs) => {
				RichApiTest.log.comment("Test Event triggered");
				RichApiTest.log.comment(JSON.stringify(eventArgs));
				return null;
			});
			var eventResult1 = testApi.onTest1Event.add((eventArgs: Excel.InternalTestEventArgs) => {
				RichApiTest.log.comment("Test Event1 triggered");
				RichApiTest.log.comment(JSON.stringify(eventArgs));
				return null;
			});
			return ctx.sync()
				.then(() => {
					testApi.triggerTestEventWithFilter(200, Excel.MessageType.testEvent, ctx.workbook.worksheets.getFirst());
					testApi.triggerTestEventWithFilter(201, Excel.MessageType.test1Event, ctx.workbook.worksheets.getFirst());
				})
				.then(() => {
					return OfficeExtension.Utility._createTimeoutPromise(10000);
				})
				.then(() => {
					RichApiTest.log.comment("After 10 seconds");
					ctx.workbook.load();
					return ctx.sync();
				})
				.then(() => {
					RichApiTest.log.comment("After 10 seconds and sync");
					eventResult.remove()
					eventResult1.remove();
					return ctx.sync();
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
module ExcelTest {
	function helper_CallBindingAddFromPrompt(bindingId, expectedReadBackData) {
		RichApiTest.log.comment("Please select the range Sheet1!A2:B4 in the prompt.");
		
		return Util.promisify(callback => Office.context.document.bindings.addFromPromptAsync(
				Office.BindingType.Matrix, { id: bindingId }, callback))
			.then((value: Office.Binding) => {
				
				return Util.promisify(callback => value.getDataAsync(callback))
					.then(readBackData => Util.assertCompareArray(readBackData, expectedReadBackData))
					.then(() => Util.promisify(callback =>
						Office.context.document.bindings.releaseByIdAsync(bindingId, callback)));
			});
	}
	export function test_Async_BindingAddFromPromptNewlyCreatedBinding_cvt_JScript_V16() {
		var bindingId = "addFromPromptTestBinding";
		var dataToSet = [ [1, 2], [2, 4], [3, 6] ];
		return Excel.run(async ctx => {
			ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4").values = dataToSet;
			await ctx.sync();
			await helper_CallBindingAddFromPrompt(bindingId, dataToSet);
		});
	}
	export function test_Async_BindingAddFromPromptExistingBinding_cvt_JScript_V16() {
		var bindingId = "testBindingExisting";
		var dataToSet = [ [1, 2], [2, 4], [3, 6] ];
		return Excel.run(async ctx => {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4");
			range.values = dataToSet;
			range.select();
			await ctx.sync();
			
			await Util.promisify((callback) => Office.context.document.bindings.addFromSelectionAsync(
				Office.BindingType.Matrix, { id: bindingId }, callback));
			await helper_CallBindingAddFromPrompt(bindingId, dataToSet);
		});
	}
}
?module ExcelTest {
	export async function test_Binding_GetBindingsCount_cvt_JScript_V11() {
		await Excel.run(async ctx => {
			var bindings = ctx.workbook.bindings;
			ctx.load(bindings);
			await ctx.sync();
			RichApiTest.log.comment("bindings count:" + bindings.count);
			for (var i = 0; i < bindings.items.length; i++) {
				RichApiTest.log.comment(bindings.items[i].id);
			}
		});
	}
	export async function test_Binding_GetBindingsCount$ViaMethod_cvt_JScript_V14() {
		await _async_injectCollectionCountTest_JS(ctx => ctx.workbook.bindings);
	}
	export async function test_Binding_GetRangeBindingById_bvt_JScript_V11() {
		await Excel.run(async ctx => {
			var binding1 = ctx.workbook.bindings.getItem("range1");
			var range1 = binding1.getRange();
			ctx.load(binding1);
			ctx.load(range1);
			await ctx.sync();
			RichApiTest.log.comment("binding Id:" + binding1.id);
			RichApiTest.log.comment("binding type: " + binding1.type);
			RichApiTest.log.comment("range address: " + range1.address);
		});
	}
	export async function test_Binding_GetRangeBindingByIndex_cvt_JScript_V11() {
		await Excel.run(async ctx => {
			var binding1 = ctx.workbook.bindings.getItemAt(0);
			var range1 = binding1.getRange();
			ctx.load(binding1);
			ctx.load(range1);
			await ctx.sync();
			RichApiTest.log.comment("binding Id:" + binding1.id);
			RichApiTest.log.comment("binding type: " + binding1.type);
			RichApiTest.log.comment("range address: " + range1.address);
		});
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export async function test_Binding_GetTextBindingById_cvt_JScript_V11() {
		await Excel.run(async ctx => {
			var binding1 = ctx.workbook.bindings.getItem("text1");
			var txt = binding1.getText();
			ctx.load(binding1);
			await ctx.sync();
			RichApiTest.log.comment("binding id:" + binding1.id);
			RichApiTest.log.comment("binding type:" + binding1.type);
			RichApiTest.log.comment("text:" + txt.value);
		});
	}
	
	
	
	
	
	export async function test_Binding_GetTableBindingInvalid_cvt_JScript_V11() {
		
		var SHEETNAME = "Bindings",
			TABLEADDRESS = SHEETNAME + "!D12:G14";
		var bindingName;
		await Excel.run(async ctx => {
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			ctx.load(table);
			await ctx.sync();
			RichApiTest.log.comment("created: " + table.name);
			await ctx.sync();
			
			bindingName = table.name + "B3";
			var result = await Util.promisify((callback) => Office.context.document.bindings.addFromNamedItemAsync(
				table.name, Office.BindingType.Table, { id: bindingName }, callback))
			RichApiTest.log.comment("binding created: " + bindingName);
			RichApiTest.log.comment("Result is " + result);
			RichApiTest.log.comment("binding created: " + bindingName);
			
			table.delete();
			await ctx.sync();
			
			var table = ctx.workbook.bindings.getItem(bindingName).getTable();
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidBinding);
		})
		await Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingName, callback));
	}
	
	
	
	
	export async function test_Binding_GetRangeBindingInvalid_cvt_JScript_V11() {
		var SHEETNAME = "Bindings";
		var rangeAddress = SHEETNAME + "!A20:B22";
		var bindingName = "RangeBinding";
		await Excel.run(async ctx => {
			ctx.workbook.worksheets.getItem(SHEETNAME).activate();
			ctx.workbook.worksheets.getItem(SHEETNAME).getRange(rangeAddress).select();
			await ctx.sync();
			
			const result = await Util.promisify((callback) =>
				Office.context.document.bindings.addFromSelectionAsync(
					Office.BindingType.Matrix, { id: bindingName }, callback));
			RichApiTest.log.comment("binding created: " + bindingName);
			RichApiTest.log.comment("Result is " + result);
			
			var range = ctx.workbook.worksheets.getItem(SHEETNAME).getRange(rangeAddress);
			range.delete("Up");
			await ctx.sync();
			ctx.workbook.bindings.getItem(bindingName).getRange();
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidBinding);
		})
		await Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingName, callback));
	}
	
	
	
	
	export async function test_Binding_GetTextBindingInvalid_cvt_JScript_V11() {
		var SHEETNAME = "Bindings";
		var rangeAddress = SHEETNAME + "!A18";
		var bindingName = "TextBinding";
		await Excel.run(async ctx => {
			ctx.workbook.worksheets.getItem(SHEETNAME).activate();
			ctx.workbook.worksheets.getItem(SHEETNAME).getRange(rangeAddress).select();
			await ctx.sync();
			let result = await Util.promisify((callback) =>
				Office.context.document.bindings.addFromSelectionAsync(
					Office.BindingType.Text,
					{ id: bindingName }, callback))
			RichApiTest.log.comment("binding created: " + bindingName);
			RichApiTest.log.comment("Result is " + result);
			var range = ctx.workbook.worksheets.getItem(SHEETNAME).getRange(rangeAddress);
			range.delete("Up");
			await ctx.sync();
			ctx.workbook.bindings.getItem(bindingName).getText();
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidBinding);
		})
		await Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingName, callback));
	}
	export async function test_Binding_NewBindingRangeInput_cvt_JScript_V13() {
		var bindingName = "MyBinding";
		await Excel.run(async function (ctx) {
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			var range = ctx.workbook.worksheets.getItem("sheet1").getRange("A2:C3");
			var binding = ctx.workbook.bindings.add(range, Excel.BindingType.range, bindingName);
			binding.getRange().values = dataToSet;
			await ctx.sync();
			let value = await Util.promisify((resolve) => Office.context.document.bindings.getByIdAsync(bindingName, (result) => resolve(result)))
			let readBackData = await Util.promisify((resolve) => (<Office.Binding>value).getDataAsync((result) => resolve(result)));
			Util.compareArray(readBackData, dataToSet);
		})
		await Util.promisify((resolve) => Office.context.document.bindings.releaseByIdAsync(bindingName, (result) => resolve(result)));
	}
	export async function test_Binding_NewBindingAddressInput_cvt_JScript_V13() {
		var bindingName = "MyBinding";
		await Excel.run(async function (ctx) {
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			var binding = ctx.workbook.bindings.add("Sheet1!A5:C6", Excel.BindingType.range, bindingName);
			var range = binding.getRange();
			range.values = dataToSet;
			range.load("address");
			await ctx.sync();
			Util.assertCompareValues("Sheet1!A5:C6", range.address);
			let value = await Util.promisify((resolve) => Office.context.document.bindings.getByIdAsync(bindingName, (result) => resolve(result)));
			let readBackData = await Util.promisify((resolve) => (<Office.Binding>value).getDataAsync((result) => resolve(result)));
			Util.compareArray(readBackData, dataToSet);
		})
		await Util.promisify((resolve) => Office.context.document.bindings.releaseByIdAsync(bindingName, (result) => resolve(result)));
	}
	export async function test_Binding_NewBindingEmptyIdIsOk_cvt_JScript_V13() {
		var bindingName = "";
		await Excel.run(async function (ctx) {
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			var range = ctx.workbook.worksheets.getItem("sheet1").getRange("A2:C3");
			var binding = ctx.workbook.bindings.add(range, Excel.BindingType.range, bindingName);
			binding.getRange().values = dataToSet;
			await ctx.sync();
			let value = await Util.promisify((resolve) => Office.context.document.bindings.getByIdAsync(bindingName, (result) => resolve(result)));
			let readBackData = await Util.promisify((resolve) => (<Office.Binding>value).getDataAsync((result) => resolve(result)));
			Util.compareArray(readBackData, dataToSet);
		})
		await Util.promisify((resolve) => Office.context.document.bindings.releaseByIdAsync(bindingName, (result) => resolve(result)));
	}
	export async function test_Binding_NewBindingNullIdIsInvalid_cvt_JScript_V13() {
		var bindingName = null;
		await Excel.run(async function (ctx) {
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			var range = ctx.workbook.worksheets.getItem("sheet1").getRange("A2:C3");
			var binding = ctx.workbook.bindings.add(range, Excel.BindingType.range, bindingName);
			binding.getRange().values = dataToSet;
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument, "BindingCollection.add");
		})
	}
	export async function test_Binding_NewBindingAddressInputInvalid_cvt_JScript_V13() {
		var bindingName = "MyBinding";
		await Excel.run(async function (ctx) {
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			var binding = ctx.workbook.bindings.add("Sheet1!A5:C6!Gaa", Excel.BindingType.range, bindingName);
			var range = binding.getRange();
			range.values = dataToSet;
			range.load("address");
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument, "BindingCollection.add")
		})
	}
	export async function test_Binding_NewBindingAddressWithOmittedSheetName_cvt_JScript_V13() {
		var bindingName = "MyBinding";
		await Excel.run(async function (ctx) {
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			var binding = ctx.workbook.bindings.add("A5:C6", Excel.BindingType.range, bindingName);
			var range = binding.getRange();
			range.values = dataToSet;
			range.load("address");
			await ctx.sync();
		});
	}
	export async function test_Binding_NewBindingAddFromNamedItemAddressInput$Invalid_cvt_JScript_V13() {
		var bindingName = "MyBinding";
		await Excel.run(async function (ctx) {
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			var binding = ctx.workbook.bindings.addFromNamedItem("Sheet1!A5:C6", Excel.BindingType.range, bindingName);
			var range = binding.getRange();
			range.values = dataToSet;
			range.load("address");
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument, "BindingCollection.addFromNamedItem")
		})
	}
	export async function test_Binding_NewBindingAddFromNamedItemInvalid_cvt_JScript_V13() {
		var bindingName = "MyBinding";
		await Excel.run(async function (ctx) {
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			var binding = ctx.workbook.bindings.addFromNamedItem("NameThatDoesNotExist", Excel.BindingType.range, bindingName);
			var range = binding.getRange();
			range.values = dataToSet;
			range.load("address");
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument, "BindingCollection.addFromNamedItem")
		})
	}
	export async function test_Binding_NewBindingAddFromNamedItemName_cvt_JScript_V13() {
		var bindingName = "MyBinding";
		await Excel.run(async function (ctx) {
			var dataExpectedToReadBack = [
				["", "Nov"],
				["Hammer", 23],
				["Wrench", 12],
				["Saw", 5],
			];
			var binding = ctx.workbook.bindings.addFromNamedItem("ChartsNovemberGlobalNamedRange", Excel.BindingType.range, bindingName);
			var range = binding.getRange();
			range.load("address");
			await ctx.sync();
			Util.assertCompareValues("Charts!E2:F5", range.address);
			let value = await Util.promisify((resolve) => Office.context.document.bindings.getByIdAsync(bindingName, (result) => resolve(result)))
			let readBackData = await Util.promisify((resolve) => (<Office.Binding>value).getDataAsync((result) => resolve(result)));
			Util.compareArray(readBackData, dataExpectedToReadBack);
		})
		await Util.promisify((resolve) => Office.context.document.bindings.releaseByIdAsync(bindingName, (result) => resolve(result)));
	}
	export async function test_Binding_NewBindingWithSameName_cvt_JScript_V13() {
		var bindingName = "MyBinding";
		await Excel.run(async function (ctx) {
			var existingBindingCount = 0;
			let bindings: Office.Binding[] = await OfficeExtension.Utility.promisify((callback) => Office.context.document.bindings.getAllAsync(callback)) as any;
			existingBindingCount = bindings.length;
			var binding1 = ctx.workbook.bindings.add("A5:C6", Excel.BindingType.range, bindingName);
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			var range = binding1.getRange();
			range.values = dataToSet;
			range.load("address");
			await ctx.sync();
			var binding2 = ctx.workbook.bindings.addFromNamedItem("ChartsNovemberGlobalNamedRange", Excel.BindingType.range, bindingName);
			var range = binding2.getRange();
			range.load("address");
			await ctx.sync();
			RichApiTest.log.comment("invoking releaseByIdAsync");
			await OfficeExtension.Utility.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingName, callback));
			RichApiTest.log.comment("invoking getAllAsync");
			bindings = await OfficeExtension.Utility.promisify((callback) => Office.context.document.bindings.getAllAsync(callback)) as any;
			Util.assertCompareValues(existingBindingCount, bindings.length, "binding count");
		})
	}
	export async function test_Binding_NewBindingAddFromNamedItemNotAName_cvt_JScript_V13() {
		var bindingName = "MyBinding";
		await Excel.run(async function (ctx) {
			var binding = ctx.workbook.bindings.addFromNamedItem("IntRef", Excel.BindingType.range, bindingName);
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation, "BindingCollection.addFromNamedItem");
		})
	}
	export async function test_Binding_NewBindingAddFromSelection_cvt_JScript_V13() {
		var bindingName = "MyBinding";
		await Excel.run(async function (ctx) {
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:C6").select();
			var binding = ctx.workbook.bindings.addFromSelection(Excel.BindingType.range, bindingName);
			var range = binding.getRange();
			range.values = dataToSet;
			range.load("address");
			await ctx.sync();
			Util.assertCompareValues("Sheet1!A5:C6", range.address);
			let value = await Util.promisify((resolve) => Office.context.document.bindings.getByIdAsync(bindingName, (result) => resolve(result)))
			let readBackData = await Util.promisify((resolve) => (<Office.Binding>value).getDataAsync((result) => resolve(result)));
			Util.compareArray(readBackData, dataToSet);
		})
		await Util.promisify((resolve) => Office.context.document.bindings.releaseByIdAsync(bindingName, (result) => resolve(result)));
	}
	export async function test_Binding_AddAndDeleteBinding_cvt_JScript_V13() {
		var bindingName = "BindingToAddDelete";
		await Excel.run(async function (ctx) {
			var dataToSet = [
				[1, 2, 3],
				[3, 2, 1],
			];
			ctx.workbook.worksheets.getItem("Sheet1").getRange("A10:C11").select();
			var binding = ctx.workbook.bindings.addFromSelection(Excel.BindingType.range, bindingName);
			var range = binding.getRange();
			range.values = dataToSet;
			await ctx.sync();
			let value = await Util.promisify((resolve) => Office.context.document.bindings.getByIdAsync(bindingName, (result) => resolve(result)))
			let readBackData = await Util.promisify((resolve) => (<Office.Binding>value).getDataAsync((result) => resolve(result)));
			Util.compareArray(readBackData, dataToSet);
			binding.delete();
			await ctx.sync();
			var binding2 = ctx.workbook.bindings.getItem(bindingName);
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound);
		})
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export async function test_Binding_GetItemOrNull_cvt_JScript_V14() {
		await Excel.run(async function (ctx) {
			var binding = ctx.workbook.bindings.getItemOrNullObject("Non-existing-binding");
			var binding2 = ctx.workbook.bindings.getItemOrNullObject("range1");
			await ctx.sync();
			Util.assert(binding.isNull, "Expect isNull true");
			Util.assert(!binding2.isNull, "Expect isNull false");
		})
	}
}
?module ExcelTest {
	function ensureBinding(ctx: Excel.RequestContext, bindingName: string, rangeAddress: string): OfficeExtension.IPromise<Excel.Binding> {
		var binding: Excel.Binding = ctx.workbook.bindings.getItemOrNullObject(bindingName);
		ctx.load(binding);
		return ctx.sync()
			.then(() => {
				if (binding.isNull) {
					var range = ctx.workbook.worksheets.getItem("sheet1").getRange(rangeAddress);
					binding = ctx.workbook.bindings.add(range, Excel.BindingType.range, bindingName);
					return ctx.sync(binding);
				}
				return binding;
			})
	}
	function OfficeJsBindingEventHandler() {
		RichApiTest.log.comment("OfficeJsBindingEventHandler triggered");
	}
	export function test_Events_Binding$AddRemoveUsingOfficeJs10Api_cvt_JScript_V11() {
		var bindingName = "range1";
		var bindingObj: Office.Binding;
		RichApiTest.log.comment("Test binding event using Office.js 1.0 API");
		OfficeExtension.Utility.promisify((callback) => Office.context.document.bindings.getByIdAsync(bindingName, callback))
			.then((binding: Office.Binding) => {
				bindingObj = binding;
				return OfficeExtension.Utility.promisify((callback) => binding.addHandlerAsync(Office.EventType.BindingDataChanged, OfficeJsBindingEventHandler, callback));
			})
			.then(() => {
				return OfficeExtension.Utility.promisify((callback) => bindingObj.removeHandlerAsync(Office.EventType.BindingDataChanged, { handler: OfficeJsBindingEventHandler }, callback));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Events_Binding$AddRemoveDataChanged_cvt_JScript_V11() {
		var bindingName = "BindingEventA2B3";
		var rangeAddress = "A2:B3";
		var binding: Excel.Binding;
		var ctx = new Excel.RequestContext();
		var eventResult1: OfficeExtension.EventHandlerResult<any>;
		var eventResult2: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var eventCountSave = 0;
		ensureBinding(ctx, bindingName, rangeAddress)
			.then((value) => {
				binding = value;
				eventResult1 = binding.onDataChanged.add(
					(args: Excel.BindingDataChangedEventArgs) => {
						eventCount++;
						RichApiTest.log.comment("first eventCount=" + eventCount);
						return null;
					});
				eventResult2 = binding.onDataChanged.add(
					(args: Excel.BindingDataChangedEventArgs) => {
						eventCount++;
						RichApiTest.log.comment("second eventCount=" + eventCount);
						return null;
					});
				return ctx.sync();
			})
			.then(() => {
				var range = ctx.workbook.worksheets.getItem("sheet1").getRange(rangeAddress)
				range.values = [["Hello" + Math.random(), "World" + Math.random()], [123 + Math.random(), 456 + Math.random()]];
				return ctx.sync();
			})
			.then(() => {
				RichApiTest.log.comment("Wait for 2 second");
				return OfficeExtension.Utility._createTimeoutPromise(2000);
			})
			.then(() => {
				RichApiTest.log.comment("EventCount=" + eventCount);
				Util.assertCompareValues(2, eventCount, "Event should be fired once");
				eventCountSave = eventCount;
			})
			.then(() => {
				eventResult1.remove();
				eventResult2.remove();
				return ctx.sync();
			})
			.then(() => {
				Util.assert(!binding.onDataChanged._registered, "Event handler should be unregistered now");
				Util.assertCompareValues(0, binding.onDataChanged._handlers.length, "Event handler list should be empty");
			})
			.then(() => {
				RichApiTest.log.comment("Update range value to trigger event");
				var range = ctx.workbook.worksheets.getItem("sheet1").getRange(rangeAddress)
				range.values = [["Hello" + Math.random(), "World" + Math.random()], [123 + Math.random(), 456 + Math.random()]];
				return ctx.sync();
			})
			.then(() => {
				RichApiTest.log.comment("Wait for 2 second");
				return OfficeExtension.Utility._createTimeoutPromise(2000);
			})
			.then(() => {
				Util.assertCompareValues(eventCountSave, eventCount, "Event should not be fired any more and eventCount should stay same.");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Events_Binding$AddRemoveSelectionChanged_cvt_JScript_V11() {
		var bindingName = "BindingEventA2B3";
		var rangeAddress = "A2:B3";
		var binding: Excel.Binding;
		var ctx = new Excel.RequestContext();
		var eventResult1: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		ensureBinding(ctx, bindingName, rangeAddress)
			.then((value) => {
				binding = value;
				RichApiTest.log.comment("ensure selection is outside of the binding");
				var range = ctx.workbook.worksheets.getItem("sheet1").getRange("A1:A1");
				range.select();
				return ctx.sync();
			})
			.then(() => {
				RichApiTest.log.comment("Adding event");
				eventResult1 = binding.onSelectionChanged.add(
					(args: Excel.BindingSelectionChangedEventArgs) => {
						eventCount++;
						RichApiTest.log.comment("first eventCount=" + eventCount);
						return null;
					});
				return ctx.sync();
			})
			.then(() => {
				RichApiTest.log.comment("select a cell inside the binding");
				var range = ctx.workbook.worksheets.getItem("sheet1").getRange("B3:B3");
				range.select();
				return ctx.sync();
			})
			.then(() => {
				RichApiTest.log.comment("Wait for 2 second");
				return OfficeExtension.Utility._createTimeoutPromise(2000);
			})
			.then(() => {
				RichApiTest.log.comment("EventCount=" + eventCount);
				Util.assertCompareValues(1, eventCount, "Selection event should be fired");
			})
			.then(() => {
				eventResult1.remove();
				return ctx.sync();
			})
			.then(() => {
				Util.assert(!binding.onSelectionChanged._registered, "Event handler should be unregistered now");
				Util.assertCompareValues(0, binding.onSelectionChanged._handlers.length, "Event handler list should be empty now");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}?module ExcelTest {
	export function test_Chart_ColorParser1_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			
			var sheetName = "Charts";
			
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add(Excel.ChartType.columnClustered, sourceData, "auto");
			
			chart.title.format.font.color = "#Ff00a6";
			chart.legend.format.font.color = "5566Aa";
			chart.series.getItemAt(0).format.line.color = "WhITe";
			chart.axes.valueAxis.format.line.color = "Olive"
			chart.axes.categoryAxis.format.line.color = "springgreen"
			
			chart.format.fill.setSolidColor("black");
			ctx.load(chart.title.format.font);
			ctx.load(chart.legend.format.font);
			var firstSeries = chart.series.getItemAt(0);
			ctx.load(firstSeries.format.line);
			ctx.load(chart.axes.valueAxis.format.line)
			ctx.load(chart.axes.categoryAxis.format.line);
			return ctx.sync().then(function () {
				
				var success =
					Util.compare(chart.title.format.font.color, "#FF00A6") &&
					Util.compare(chart.legend.format.font.color, "#5566AA") &&
					Util.compare(firstSeries.format.line.color, "#FFFFFF") &&
					Util.compare(chart.axes.valueAxis.format.line.color, "#808000") &&
					Util.compare(chart.axes.categoryAxis.format.line.color, "#00FF7F");
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	
	export function test_Chart_ColorParser2Illegal_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add(Excel.ChartType.columnClustered, sourceData, "auto");
			chart.title.format.font.color = "red";
			var illegalTries = [
				() => {
					RichApiTest.log.comment("Attempting: Illegal because contains spaces 1");
					chart.title.format.font.color = " #Ff00a6";
				},
				() => {
					RichApiTest.log.comment("Attempting: Illegal because contains spaces 2");
					chart.title.format.font.color = "#Ff00a6 ";
				},
				() => {
					RichApiTest.log.comment("Attempting: Illegal because contains spaces 3");
					chart.title.format.font.color = " pink";
				},
				() => {
					RichApiTest.log.comment("Attempting: Illegal because contains spaces 4");
					chart.title.format.font.color = "pink ";
				},
				() => {
					RichApiTest.log.comment("Attempting: Illegal because missing last digit");
					chart.title.format.font.color = "#44444";
				},
				() => {
					RichApiTest.log.comment("Attempting: Illegal because 3-digit hex, whereas we only allow six-digit");
					chart.title.format.font.color = "#333";
				},
				() => {
					RichApiTest.log.comment("Attempting: Illegal because invalid color name");
					chart.title.format.font.color = "puuurple";
				},
				() => {
					RichApiTest.log.comment("Attempting: Illegal because empty");
					chart.title.format.font.color = "";
				},
				() => {
					RichApiTest.log.comment("Attempting: Illegal because null");
					chart.title.format.font.color = null;
				}
			];
			ctx.sync().then(function () {
				sequentialSync(illegalTries);
			}, ExcelTest.reportError);
			function sequentialSync(actions: Array<() => void>) {
				if (actions.length == 0) {
					RichApiTest.log.comment("All actions sequentially executed, done!");
					RichApiTest.log.comment("Finally, ensuring that the color was never changed by all of the illegal attempts -- that it is still red");
					ctx.load(chart.title.format.font);
					ctx.sync().then(function () {
						RichApiTest.log.done(Util.compare(chart.title.format.font.color, "#FF0000"));
					});
					return;
				}
				var action = actions.shift();
				action();
				Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument, null, () => sequentialSync(actions));
			}
		});
	}
}
?module ExcelTest {
	export function test_Chart_AddWithTitleAndLegendSettings_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add(Excel.ChartType._3DPie, sourceData, "auto");
			var title = chart.title;
			title.text = "3D Pie Chart";
			title.overlay = false;
			var legend = chart.legend;
			legend.position = Excel.ChartLegendPosition.corner;
			legend.overlay = false;
			ctx.load(title);
			ctx.load(legend);
			ctx.sync().then(function () {
				var success = true;
				ctx.sync().then(function () {
					RichApiTest.log.comment("chart.title.text='" + chart.title.text + "'");
					if (chart.title.text != "3D Pie Chart") {
						RichApiTest.log.comment("title text is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.title.overlay='" + chart.title.overlay + "'");
					if (chart.title.overlay != false) {
						RichApiTest.log.comment("title overlay state is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.legend.position='" + chart.legend.position + "'");
					if (chart.legend.position != Excel.ChartLegendPosition.corner) {
						RichApiTest.log.comment("legend position is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.legend.overlay='" + chart.legend.overlay + "'");
					if (chart.legend.overlay != false) {
						RichApiTest.log.comment("legend overlay state is not as expected");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_AddAndCheckNullablePropertiesOfTitleAndLegend_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add(Excel.ChartType._3DPie, sourceData, "auto");
			var title = chart.title;
			title.visible = false;
			var legend = chart.legend;
			legend.visible = false;
			ctx.load(title);
			ctx.load(legend);
			ctx.sync().then(function () {
				var success = true;
				ctx.sync().then(function () {
					RichApiTest.log.comment("chart.title.text='" + chart.title.text + "'");
					if (chart.title.text != null) {
						RichApiTest.log.comment("title text is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.title.overlay='" + chart.title.overlay + "'");
					if (chart.title.overlay != null) {
						RichApiTest.log.comment("title overlay state is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.legend.position='" + chart.legend.position + "'");
					if (chart.legend.position != null) {
						RichApiTest.log.comment("legend position is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.legend.overlay='" + chart.legend.overlay + "'");
					if (chart.legend.overlay != null) {
						RichApiTest.log.comment("legend overlay state is not as expected");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_AddAndCheckNullablePropertiesOfDataLabels_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add(Excel.ChartType._3DPie, sourceData, "auto");
			var dataLabels = chart.dataLabels;
			dataLabels.position = Excel.ChartDataLabelPosition.outsideEnd;
			dataLabels.separator = "|";
			dataLabels.showBubbleSize = false;
			dataLabels.showCategoryName = true;
			dataLabels.showLegendKey = true;
			dataLabels.showPercentage = true;
			dataLabels.showSeriesName = true;
			dataLabels.showValue = true;
			ctx.load(dataLabels);
			ctx.sync().then(function () {
				var success = true;
				ctx.sync().then(function () {
					RichApiTest.log.comment("chart.dataLabels.position='" + chart.dataLabels.position + "'");
					if (chart.dataLabels.position != null) {
						RichApiTest.log.comment("dataLabels position is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.dataLabels.separator='" + chart.dataLabels.separator + "'");
					if (chart.dataLabels.separator != null) {
						RichApiTest.log.comment("dataLabels seperator is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.dataLabels.showBubbleSize='" + chart.dataLabels.showBubbleSize + "'");
					if (chart.dataLabels.showBubbleSize != null) {
						RichApiTest.log.comment("dataLabels showBubbleSize flag is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.dataLabels.showCategoryName='" + chart.dataLabels.showCategoryName + "'");
					if (chart.dataLabels.showCategoryName != null) {
						RichApiTest.log.comment("dataLabels showCategoryName flag is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.dataLabels.showLegendKey='" + chart.dataLabels.showLegendKey + "'");
					if (chart.dataLabels.showLegendKey != null) {
						RichApiTest.log.comment("dataLabels showLegendKey flag is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.dataLabels.showPercentage='" + chart.dataLabels.showPercentage + "'");
					if (chart.dataLabels.showPercentage != null) {
						RichApiTest.log.comment("dataLabels showPercentage flag is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.dataLabels.showSeriesName='" + chart.dataLabels.showSeriesName + "'");
					if (chart.dataLabels.showSeriesName != null) {
						RichApiTest.log.comment("dataLabels showSeriesName flag is not as expected");
						success = false;
					}
					RichApiTest.log.comment("chart.dataLabels.showValue='" + chart.dataLabels.showValue + "'");
					if (chart.dataLabels.showValue != null) {
						RichApiTest.log.comment("dataLabels showValue flag is not as expected");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_CheckShowAllFieldButtonsAgainstNonPivotChart_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				chart.load("showAllFieldButtons");
				return ctx.sync().then(function () {
					ExcelTest.Util.assertCompareValues(null, chart.showAllFieldButtons, "Non-Pivot Chart ShowAllFieldButtons");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
?
module ExcelTest {
	export function test_Chart_AddWithFullAddressScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.title.text = "Client distribution";
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_AddWithGlobalNamedRangeObjectScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			
			var range = ctx.workbook.names.getItem("ChartsNovemberGlobalNamedRange").getRange();
			var chart = worksheet.charts.add("pie", range, "auto");
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_AddWithStringAddressInvalid_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var sourceData = sheetName + "!A1:B4";
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			try {
				var chart = worksheet.charts.add("pie", <any>sourceData, "auto");
				RichApiTest.log.fail("Should have thrown");
			} catch (e) {
				Util.ensureExpectedFailureAndPassOrFail(e, Excel.ErrorCodes.invalidArgument);
			}
		});
	}
	export function test_Chart_AddWithDataFromAnotherSheetScenario_cvt_JScript_V11() {
		
		
		var sheetNameForThisChart = "Charts";
		Util.removeAllChartsBefore(sheetNameForThisChart, () => {
			var sourceDataSheetName = "Sheet1";
			var sourceDataRangeAddress = "A1:B3";
			var sourceData = sourceDataSheetName + "!" + sourceDataRangeAddress;
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem(sourceDataSheetName).getRange(sourceDataRangeAddress);
			range.values = [
				["", "Gender"],
				["Male", 12],
				["Female", 14]
			];
			var chart = ctx.workbook.worksheets.getItem(sheetNameForThisChart).charts.add("pie", range, "auto");
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_AddChartLoadAllProperties_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			ctx.load(chart);
			ctx.sync().then(() => {
				RichApiTest.log.done(true);
			}, ExcelTest.reportError);
		});
	}
	export async function test_Chart_GetChartID_cvt_JScript_V18() {
		var sheetName = "ChartId";
		var expectedChartId = "{F070AEC3-4CDD-4418-AC54-63C0C660866F}";
		var expectedChartTitle = "Chart ID verification";
		await Excel.run(async ctx => {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var chart = worksheet.charts.getItemAt(0);
			chart.load(["id", "title/text"]);
			await ctx.sync();
			Util.assertCompareValues(expectedChartId, chart.id);
			Util.assertCompareValues(expectedChartTitle, chart.title.text);
		});
	}
	export function test_Chart_ResizeAndMove_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var TOP = 100,
				LEFT = 150,
				WIDTH = 300,
				HEIGHT = 200;
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.top = TOP;
			chart.left = LEFT;
			chart.width = WIDTH;
			chart.height = HEIGHT;
			ctx.load(chart, "top, left, width, height");
			ctx.sync().then(() => {
				var success = Util.compare(Math.round(chart.top), TOP) &&
					Util.compare(Math.round(chart.left), LEFT) &&
					Util.compare(Math.round(chart.height), HEIGHT) &&
					Util.compare(Math.round(chart.width), WIDTH);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	};
	export function test_Chart_Indexer_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart1 = worksheet.charts.add("pie", sourceData, "auto");
			var chart2 = worksheet.charts.add("pie", sourceData, "auto");
			ctx.load(chart1, "name");
			ctx.load(chart2, "name");
			ctx.sync().then(() => {
				var shouldBeChart1 = worksheet.charts.getItemAt(0);
				var shouldBeChart2 = worksheet.charts.getItemAt(1);
				ctx.load(shouldBeChart1, "name");
				ctx.load(shouldBeChart2, "name");
				ctx.sync().then(() => {
					var success = true;
					if (chart1.name != shouldBeChart1.name) {
						RichApiTest.log.fail("Chart1 has name :'" + chart1.name + "' while the first chart has name : '" + shouldBeChart1.name + "'.");
						success = false;
					}
					if (chart2.name != shouldBeChart2.name) {
						RichApiTest.log.fail("Chart2 has name :'" + chart2.name + "' while the second chart has name : '" + shouldBeChart2.name + "'.");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_IndexerNoCharts_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var chart1 = sheet.charts.getItemAt(0);
			
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
		});
	}
	export function test_Chart_GetterNoCharts_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var chart1 = sheet.charts.getItem("9001");
			
			
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
		});
	}
	export function test_Chart_Deletion_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			ctx.load(chart, "name");
			ctx.sync().then(() => {
				var name = chart.name;
				chart.delete();
				ctx.sync().then(() => {
					var shouldntExist = worksheet.charts.getItem(name);
					ctx.sync().then(() => {
						RichApiTest.log.fail("Chart with name: '" + name + "' shoudn't exist");
					}, () => {
							RichApiTest.log.done(true);
						});
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_GetChartByName_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var NAME = "Super Awesome Chart 3000 Pro";
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.name = NAME;
			ctx.sync()
				.then(() => {
					var reloadedChart = ctx.workbook.worksheets.getItem(sheetName).charts.getItem(NAME);
					ctx.load(reloadedChart, "name");
					return ctx.sync().then(() => {
						
						if (reloadedChart.name != NAME) {
							throw new Error("Chart name was set to :'" + chart.name + "'. Expected :'" + NAME + "'.");
						}
					});
				})
				.then(() => RichApiTest.log.done(true))
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_GetChartByNameFailOnNotFound_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName,() => {
			var NAME = "Super Awesome Chart 3000 Pro";
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.name = NAME;
			ctx.sync()
				.then(() => {
				var aDifferentChart = ctx.workbook.worksheets.getItem(sheetName).charts.getItem("Chart that does not exist");
				ctx.load(aDifferentChart, "name");
				return ctx.sync().catch((e) => {
					var expected = (e instanceof OfficeExtension.Error) && ((<OfficeExtension.Error>e).code == Excel.ErrorCodes.itemNotFound);
					if (!expected) {
						throw new Error("Expected to fail with itemNotFound, but did not");
					}
				})
					.then(() => RichApiTest.log.done(true))
					.catch(ExcelTest.reportError);
			});
		});
	}
	export function test_Chart_SetNameToEmptyShouldFail_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.name = "";
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart_GetChartByEmptyNameShouldFail_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName,() => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var chart = worksheet.charts.getItem("");
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart_DeleteOnAccess_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var chartTitle = chart.title;
			chart.delete();
			ctx.load(chart.title);
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
		});
	}
	export function test_Chart_FailOnInvalidSourceArgumentType_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			try {
				worksheet.charts.add("pie", <any>worksheet, "auto");
				RichApiTest.log.fail("Should not have reached this code; charts.add should have failed if the second argument is not a range");
			} catch (e) {
				Util.ensureExpectedFailureAndPassOrFail(e, Excel.ErrorCodes.invalidArgument);
			}
		});
	}
	export function test_Chart_SetPositionAddresses1_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.setPosition("C2", "G11");
			ctx.load(chart);
			ctx.sync().then(function () {
				var success = Util.compare(chart.top, 15) && Util.compare(chart.left, 2 * ChartUtil.getDefaultColumnWidth()) &&
					Util.compare(chart.width, 5 * ChartUtil.getDefaultColumnWidth()) && Util.compare(chart.height, 150);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_SetPositionAddresses2_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			
			
			chart.setPosition("C2:D3", "D3:G11");
			ctx.load(chart);
			ctx.sync().then(function () {
				var success = Util.compare(chart.top, 15) && Util.compare(chart.left, 2 * ChartUtil.getDefaultColumnWidth()) &&
					Util.compare(chart.width, 5 * ChartUtil.getDefaultColumnWidth()) && Util.compare(chart.height, 150);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_SetPositionAddresses3_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.width = 500;
			chart.height = 300;
			chart.setPosition("C2", null);
			ctx.load(chart);
			ctx.sync().then(function () {
				var success = Util.compare(chart.top, 15) && Util.compare(chart.left, 2 * ChartUtil.getDefaultColumnWidth()) &&
					Util.compare(Math.round(chart.width), 500) && Util.compare(chart.height, 300);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_SetPositionSameCell_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.setPosition("C2", "C2");
			ctx.load(chart);
			ctx.sync().then(function () {
				var success = Util.compare(chart.top, 15) && Util.compare(chart.left, 2 * ChartUtil.getDefaultColumnWidth()) &&
					Util.compare(chart.width, ChartUtil.getDefaultColumnWidth()) && Util.compare(chart.height, 15);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_SetPositionLargeChart_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.setPosition("D100000", "CU100200");
			ctx.load(chart);
			ctx.sync().then(function () {
				var success = Util.compare(chart.top, 1499985) && Util.compare(chart.left, 3 * ChartUtil.getDefaultColumnWidth()) &&
					Util.compare(chart.width, 96 * ChartUtil.getDefaultColumnWidth()) && Util.compare(chart.height, 3015);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_SetPositionAddressesInvalidBecauseOnWrongSheet_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.setPosition("Sheet1!C2");
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart_SetPositionAddressesInvalidBecauseEmpty_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.setPosition("C2", "");
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart_SetPositionRangeInvalid_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var invalidCellBecauseOnWrongSheet = ctx.workbook.worksheets.getItem("Sheet1").getRange("A9")
			chart.setPosition("C2", invalidCellBecauseOnWrongSheet);
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart_SetPositionInvalidBecauseEndIsSmallerThanStart_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.setPosition("D20", "C5");
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart_CheckDefaultSizeOnAddingChart_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			ctx.load(chart);
			ctx.sync().then(function () {
				Util.assert(Util.compare(chart.width, 360) && Util.compare(chart.height, 216), "Chart is not the expected default size");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_Image_cvt_JScript_V12() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var image = chart.getImage();
			ctx.sync().then(() => {
				RichApiTest.log.image(image.value);
				Util.assert(image.value.length > 1000, "Image is too small for it to be a valid image");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_ImageHeight_cvt_JScript_V12() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var image = chart.getImage(null, 800);
			ctx.sync().then(() => {
				Util.assert(image.value.length > 1000, "Image is too small for it to be a valid image");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_ImageWidth_cvt_JScript_V12() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var image = chart.getImage(800);
			ctx.sync().then(() => {
				Util.assert(image.value.length > 1000, "Image is too small for it to be a valid image");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_ImageBoth_cvt_JScript_V12() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var image = chart.getImage(800, 800);
			ctx.sync().then(() => {
				Util.assert(image.value.length > 1000, "Image is too small for it to be a valid image");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	
	export function test_Chart_ImageFill_cvt_JScript_V12() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var image = chart.getImage(800, 800, Excel.ImageFittingMode.fill);
			ctx.sync().then(() => {
				Util.assert(image.value.length > 1000, "Image is too small for it to be a valid image");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	
	export function test_Chart_ImageFitAndCenter_cvt_JScript_V12() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var image = chart.getImage(800, 800, Excel.ImageFittingMode.fitAndCenter);
			ctx.sync().then(() => {
				Util.assert(image.value.length > 1000, "Image is too small for it to be a valid image");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_ImageFitAndDefault_cvt_JScript_V12() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var image = chart.getImage(null, null, Excel.ImageFittingMode.fitAndCenter);
			ctx.sync().then(() => {
				RichApiTest.log.fail("Call to chart.getImage with only fitAndCenter shouldn't have passed");
				RichApiTest.log.done(false);
			}).catch((e) => {
				RichApiTest.log.pass();
				RichApiTest.log.done(true);
			});
		});
	}
	export function test_Chart_ImageNegative_cvt_JScript_V12() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var image = chart.getImage(-400);
			ctx.sync().then(() => {
				RichApiTest.log.fail("Call to chart.getImage with negative dimensions shouldn't have passed");
				RichApiTest.log.done(false);
			}).catch((e) => {
				RichApiTest.log.pass();
				RichApiTest.log.done(true);
			});
		});
	}
	export function test_Chart_SetDataLabelPropertiesNullNoOp_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.dataLabels.position = null;
			chart.dataLabels.showValue = null;
			chart.dataLabels.showSeriesName = null;
			chart.dataLabels.showCategoryName = null;
			chart.dataLabels.showLegendKey = null;
			chart.dataLabels.showPercentage = null;
			chart.dataLabels.showBubbleSize = null;
			ctx.sync()
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_Chart_SetLegendPropertiesNullNoOp_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.legend.position = null;
			chart.legend.overlay = null;
			ctx.sync()
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_Chart_SetTitlePropertiesNullNoOp_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.title.overlay = null;
			ctx.sync()
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_Chart_SetFontPropertiesNullNoOp_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.format.font.bold = null;
			chart.format.font.italic = null;
			chart.format.font.size = null;
			chart.format.font.underline = null;
			ctx.sync()
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_Chart_GetWorksheet_cvt_JScript_V12() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			ctx.load(chart.worksheet);
			ctx.sync()
				.then(function() {
					Util.assertCompareValues(sheetName, chart.worksheet.name);
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SeriesBy_cvt_JScript_V12() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			Excel.run(function (ctx) {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var datasheet = ctx.workbook.worksheets.getItem("Sheet1");
				datasheet.getRange("A:B").clear();
				var range = datasheet.getRange("A1:E3");
				range.values = [
					["A", 5, 6, 8, 8],
					["B", 7, 9, 9, 8],
					["C", 7, 3, 4, 5],
				];
				var chart = sheet.charts.add("Line", range, "rows");
				chart.series.load();
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(3, chart.series.items.length);
						chart.setData(range, "columns");
						chart.series.load();
					})
					.then(ctx.sync)
					.then(function () {
						Util.assertCompareValues(4, chart.series.items.length);
					});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
		});
	}
	export function test_Chart_GetItemOrNull_cvt_JScript_V14() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add("pie", sourceData, "auto");
				ctx.load(chart);
				var chartExist;
				var chartNotExist;
				return ctx.sync().then(() => {
					var chartExist = sheet.charts.getItemOrNullObject(chart.name);
					var chartNotExist = sheet.charts.getItemOrNullObject("99999");
					return ctx.sync()
						.then(() => {
							Util.assert(!chartExist.isNull, "Expect isNull false");
							Util.assert(chartNotExist.isNull, "Expect isNull true");
						});
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_Count_cvt_JScript_V14() {
		_injectCollectionCountTest_JS(ctx => ctx.workbook.worksheets.getItem("Charts").charts)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Chart2_AddWithNoTitle_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.title.visible = false;
			return ctx.sync().then(function () {
				var success = Util.compare(chart.title.visible, false);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_TitleRemovalFollowedBySettingTextOnIt_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.title.visible = false;
			
			chart.title.text = "Client distribution";
			ctx.load(chart.title);
			return ctx.sync().then(function () {
				var success = Util.compare(chart.title.visible, true);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_TitleRemovalFollowedBySettingOverlay_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.title.visible = false;
			
			chart.title.overlay = true;
			ctx.load(chart.title);
			return ctx.sync().then(function () {
				var success = Util.compare(chart.title.visible, true);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetTitleTextNull_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName,() => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.title.text = null;
			return Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart2_LegendOnAndOffAndOverlay_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.legend.position = "left";
			chart.legend.position = "top";
			chart.legend.position = "bottom";
			chart.legend.position = "right";
			chart.legend.overlay = false;
			chart.legend.visible = false;
			
			chart.legend.overlay = true;
			ctx.load(chart.legend);
			return ctx.sync().then(function () {
				var success = Util.compare(chart.legend.visible, true);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_LegendProperties_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				var legend = chart.legend;
				var data = [10.0010236220472, 20.0010236220472, 30.0010236220472, 40.0010236220472];
				
				legend.visible = true;
				legend.left = data[0];
				legend.top = data[1];
				legend.width = data[2];
				legend.height = data[3];
				legend.showShadow = true;
				ctx.load(legend);
				return ctx.sync().then(function () {
					ExcelTest.Util.assertCompareValues(data[0], legend.left, "legend.left");
					ExcelTest.Util.assertCompareValues(data[1], legend.top, "legend.top");
					ExcelTest.Util.assertCompareValues(data[2], legend.width, "legend.width");
					ExcelTest.Util.assertCompareValues(data[3], legend.height, "legend.height");
					ExcelTest.Util.assertCompareValues(true, legend.showShadow, "legend.hasShadow");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_LegendPropertiesWithInvalidArg_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				var legend = chart.legend;
				ctx.load(legend);
				return ctx.sync().then(function () {
					legend.visible = true;
					legend.left = -10;
					return Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_LegendNullableProperties_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				var legend = chart.legend;
				legend.visible = false;
				ctx.load(legend);
				return ctx.sync().then(function () {
					ExcelTest.Util.assertCompareValues(null, legend.left, "legend.left");
					ExcelTest.Util.assertCompareValues(null, legend.top, "legend.top");
					ExcelTest.Util.assertCompareValues(null, legend.width, "legend.width");
					ExcelTest.Util.assertCompareValues(null, legend.height, "legend.height");
					ExcelTest.Util.assertCompareValues(null, legend.showShadow, "legend.hasShadow");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_LegendEntriesGetCount_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			_injectCollectionCountTest_JS((ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				chart.legend.visible = true;
				var legendEntries = chart.legend.legendEntries;
				return legendEntries;
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_LegendEntriesOnInvisibleLegend_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var legend = chart.legend;
				legend.visible = false;
				return ctx.sync().then(function () {
					var legendEntry = legend.legendEntries.getItemAt(0);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_LegendEntryProperty_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var legend = chart.legend;
				legend.visible = true;
				var legendEntries = legend.legendEntries;
				ctx.load(legendEntries);
				return ctx.sync().then(function () {
					var legendEntry = legendEntries.items[0];
					Util.assertCompareValues(true, legendEntry.visible);
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_DataLabelsShowValuesAndLegendKeysScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			chart.dataLabels.showValue = true;
			chart.dataLabels.showLegendKey = true;
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DataLabelsShowPercentagesAndCategoryNamesWithCustomSeparatorScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var namedRange = "ChartsNovemberGlobalNamedRange";
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = ctx.workbook.names.getItem(namedRange).getRange();
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.dataLabels.showCategoryName = true;
			chart.dataLabels.showPercentage = true;
			chart.dataLabels.separator = " - ";
			chart.legend.visible = false;
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DataLabelsBubbleSizeAndSettingSeparatorFirstScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "E8:G11");
			var chart = worksheet.charts.add("bubble", sourceData, "columns");
			chart.dataLabels.separator = "\n";
			chart.dataLabels.showValue = true;
			chart.dataLabels.showBubbleSize = true;
			chart.dataLabels.position = "center";
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DataLabelsEnsureSettingSeparatorButNothingElseDoesntAddAnyTextsScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "E8:G11");
			var chart = worksheet.charts.add("bubble", sourceData, "columns");
			chart.dataLabels.separator = "\n";
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DataLabelsCallouts_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("3dpie", sourceData, "columns");
			chart.dataLabels.position = "callout";
			chart.dataLabels.showValue = false;
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DataLabelsSettingPropertyToFalseWhenNoDataLabelsExist_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("3dpie", sourceData, "columns");
			chart.dataLabels.showValue = false;
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DataLabelsSettingInvalidPositionForChartType_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var chart = worksheet.charts.add("3dpie", sourceData, "columns");
			chart.dataLabels.position = "bottom";
			var expectedError = Excel.ErrorCodes.invalidOperation;
			Util.ensureSyncFailed(ctx, expectedError);
		});
	}
	export function test_Chart2_DataLabelsSettingInvalidElementType1_cvt_JScript_V11() {
		
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			
			chart.dataLabels.showValue = true;
			ctx.trace("First one succeeded");
			
			chart.dataLabels.showPercentage = true;
			var expectedError = Excel.ErrorCodes.invalidOperation;
			Util.ensureSyncFailed(ctx, expectedError, (errorInfo) => (errorInfo.traceMessages.length == 1));
		});
	}
	export function test_Chart2_DataLabelsSettingInvalidElementType2_cvt_JScript_V11() {
		
		
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			
			
			
			
			chart.dataLabels.showPercentage = true;
			var expectedError = Excel.ErrorCodes.invalidOperation;
			Util.ensureSyncFailed(ctx, expectedError);
		});
	}
	export function test_Chart2_DataLabelsSettingInvalidElementType3_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			
			
			
			chart.dataLabels.showPercentage = false;
			
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_NotShownPointDataLabelPositionIsNull_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var ctx = new Excel.RequestContext();
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange(sheetName + "!" + "E1:H5");
				var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
				var pointsCollection = chart.series.getItemAt(0).points;
				var point = pointsCollection.getItemAt(0);
				return ctx.sync().then(function () {
					var dataLabel = point.dataLabel;
					dataLabel.load("position");
					return ctx.sync().then(function () {
						Util.assertCompareValues(null, dataLabel.position, "Chart Point Data Label Position");
					})
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetAndGetDataLabelPosition_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var ctx = new Excel.RequestContext();
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange(sheetName + "!" + "E1:H5");
				var chart = worksheet.charts.add("Pie", sourceData, "auto");
				var pointsCollection = chart.series.getItemAt(0).points;
				var point = pointsCollection.getItemAt(0);
				var dataLabel = point.dataLabel;
				dataLabel.position = "BestFit";
				dataLabel.load("position");
				return ctx.sync().then(function () {
					Util.assertCompareValues(Excel.ChartDataLabelPosition.bestFit, dataLabel.position, "Chart Point Data Label Position");
					dataLabel.showValue = true;
					dataLabel.position = "OutsideEnd";
					dataLabel.load("position");
					return ctx.sync().then(function () {
						Util.assertCompareValues(Excel.ChartDataLabelPosition.outsideEnd, dataLabel.position, "Chart Point Data Label Position");
					});
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export async function test_Chart2_SetAndGetDataLabelShowContent$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "E1:H5");
			var chart = worksheet.charts.add("Pie", sourceData, "auto");
			var pointsCollection = chart.series.getItemAt(0).points;
			var point = pointsCollection.getItemAt(0);
			point.load("dataLabel");
			await ctx.sync();
			var dataLabel = point.dataLabel;
			Util.assertCompareValues(false, dataLabel.showValue, "Chart Point Data Label ShowValue");
			Util.assertCompareValues(false, dataLabel.showSeriesName, "Chart Point Data Label showSeriesName");
			Util.assertCompareValues(false, dataLabel.showLegendKey, "Chart Point Data Label showLegendKey");
			Util.assertCompareValues(false, dataLabel.showCategoryName, "Chart Point Data Label showCategoryName");
			Util.assertCompareValues(false, dataLabel.showPercentage, "Chart Point Data Label showPercentage");
			dataLabel.showValue = true;
			dataLabel.showSeriesName = true;
			dataLabel.showLegendKey = true;
			dataLabel.showCategoryName = true;
			dataLabel.showPercentage = true;
			dataLabel.load("showValue,showSeriesName,showLegendKey,showCategoryName,showPercentage");
			await ctx.sync();
			Util.assertCompareValues(true, dataLabel.showValue, "Chart Point Data Label ShowValue");
			Util.assertCompareValues(true, dataLabel.showSeriesName, "Chart Point Data Label showSeriesName");
			Util.assertCompareValues(true, dataLabel.showLegendKey, "Chart Point Data Label showLegendKey");
			Util.assertCompareValues(true, dataLabel.showCategoryName, "Chart Point Data Label showCategoryName");
			Util.assertCompareValues(true, dataLabel.showPercentage, "Chart Point Data Label showPercentage");
		});
	}
	export async function test_Chart2_SetAndGetDataLabelShowBubbleSize$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "E8:G11");
			var chart = worksheet.charts.add("Bubble", sourceData, "columns");
			var pointsCollection = chart.series.getItemAt(0).points;
			var point = pointsCollection.getItemAt(0);
			point.load("dataLabel");
			await ctx.sync();
			var dataLabel = point.dataLabel;
			Util.assertCompareValues(false, dataLabel.showBubbleSize, "Chart Point Data Label showBubbleSize");
			dataLabel.showBubbleSize = true;
			dataLabel.load("showBubbleSize");
			await ctx.sync();
			Util.assertCompareValues(true, dataLabel.showBubbleSize, "Chart Point Data Label showBubbleSize");
		});
	}
	export async function test_Chart2_SetAndGetDataLabelSeparator$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "E1:H5");
			var chart = worksheet.charts.add("Pie", sourceData, "auto");
			var pointsCollection = chart.series.getItemAt(0).points;
			var point = pointsCollection.getItemAt(0);
			point.load("dataLabel");
			await ctx.sync();
			var dataLabel = point.dataLabel;
			Util.assertCompareValues(null, dataLabel.separator, "Chart Point Data Label separator");
			
			dataLabel.separator = ",";
			await ctx.sync();
			Util.assertCompareValues(",", dataLabel.separator, "Chart Point Data Label separator");
			
			dataLabel.showValue = true;
			dataLabel.showSeriesName = true;
			dataLabel.separator = "-";
			dataLabel.load("separator");
			await ctx.sync();
			Util.assertCompareValues("-", dataLabel.separator, "Chart Point Data Label separator");
		});
	}
	export async function test_Chart2_SetAndGetChartType$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "E1:H5");
			var chart = worksheet.charts.add("Pie", sourceData, "auto");
			chart.load("chartType");
			await ctx.sync();
			Util.assertCompareValues("Pie", chart.chartType, "Chart.ChartType");
			var titleText = "Specified Chart Title";
			chart.title.text = titleText;
			chart.legend.position = "Right";
			chart.chartType = Excel.ChartType.columnStacked;
			chart.load("chartType");
			await ctx.sync();
			Util.assertCompareValues(Excel.ChartType.columnStacked, chart.chartType, "Chart.ChartType");
			Util.assertCompareValues(titleText, chart.title.text, "Chart Title Text");
			Util.assertCompareValues("Right", chart.legend.position, "Chart Legend ShowShadow");
		});
	}
	export function test_Chart2_AxisMinMaxUnitPropertiesScenario_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E2:H5");
			var chart = worksheet.charts.add("barclustered", sourceData, "columns");
			
			
			chart.axes.valueAxis.majorUnit = 20;
			chart.axes.valueAxis.minorUnit = 2;
			chart.axes.valueAxis.maximum = 50;
			
			chart.axes.valueAxis.minimum = 0;
			
			chart.axes.categoryAxis.maximum = 5;
			ctx.load(chart.axes.valueAxis);
			ctx.load(chart.axes.categoryAxis);
			return ctx.sync().then(function () {
				var success = Util.compare(chart.axes.valueAxis.majorUnit, 20) &&
					Util.compare(chart.axes.valueAxis.minorUnit, 2) &&
					Util.compare(chart.axes.valueAxis.maximum, 50) &&
					Util.compare(chart.axes.valueAxis.minimum, 0) &&
					Util.compare(chart.axes.categoryAxis.maximum, 5);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetAndGetAxisDisplayUnitScenario_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add("Line", sourceData, "auto");
				
				chart.axes.valueAxis.displayUnit = "Hundreds";
				ctx.load(chart.axes.valueAxis);
				ctx.load(chart.axes.categoryAxis);
				return ctx.sync().then(function () {
					Util.assertCompareValues(chart.axes.valueAxis.displayUnit, "Hundreds");
					Util.assertCompareValues(chart.axes.valueAxis.showDisplayUnitLabel, true);
					Util.assertCompareValues(chart.axes.valueAxis.customDisplayUnit, null);
					
					chart.axes.valueAxis.setCustomDisplayUnit(50);
					
					chart.axes.valueAxis.showDisplayUnitLabel = false;
					ctx.load(chart.axes.valueAxis);
					ctx.load(chart.axes.categoryAxis);
					return ctx.sync().then(function () {
						Util.assertCompareValues(chart.axes.valueAxis.displayUnit, "Custom");
						Util.assertCompareValues(chart.axes.valueAxis.showDisplayUnitLabel, false);
						Util.assertCompareValues(chart.axes.valueAxis.customDisplayUnit, 50);
					});
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SetAndGetAxisPropertyScenario_cvt_JScript_V18() {
		var sheetName = "ChartsAxis";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add("Line", sourceData, "auto");
				var categoryaxis = chart.axes.categoryAxis;
				var valueaxis = chart.axes.getItem("Value", "Primary");
				valueaxis.logBase = 5;
				categoryaxis.axisBetweenCategories = false;
				ctx.load(categoryaxis);
				ctx.load(valueaxis);
				return ctx.sync().then(function () {
					Util.assertCompareValues("Primary", categoryaxis.axisGroup);
					Util.assertCompareValues("Linear", categoryaxis.scaleType);
					Util.assertCompareValues(null, categoryaxis.logBase);
					Util.assertCompareValues(false, categoryaxis.axisBetweenCategories);
					Util.assertCompareValues("Primary", valueaxis.axisGroup);
					Util.assertCompareValues("Logarithmic", valueaxis.scaleType);
					Util.assertCompareValues(5, valueaxis.logBase);
					Util.assertCompareValues(null, valueaxis.axisBetweenCategories);
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_AxisSetMinToDataTrimmingValuesScenario_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E2:H5");
			var chart = worksheet.charts.add("barclustered", sourceData, "columns");
			
			chart.axes.categoryAxis.minimum = 2;
			
			chart.axes.valueAxis.minimum = 8;
			ctx.load(chart.axes.valueAxis);
			ctx.load(chart.axes.categoryAxis);
			return ctx.sync().then(function () {
				var success = Util.compare(chart.axes.categoryAxis.minimum, 2) &&
					Util.compare(chart.axes.valueAxis.minimum, 8);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_AxisMinMaxUnitPropertyReset_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E2:H5");
			var chart = worksheet.charts.add("barclustered", sourceData, "columns");
			
			chart.axes.valueAxis.majorUnit = 20;
			chart.axes.valueAxis.minorUnit = 2;
			chart.axes.valueAxis.maximum = 50;
			chart.axes.valueAxis.minimum = 0;
			chart.axes.categoryAxis.maximum = 5;
			ctx.load(chart.axes.valueAxis);
			ctx.load(chart.axes.categoryAxis);
			return ctx.sync().then(function () {
				var firstSetSucceeded = Util.compare(chart.axes.valueAxis.majorUnit, 20) &&
					Util.compare(chart.axes.valueAxis.minorUnit, 2) &&
					Util.compare(chart.axes.valueAxis.maximum, 50) &&
					Util.compare(chart.axes.valueAxis.minimum, 0) &&
					Util.compare(chart.axes.categoryAxis.maximum, 5);
				if (!firstSetSucceeded) {
					RichApiTest.log.fail("Did not succeed in setting the original values");
					return;
				}
				
				chart.axes.valueAxis.majorUnit = "";
				chart.axes.valueAxis.minorUnit = "";
				chart.axes.valueAxis.maximum = "";
				chart.axes.valueAxis.minimum = "";
				chart.axes.categoryAxis.maximum = "";
				ctx.load(chart.axes.valueAxis);
				ctx.load(chart.axes.categoryAxis);
				return ctx.sync().then(function () {
					var restoredBackToDefaultValues = Util.compare(chart.axes.valueAxis.majorUnit, 5) &&
						Util.compare(chart.axes.valueAxis.minorUnit, 1) &&
						Util.compare(chart.axes.valueAxis.maximum, 25) &&
						Util.compare(chart.axes.valueAxis.minimum, 0) &&
						Util.compare(chart.axes.categoryAxis.maximum, 3);
					RichApiTest.log.done(restoredBackToDefaultValues);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_AxisValueAdjustment_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E2:H5");
			var chart = worksheet.charts.add("barclustered", sourceData, "columns");
			ctx.load(chart.axes.valueAxis);
			ctx.load(chart.axes.categoryAxis);
			return ctx.sync().then(function () {
				printLoadedValues("Initial values");
				
				
				var defaultValuesAreExpected =
					(chart.axes.valueAxis.maximum === 25) &&
					(chart.axes.valueAxis.minimum === 0) &&
					(chart.axes.valueAxis.majorUnit === 5) &&
					(chart.axes.valueAxis.minorUnit === 1) &&
					(chart.axes.categoryAxis.minimum === 1) &&
					(chart.axes.categoryAxis.maximum === 3);
				if (!defaultValuesAreExpected) {
					printLoadedValues("Default values not expected");
					RichApiTest.log.done(false );
					return;
				}
				
				chart.axes.valueAxis.maximum = 50;
				ctx.load(chart.axes.valueAxis);
				return ctx.sync().then(function () {
					printLoadedValues("After setting max and re-loading");
					var valuesAfterSettingMaximumAreExpected =
						(chart.axes.valueAxis.maximum === 50) &&
						(chart.axes.valueAxis.majorUnit === 10) &&
						(chart.axes.valueAxis.minorUnit === 2);
					if (!valuesAfterSettingMaximumAreExpected) {
						printLoadedValues("Adjusted values not expected");
						RichApiTest.log.done(false );
						return
					}
					RichApiTest.log.done(true);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
			function printLoadedValues(message) {
				RichApiTest.log.comment(message + ":");
				RichApiTest.log.comment("	Actual value axis max: " + chart.axes.valueAxis.maximum);
				RichApiTest.log.comment("	Actual value axis min: " + chart.axes.valueAxis.minimum);
				RichApiTest.log.comment("	Actual value axis major unit: " + chart.axes.valueAxis.majorUnit);
				RichApiTest.log.comment("	Actual value axis minor unit: " + chart.axes.valueAxis.minorUnit);
				RichApiTest.log.comment("	Actual category axis min: " + chart.axes.categoryAxis.maximum);
				RichApiTest.log.comment("	Actual category axis max: " + chart.axes.categoryAxis.minimum);
				RichApiTest.log.comment("	=================================");
			}
		});
	}
	export function test_Chart2_AxisGridlinesAndTitlesScenario_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E8:F11");
			var addedChart = worksheet.charts.add("xyscatter", sourceData, "columns");
			addedChart.axes.valueAxis.majorGridlines.visible = true;
			addedChart.axes.valueAxis.minorGridlines.visible = true;
			addedChart.axes.valueAxis.title.text = "number of crickets";
			addedChart.axes.categoryAxis.majorGridlines.visible = true;
			addedChart.axes.categoryAxis.minorGridlines.visible = true;
			addedChart.axes.categoryAxis.majorUnit = .5;
			addedChart.axes.categoryAxis.minorUnit = .2;
			addedChart.axes.categoryAxis.title.text = "temperature";
			ctx.load(addedChart, "name");
			ctx.sync().then(function () {
				var reloadedChart = worksheet.charts.getItem(addedChart.name);
				ctx.load(reloadedChart.axes.valueAxis.majorGridlines);
				ctx.load(reloadedChart.axes.valueAxis.minorGridlines);
				ctx.load(reloadedChart.axes.valueAxis.title);
				ctx.load(reloadedChart.axes.categoryAxis.majorGridlines);
				ctx.load(reloadedChart.axes.categoryAxis.minorGridlines);
				ctx.load(reloadedChart.axes.categoryAxis);
				ctx.load(reloadedChart.axes.categoryAxis.title);
				
				return ctx.sync().then(function () {
					printLoadedValues("After setting", reloadedChart);
					var success =
						(reloadedChart.axes.valueAxis.majorGridlines.visible === true) &&
						(reloadedChart.axes.valueAxis.minorGridlines.visible === true) &&
						(reloadedChart.axes.valueAxis.title.text === "number of crickets") &&
						(reloadedChart.axes.categoryAxis.majorGridlines.visible === true) &&
						(reloadedChart.axes.categoryAxis.minorGridlines.visible === true) &&
						(reloadedChart.axes.categoryAxis.majorUnit === .5) &&
						(reloadedChart.axes.categoryAxis.minorUnit === .2) &&
						(reloadedChart.axes.categoryAxis.title.text === "temperature");
					if (!success) {
						printLoadedValues("Retrieved values did not match with what had been set", reloadedChart);
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
			function printLoadedValues(message, chart: Excel.Chart) {
				RichApiTest.log.comment(message + ":");
				RichApiTest.log.comment("	Actual value axis major gridlines visibility: " + chart.axes.valueAxis.majorGridlines.visible);
				RichApiTest.log.comment("	Actual value axis minor gridlines visibility: " + chart.axes.valueAxis.minorGridlines.visible);
				RichApiTest.log.comment("	Actual category axis major gridlines visibility: " + chart.axes.categoryAxis.majorGridlines.visible);
				RichApiTest.log.comment("	Actual category axis minor gridlines visibility: " + chart.axes.categoryAxis.minorGridlines.visible);
				RichApiTest.log.comment("	Actual category axis major unit: " + chart.axes.categoryAxis.majorUnit);
				RichApiTest.log.comment("	Actual category axis minor unit: " + chart.axes.categoryAxis.minorUnit);
				RichApiTest.log.comment("	Actual category axis title visibility: " + chart.axes.categoryAxis.title.visible);
				RichApiTest.log.comment("	Actual category axis title text: " + chart.axes.categoryAxis.title.text);
				RichApiTest.log.comment("	=================================");
			}
		});
	}
	export function test_Chart2_AxisTitleRetrievalWhenNoAxisTitleExists1_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			
			ctx.load(chart.axes.valueAxis.title);
			ctx.sync().then(function () {
				var success = (chart.axes.valueAxis.title.visible === false) &&
					(chart.axes.valueAxis.title.text === null);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_AxisTitleRetrievalWhenNoAxisTitleExists2_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			chart.axes.valueAxis.title.text = "Something that will turn the axis title on";
			
			chart.axes.valueAxis.title.visible = false;
			ctx.load(chart.axes.valueAxis.title);
			ctx.sync().then(function () {
				var success = (chart.axes.valueAxis.title.visible === false) &&
					(chart.axes.valueAxis.title.text === null);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_AxisValueSettingThrowsOnNull_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E8:F11");
			var chart = worksheet.charts.add("xyscatter", sourceData, "columns");
			chart.axes.valueAxis.maximum = null;
			return Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart2_InvalidAxisSet1_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E8:F11");
			var chart = worksheet.charts.add("xyscatter", sourceData, "columns");
			
			chart.axes.seriesAxis.format.font.bold = true;
			
			
			return Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart2_InvalidAxisSet2_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E8:F11");
			var chart = worksheet.charts.add("xyscatter", sourceData, "columns");
			
			chart.axes.seriesAxis.majorGridlines.visible = true;
			
			
			return Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart2_InvalidAxisSet3_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName,() => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("3dpie", sourceData, "columns");
			
			chart.axes.valueAxis.maximum = "";
			var expectedError = Excel.ErrorCodes.invalidArgument;
			
			return Util.ensureSyncFailed(ctx, expectedError);
		});
	}
	export function test_Chart2_InvalidAxisGet1_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E8:F11");
			var chart = worksheet.charts.add("xyscatter", sourceData, "columns");
			
			ctx.load(chart.axes.seriesAxis)
			
			
			return Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart2_InvalidAxisGet2_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E8:F11");
			var chart = worksheet.charts.add("xyscatter", sourceData, "columns");
			
			ctx.load(chart.axes.seriesAxis.majorGridlines)
			
			return Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
    }
	export function test_Chart2_ObjectPeristenceSeries_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E1:H5");
			
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			ctx.load(chart, "id");
			var secondSeries = chart.series.getItemAt(1);
			secondSeries.format.fill.setSolidColor("FF0000");
			
			chart.setData(worksheet.getRange("A1:B4"), "auto");
			ctx.trace("Setting data succeeded");
			
			secondSeries.format.fill.setSolidColor("FF0000");
			
			return Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound, (errorInfo) => (errorInfo.traceMessages.length == 1));
		});
	}
	export function test_Chart2_ObjectPeristencePointsSet_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName,() => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			
			var thirdPoint = chart.series.getItemAt(0).points.getItemAt(2);
			thirdPoint.format.fill.setSolidColor("FF0000");
			
			chart.setData(worksheet.getRange("A1:B3"), "auto");
			ctx.trace("Setting data succeeded");
			
			thirdPoint.format.fill.setSolidColor("0000FF");
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound, (errorInfo) => (errorInfo.traceMessages.length == 1));
		});
	}
	export function test_Chart2_ObjectPeristencePointsLoad_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName,() => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			var thirdPoint = chart.series.getItemAt(0).points.getItemAt(2);
			thirdPoint.format.fill.setSolidColor("FF0000");
			
			chart.setData(worksheet.getRange("A1:B3"), "auto");
			ctx.trace("Setting data succeeded");
			
			ctx.load(thirdPoint);
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound,(errorInfo) => (errorInfo.traceMessages.length == 1));
		});
	}
	export function test_Chart2_DataPointValues1_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName,() => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var firstSeries = chart.series.getItemAt(0);
			ctx.load(firstSeries.points);
			
			ctx.sync().then(function () {
				var expectedValues = [132, 323, 50];
				if (!Util.compare(firstSeries.points.count, expectedValues.length)) {
					RichApiTest.log.fail("Number of points doesn't match expected!");
					return;
				} else {
					for (var i = 0; i < expectedValues.length; i++) {
						if (!Util.compare(firstSeries.points.items[i].value, expectedValues[i])) {
							RichApiTest.log.fail("Values aren't matching up!");
							return;
						}
					}
					RichApiTest.log.pass("All data values matched, success!");
				}
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_GetOutOfBoundsSeries1_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			var series = chart.series.getItemAt(-5);
			series.format.fill.setSolidColor("FF0000");
			RichApiTest.log.comment("Negative index is invalid");
			var expectedError = Excel.ErrorCodes.invalidArgument;
			return Util.ensureSyncFailed(ctx, expectedError);
		});
	}
	export function test_Chart2_GetOutOfBoundsSeries2_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			var series = chart.series.getItemAt(5);
			series.format.fill.setSolidColor("FF0000");
			RichApiTest.log.comment("Data has only 3 series, so requesting a series with index 5 should fail with invalid argument (bad index)");
			var expectedError = Excel.ErrorCodes.invalidArgument;
			return Util.ensureSyncFailed(ctx, expectedError);
		});
	}
	export function test_Chart2_GetOutOfBoundsPoints1_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			var point = chart.series.getItemAt(0).points.getItemAt(-1);
			point.format.fill.setSolidColor("FF0000");
			RichApiTest.log.comment("Should fail with invalid arg, since the index must be positive");
			var expectedError = Excel.ErrorCodes.invalidArgument;
			return Util.ensureSyncFailed(ctx, expectedError);
		});
	}
	export function test_Chart2_GetOutOfBoundsPoints2_cvt_JScript_V11() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			var point = chart.series.getItemAt(0).points.getItemAt(100);
			point.format.fill.setSolidColor("FF0000");
			RichApiTest.log.comment("Should fail, since there is no 101st point in the series (invalid argument / bad index)");
			var expectedError = Excel.ErrorCodes.invalidArgument;
			return Util.ensureSyncFailed(ctx, expectedError)
		});
	}
	export function test_Chart2_SeriesCount_cvt_JScript_V14() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			_injectCollectionCountTest_JS((ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("E1:H5");
				var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
				return chart.series;
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_PointsCount_cvt_JScript_V14() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			_injectCollectionCountTest_JS((ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				return chart.series.getItemAt(0).points;
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_PointGetAndSetHasDataLabels_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.lineMarkers, sourceData, "auto");
				var point = chart.series.getItemAt(0).points.getItemAt(0);
				point.hasDataLabel = true;
				point.load("hasDataLabels");
				return ctx.sync().then(() => {
					Util.assert(point.hasDataLabel, "Series.hasDataLabels");
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_PointGetAndSetMarkerSize_cvt_JScript_V18() {
		var sheetName = "Charts";
		var markerSize = 10;
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var point = chart.series.getItemAt(0).points.getItemAt(0);
				point.markerSize = markerSize;
				point.load("markerSize");
				return ctx.sync().then(() => {
					Util.assertCompareNumeric(markerSize, point.markerSize, 0, "Series.markerSize");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_PointGetAndSetMarkerStyle_cvt_JScript_V18() {
		var sheetName = "Charts";
		var markerStyle = "Square";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var point = chart.series.getItemAt(0).points.getItemAt(0);
				point.markerStyle = markerStyle;
				point.load("markerStyle");
				return ctx.sync().then(() => {
					Util.assertCompareValues(markerStyle, point.markerStyle, "Series.markerStyle");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_PointGetAndSetMarkerBackgroundColor_cvt_JScript_V18() {
		var sheetName = "Charts";
		var markerColor = "#555555";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var point = chart.series.getItemAt(0).points.getItemAt(0);
				point.markerBackgroundColor = markerColor;
				ctx.load(point);
				return ctx.sync().then(() => {
					Util.assertCompareValues(markerColor, point.markerBackgroundColor, "Series.markerBackgroundColor");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_PointGetAndSetMarkerForegroundColor_cvt_JScript_V18() {
		var sheetName = "Charts";
		var markerColor = "#555555";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var point = chart.series.getItemAt(0).points.getItemAt(0);
				point.markerForegroundColor = markerColor;
				ctx.load(point);
				return ctx.sync().then(() => {
					Util.assertCompareValues(markerColor, point.markerForegroundColor, "Series.markerForegroundColor");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_HoldOnToChartElementAcrossAsyncRequest1_cvt_JScript_V11() {
		
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			var pt = chart.series.getItemAt(0).points.getItemAt(0);
			ctx.sync().then(function () {
				pt.format.fill.setSolidColor("red")
				ctx.sync().then(function () {
					var success = true;
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_HoldOnToChartElementAcrossAsyncRequest2_cvt_JScript_V11() {
		
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E1:H5");
			var chart = worksheet.charts.add(Excel.ChartType.columnClustered, sourceData, "auto");
			var pt = chart.series.getItemAt(2).points.getItemAt(0);
			
			chart.setData(worksheet.getRange("E1:F5"), "auto");
			ctx.sync().then(function () {
				
				pt.format.fill.setSolidColor("red");
				Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_TitleEmpty_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var chartName = "TestChart";
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var createdChart = worksheet.charts.add("pie", sourceData, "auto");
			createdChart.title.text = "";
			createdChart.name = chartName;
			ctx.load(createdChart, "name");
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(createdChart.name);
				ctx.load(loadedChart.title);
				ctx.sync().then(function () {
					var success = Util.compare(loadedChart.title.visible, false);
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_TitleLocale_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var chartName = "TestChart";
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var createdChart = worksheet.charts.add("pie", sourceData, "auto");
			var chienseTitle = "????";
			createdChart.title.text = chienseTitle;
			createdChart.name = chartName;
			ctx.load(createdChart, "name");
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(createdChart.name);
				ctx.load(loadedChart.title);
				return ctx.sync().then(function () {
					var success = Util.compare(loadedChart.title.text, chienseTitle);
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_TitleLocaleRightToLeft_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var chartName = "TestChart";
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var createdChart = worksheet.charts.add("pie", sourceData, "auto");
			var arabicTitle = "????? ??????";
			createdChart.title.text = arabicTitle;
			createdChart.name = chartName;
			ctx.load(createdChart, "name");
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(createdChart.name);
				ctx.load(loadedChart.title);
				ctx.sync().then(function () {
					var success = Util.compare(loadedChart.title.text, arabicTitle);
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_TitleHiddenFont_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var chartName = "TestChart";
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var createdChart = worksheet.charts.add("pie", sourceData, "auto");
			var chartTitle = "Rich API Chart Title";
			createdChart.title.text = chartTitle;
			createdChart.title.format.font.bold = false;
			createdChart.title.format.font.color = "FFFFFE";
			createdChart.title.format.font.size = 12;
			createdChart.title.visible = false;
			createdChart.name = chartName;
			ctx.load(createdChart, "name");
			ctx.sync().then(function () {
				var success = true;
				if (!Util.compare(createdChart.title.visible, false)) {
					RichApiTest.log.fail("Title should not be visible");
					success = false;
				}
				
				
				createdChart.title.text = chartTitle;
				createdChart.title.format.font.bold = true;
				createdChart.title.format.font.color = "AAAAAB";
				createdChart.title.format.font.size = 16;
				createdChart.title.format.font.name = "Algerian";
				var loadedChart = worksheet.charts.getItem(createdChart.name);
				ctx.load(loadedChart.title);
				ctx.load(loadedChart.title.format.font);
				ctx.sync().then(function () {
					if (!Util.compare(loadedChart.title.text, chartTitle)) {
						RichApiTest.log.fail("Title does not match");
						success = false;
					}
					if (!Util.compare(loadedChart.title.visible, true)) {
						RichApiTest.log.fail("Title is not visible");
						success = false;
					}
					if (!Util.compare(loadedChart.title.format.font.bold, true)) {
						RichApiTest.log.fail("Chart title font should be bold");
						success = false;
					}
					if (!Util.compare(loadedChart.title.format.font.size, 16)) {
						RichApiTest.log.fail("Chart title font size should be 16");
						success = false;
					}
					if (!Util.compare(loadedChart.title.format.font.color, '#AAAAAB')) {
						RichApiTest.log.comment(loadedChart.title.format.font.color.toString());
						RichApiTest.log.fail("Chart title font color should be '#AAAAAB'");
						success = false;
					}
					if (!Util.compare(loadedChart.title.format.font.name, 'Algerian')) {
						RichApiTest.log.fail("Chart title font name should be 'Algerian'");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	
	export function test_Chart2_NameGetterDup_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData1 = worksheet.getRange("A1:B4");
			var sourceData2 = worksheet.getRange("E1:H5");
			var sourceData3 = worksheet.getRange("E8:G11");
			var chartTitles = ["Chart1", "Chart2", "Chart3"];
			var chartName = "ChartName";
			var createdChart1 = worksheet.charts.add("pie", sourceData1, "auto");
			createdChart1.title.text = chartTitles[0];
			createdChart1.name = chartName;
			createdChart1.left = 10;
			createdChart1.top = 50;
			var createdChart2 = worksheet.charts.add("ColumnClustered", sourceData2, "auto");
			createdChart2.title.text = chartTitles[1];
			createdChart2.name = chartName;
			createdChart2.left = 300;
			createdChart2.top = 30;
			var createdChart3 = worksheet.charts.add("bubble", sourceData3, "columns");
			createdChart3.title.text = chartTitles[2];
			createdChart3.name = chartName;
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(chartName);
				ctx.load(loadedChart.title);
				ctx.sync().then(function () {
					var success = Util.compare(loadedChart.title.text, chartTitles[0]);
					if (!success) {
						RichApiTest.log.fail("Correct chart is not loaded");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_NameGetterNoChart_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chartName = "ChartName";
			var chartDoesNotExistName = "NotFound";
			var createdChart = worksheet.charts.add("pie", sourceData, "auto");
			createdChart.title.text = chartName;
			createdChart.name = chartName;
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(chartDoesNotExistName);
				Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DeleteDupName_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData1 = worksheet.getRange("A1:B4");
			var sourceData2 = worksheet.getRange("E1:H5");
			var chartTitles = ["Chart1", "Chart2"];
			var chartName = "ChartName";
			var createdChart1 = worksheet.charts.add("pie", sourceData1, "auto");
			createdChart1.title.text = chartTitles[0];
			createdChart1.name = chartName;
			createdChart1.left = 10;
			createdChart1.top = 50;
			var createdChart2 = worksheet.charts.add("bubble", sourceData2, "columns");
			createdChart2.title.text = chartTitles[1];
			createdChart2.name = chartName;
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(chartName);
				loadedChart.delete();
				loadedChart = worksheet.charts.getItem(chartName);
				ctx.load(loadedChart.title);
				ctx.sync().then(function () {
					var success = Util.compare(loadedChart.title.text, createdChart2.title.text);
					if (!success) {
						RichApiTest.log.fail("Wrong chart was deleted");
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_List_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData1 = worksheet.getRange("A1:B4");
			var sourceData2 = worksheet.getRange("E1:H5");
			var sourceData3 = worksheet.getRange("E8:G11");
			var createdChart1 = worksheet.charts.add("pie", sourceData1, "auto");
			createdChart1.left = 10;
			createdChart1.top = 50;
			var createdChart2 = worksheet.charts.add("ColumnClustered", sourceData2, "auto");
			createdChart2.left = 300;
			createdChart2.top = 30;
			var createdChart3 = worksheet.charts.add("bubble", sourceData3, "columns");
			ctx.sync().then(function () {
				ctx.load(worksheet.charts);
				ctx.sync().then(function () {
					var success = Util.compare(worksheet.charts.count, 3);
					if (!success) {
						RichApiTest.log.fail("Charts count do not match");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_SeriesUpdate_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceDataRange = worksheet.getRange("A1:B4");
			ctx.trackedObjects.add(sourceDataRange);
			var createdChart = worksheet.charts.add("columnClustered", sourceDataRange, "rows");
			createdChart.title.text = "Chart by Series row";
			ctx.load(createdChart);
			var loadedChart: Excel.Chart;
			ctx.sync()
				.then(function () {
					loadedChart = worksheet.charts.getItem(createdChart.name);
					loadedChart.setData(sourceDataRange, "columns");
				})
				.then(ctx.sync)
				.then(function () {
					loadedChart.setData(sourceDataRange, "auto");
				})
				.then(ctx.sync)
				.then(function () {
					RichApiTest.log.done(true);
				})
				.catch(ExcelTest.reportError)
				.then(function () {
					ctx.trackedObjects.remove(sourceDataRange);
					ctx.sync();
				})
		});
	}
	export function test_Chart2_NameLocale_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData1 = worksheet.getRange("A1:B4");
			var sourceData2 = worksheet.getRange("E1:H5");
			var localizedChartName = "????";
			var createdChart = worksheet.charts.add("bubble", sourceData2, "columns");
			createdChart.name = localizedChartName;
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(localizedChartName);
				ctx.load(loadedChart);
				ctx.sync().then(function () {
					var success = Util.compare(loadedChart.name, localizedChartName);
					if (!success) {
						RichApiTest.log.fail("Localized name for chart does not match");
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_NameLocaleRightToLeft_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData1 = worksheet.getRange("A1:B4");
			var sourceData2 = worksheet.getRange("E1:H5");
			var localizedChartName = "??? ????";
			var createdChart = worksheet.charts.add("bubble", sourceData2, "columns");
			createdChart.name = localizedChartName;
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(localizedChartName);
				ctx.load(loadedChart);
				ctx.sync().then(function () {
					var success = Util.compare(loadedChart.name, localizedChartName);
					if (!success) {
						RichApiTest.log.fail("Localized name for chart does not match");
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DeleteAdd_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData1 = worksheet.getRange("A1:B4");
			
			var chartTitles = ["Chart1", "Chart2"];
			var chartName = "RandomChart";
			var createdChart1 = worksheet.charts.add("pie", sourceData1, "auto");
			createdChart1.title.text = chartTitles[0];
			createdChart1.name = chartName;
			createdChart1.left = 10;
			createdChart1.top = 50;
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(chartName);
				loadedChart.delete();
				var sourceData2 = worksheet.getRange("E1:H5");
				var createdChart2 = worksheet.charts.add("bubble", sourceData2, "columns");
				createdChart2.title.text = chartTitles[1];
				createdChart2.name = chartName;
				createdChart2.left = 200;
				createdChart2.top = 50;
				return ctx.sync().then(function () {
					loadedChart = worksheet.charts.getItem(chartName);
					ctx.load(loadedChart);
					ctx.load(loadedChart.title);
					ctx.sync().then(function () {
						var success = true;
						if (!Util.compare(loadedChart.title.text, chartTitles[1])) {
							RichApiTest.log.fail("Chart loaded has incorrect title");
							success = false;
						}
						if (!Util.compare(loadedChart.name, chartName)) {
							RichApiTest.log.fail("Chart loaded has incorrect name");
							success = false;
						}
						if (!Util.compare(Math.round(loadedChart.left), 200)) {
							RichApiTest.log.fail("Chart loaded has incorrect left property");
							success = false;
						}
						if (!Util.compare(Math.round(loadedChart.top), 50)) {
							RichApiTest.log.fail("Chart loaded has incorrect top property");
							success = false;
						}
						RichApiTest.log.done(success);
					}, ExcelTest.reportError);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DatasourceUpdatedToNull_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var createdChart = worksheet.charts.add("columnClustered", sourceData, "rows");
			createdChart.title.text = "Chart by Series row";
			ctx.load(createdChart);
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(createdChart.name);
				try {
					loadedChart.setData(null, "columns");
					RichApiTest.log.fail("Should not have reached this code; chart.setData should have failed if the second argument is not a range");
				} catch (e) {
					Util.ensureExpectedFailureAndPassOrFail(e, Excel.ErrorCodes.invalidArgument);
				}
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DatasourceUpdatedToStringInvalid_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			var createdChart = worksheet.charts.add("columnClustered", sourceData, "rows");
			createdChart.title.text = "Chart by Series row";
			ctx.load(createdChart);
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(createdChart.name);
				try {
					loadedChart.setData(<any>(sheetName + "!" + "A1:B4"), "columns");
					RichApiTest.log.fail("Should have failed on line above");
				} catch (e) {
					Util.ensureExpectedFailureAndPassOrFail(e, Excel.ErrorCodes.invalidArgument);
				}
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DatasourceNull_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
			try {
				worksheet.charts.add("columnClustered", null, "rows");
				RichApiTest.log.fail("Should not have reached this code; charts.add should have failed if the second argument is not a range");
			} catch (e) {
				Util.ensureExpectedFailureAndPassOrFail(e, Excel.ErrorCodes.invalidArgument);
			}
		});
	}
	export function test_Chart2_DatasourceRangeCleared_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeAddress = "A20:C23";
			var rangeValues = [["june", "july", "august"], ["1", "33", "2"], ["123", "11", "12"], ["1", "2", "3"]];
			var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			range.values = rangeValues;
			var createdChart = worksheet.charts.add("cylinderColClustered", range, "rows");
			createdChart.title.text = "Chart with cleared data range";
			ctx.load(createdChart);
			ctx.sync().then(function () {
				var loadedChart = worksheet.charts.getItem(createdChart.name);
				range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
				range.clear(null);
				var points = loadedChart.series.getItemAt(1).points;
				ctx.load(points);
				ctx.sync().then(function () {
					var success = false;
					if (Util.compare(points.count, 3)) {
						success = true;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_DatasourceUnbounded_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, function () {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			ctx.sync().then(function () {
				var createdChart = worksheet.charts.add("pie", worksheet.getRange("K:K"), "auto");
				createdChart.title.text = "Chart with unbounded data";
				var points = createdChart.series.getItemAt(0).points;
				ctx.load(points);
				ctx.sync().then(function () {
					var success = false;
					if (points.count < 100) {
						success = true;
					}
					else {
						RichApiTest.log.fail("Data points were more than expected");
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart2_TrendlinesGetCount_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			_injectCollectionCountTest_JS((ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("Linear");
				trendlines.add("Power");
				return chart.series.getItemAt(0).trendlines;
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_GetTrendlineProperty_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function(ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("Linear");
				trendlines.add("MovingAverage");
				trendlines.add("Polynomial");
				ctx.load(trendlines);
				return ctx.sync().then(function () {
					var linearTrendline = trendlines.items[0];
					var movingAverageTrendline = trendlines.items[1];
					var polynomailTrendline = trendlines.items[2];
					Util.assertCompareValues("Linear", linearTrendline.type);
					Util.assertCompareValues(null, linearTrendline.movingAveragePeriod);
					Util.assertCompareValues(null, linearTrendline.polynomialOrder);
					Util.assertCompareValues(2, movingAverageTrendline.movingAveragePeriod);
					Util.assertCompareValues(2, polynomailTrendline.polynomialOrder);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetTrendlineProperty_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("MovingAverage");
				trendlines.add("Polynomial");
				ctx.load(trendlines);
				return ctx.sync().then(function () {
					var movingAverageTrendline = trendlines.items[0];
					var polynomailTrendline = trendlines.items[1];
					movingAverageTrendline.movingAveragePeriod = 2;
					polynomailTrendline.polynomialOrder = 3;
					return ctx.sync().then(function () {
						Util.assertCompareValues(2, movingAverageTrendline.movingAveragePeriod);
						Util.assertCompareValues(3, polynomailTrendline.polynomialOrder);
					});
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_AddSeries_cvt_JScript_V18() {
		var sheetName = "Charts";
		var seriesName = "SeriesName";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var seriesCol = chart.series;
				var series = seriesCol.add(seriesName, 1);
				ctx.load(seriesCol, "count");
				ctx.load(series, "name");
				return ctx.sync().then(() => {
					Util.assertCompareValues(2, seriesCol.count, "Series.count");
					Util.assertCompareValues(seriesName, series.name, "Series.name");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_DeleteSeries_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var seriesCol = chart.series;
				var series = seriesCol.getItemAt(0);
				series.delete();
				ctx.load(seriesCol, "count");
				return ctx.sync().then(() => {
					Util.assertCompareValues(0, seriesCol.count, "Series.count");
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SeriesGetAndSetChartType_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var series = chart.series.getItemAt(0);
				series.chartType = Excel.ChartType.columnClustered;
				ctx.load(series, "chartType");
				return ctx.sync().then(() => {
					Util.assertCompareValues("ColumnClustered", series.chartType, "Series.chartType");
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export async function test_Chart2_SeriesGetAndSetDoughnutHoleSize$AsyncAwait_cvt_JScript_V18() {
		const sheetName = "Charts";
		const defaultDoughnutHoleSize = 75;
		const setDoughnutHoleSize = 50;
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			const sheet = ctx.workbook.worksheets.getItem(sheetName);
			const sourceData = sheet.getRange("A1:B4");
			const chart = sheet.charts.add(Excel.ChartType.doughnut, sourceData, "auto");
			const series = chart.series.getItemAt(0).load("doughnutHoleSize");
			await ctx.sync();
			Util.assertCompareNumeric(defaultDoughnutHoleSize, series.doughnutHoleSize, 0, "Default Series.doughnutHoleSize");
			series.doughnutHoleSize = setDoughnutHoleSize;
			const reloadedSeries = chart.series.getItemAt(0).load("doughnutHoleSize");
			await ctx.sync();
			Util.assertCompareNumeric(setDoughnutHoleSize, reloadedSeries.doughnutHoleSize, 0, "Set Series.doughnutHoleSize");
		});
	}
	export async function test_Chart2_SeriesSetDoughnutHoleSizeForInvalidChartType$AsyncAwait_cvt_JScript_V18() {
		const sheetName = "Charts";
		const doughnutHoleSize = 50;
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			const sheet = ctx.workbook.worksheets.getItem(sheetName);
			const sourceData = sheet.getRange("A1:B4");
			const chart = sheet.charts.add(Excel.ChartType.columnClustered, sourceData, "auto");
			const series = chart.series.getItemAt(0);
			series.doughnutHoleSize = doughnutHoleSize;
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	
	
	export function test_Chart2_SeriesGetAndSetFiltered_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var series = chart.series.getItemAt(0);
				series.load("filtered");
				return ctx.sync().then(() => {
					Util.assert(!series.filtered, "Series.filtered");
					series.filtered = true;
					return ctx.sync().then(() => {
						Util.assert(series.filtered, "Series.filtered");
					});
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export async function test_Chart2_SeriesGetAndSetGapWidth$AsyncAwait_cvt_JScript_V18() {
		const sheetName = "Charts";
		const defaultGapWidth = 150;
		const setGapWidth = 50;
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			const sheet = ctx.workbook.worksheets.getItem(sheetName);
			const sourceData = sheet.getRange("A1:B4");
			const chart = sheet.charts.add(Excel.ChartType.barStacked, sourceData, "auto");
			const series = chart.series.getItemAt(0).load("gapWidth");
			await ctx.sync();
			Util.assertCompareNumeric(defaultGapWidth, series.gapWidth, 0, "Default Series.gapWidth");
			series.gapWidth = setGapWidth;
			const reloadedSeries = chart.series.getItemAt(0).load("gapWidth");
			await ctx.sync();
			Util.assertCompareNumeric(setGapWidth, reloadedSeries.gapWidth, 0, "Set Series.gapWidth");
		});
	}
	export async function test_Chart2_SeriesSetGapWidthForInvalidChartType$AsyncAwait_cvt_JScript_V18() {
		const sheetName = "Charts";
		const gapWidth = 50;
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			const sheet = ctx.workbook.worksheets.getItem(sheetName);
			const sourceData = sheet.getRange("A1:B4");
			const chart = sheet.charts.add(Excel.ChartType.pie, sourceData, "auto");
			const series = chart.series.getItemAt(0);
			series.gapWidth = gapWidth;
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	
	
	export function test_Chart2_SeriesGetAndSetHasDataLabels_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var series = chart.series.getItemAt(0);
				series.hasDataLabels = true;
				series.load("hasDataLabels");
				return ctx.sync().then(() => {
					Util.assert(series.hasDataLabels, "Series.hasDataLabels");
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SeriesGetAndSetMarkerSize_cvt_JScript_V18() {
		var sheetName = "Charts";
		var markerSize = 10;
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var series = chart.series.getItemAt(0);
				series.markerSize = markerSize;
				series.load("markerSize");
				return ctx.sync().then(() => {
					Util.assertCompareNumeric(markerSize, series.markerSize, 0, "Series.markerSize");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SeriesGetAndSetMarkerStyle_cvt_JScript_V18() {
		var sheetName = "Charts";
		var markerStyle = "Square";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run((ctx) => {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
				var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var series = chart.series.getItemAt(0);
				series.markerStyle = markerStyle;
				series.load("markerStyle");
				return ctx.sync().then(() => {
					Util.assertCompareValues(markerStyle, series.markerStyle, "Series.markerStyle");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export async function test_Chart2_SeriesGetAndSetShowShadow$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
			var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
			var series = chart.series.getItemAt(0);
			series.showShadow = true;
			ctx.load(series);
			await ctx.sync();
			Util.assert(series.showShadow, "Series.showShadow");
		});
	}
	export async function test_Chart2_SeriesGetAndSetMarkerBackgroundColor$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		var markerColor = "#555555";
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
			var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
			var series = chart.series.getItemAt(0);
			series.markerBackgroundColor = markerColor;
			ctx.load(series);
			await ctx.sync();
			Util.assertCompareValues(markerColor, series.markerBackgroundColor, "Series.markerBackgroundColor");
		});
	}
	export async function test_Chart2_SeriesGetAndSetMarkerForegroundColor$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		var markerColor = "#555555";
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
			var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
			var series = chart.series.getItemAt(0);
			series.markerForegroundColor = markerColor;
			ctx.load(series);
			await ctx.sync();
			Util.assertCompareValues(markerColor, series.markerForegroundColor, "Series.markerForegroundColor");
		});
	}
	export async function test_Chart2_SeriesSetMarkerForegroundColorForInvalidType$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		var markerColor = "#555555";
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
			var chart = sheet.charts.add(Excel.ChartType.columnClustered, sourceData, "auto");
			var series = chart.series.getItemAt(0);
			ctx.load(series);
			await ctx.sync();
			series.markerForegroundColor = markerColor;
			Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
		});
	}
	export async function test_Chart2_SeriesGetAndSetPlotOrder$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		var newPlotOrder = 2;
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = sheet.getRange(sheetName + "!" + "E1:H5");
			var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
			var series = chart.series.getItemAt(0);
			ctx.load(series);
			await ctx.sync();
			Util.assertCompareValues(0, series.plotOrder, "Series original plotOrder");
			series.plotOrder = newPlotOrder;
			ctx.load(series);
			ctx.sync();
			Util.assertCompareValues(newPlotOrder, series.plotOrder, "Series new plotOrder");
		});
	}
	export async function test_Chart2_SeriesGetAndSetSmooth$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
			var chart = sheet.charts.add(Excel.ChartType.line, sourceData, "auto");
			var series = chart.series.getItemAt(0);
			series.smooth = true;
			ctx.load(series);
			await ctx.sync();
			Util.assert(series.smooth, "Series.smooth");
		});
	}
	export async function test_Chart2_SeriesSetSmoothForInvalidType$AsyncAwait_cvt_JScript_V18() {
		var sheetName = "Charts";
		await Util.removeAllChartsAsync(sheetName);
		await Excel.run(async ctx => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = sheet.getRange(sheetName + "!" + "A1:B4");
			var chart = sheet.charts.add(Excel.ChartType.columnClustered, sourceData, "auto");
			var series = chart.series.getItemAt(0);
			ctx.load(series);
			await ctx.sync();
			series.smooth = true;
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
		});
	}
	export function test_Chart2_GetAndSetAxisPropertyOnCategoryAxis_cvt_JScript_V18() {
		var sheetName = "ChartsAxis";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var axis = chart.axes.categoryAxis;
				return ctx.sync().then(function () {
					axis.majorTimeUnitScale = "Years";
					axis.minorTimeUnitScale = "Months";
					axis.baseTimeUnit = "Days";
					axis.categoryType = "DateAxis";
					ctx.load(axis);
					return ctx.sync().then(function () {
						Util.assertCompareValues("Category", axis.type);
						Util.assertCompareValues("DateAxis", axis.categoryType);
						Util.assertCompareValues("Years", axis.majorTimeUnitScale);
						Util.assertCompareValues("Months", axis.minorTimeUnitScale);
						Util.assertCompareValues("Days", axis.baseTimeUnit);
					});
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_GetAxisPropertyOnValueAxis_cvt_JScript_V18() {
		var sheetName = "ChartsAxis";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var axis = chart.axes.valueAxis;
				ctx.load(axis);
				return ctx.sync().then(function () {
					Util.assertCompareValues("Value", axis.type);
					Util.assertCompareValues(null, axis.categoryType);
					Util.assertCompareValues(null, axis.majorTimeUnitScale);
					Util.assertCompareValues(null, axis.minorTimeUnitScale);
					Util.assertCompareValues(null, axis.baseTimeUnit);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_GetAxisPositionAndSizeProperties_cvt_JScript_V18() {
		var sheetName = "ChartsAxis";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var valueAxis = chart.axes.valueAxis;
				ctx.load(valueAxis);
				return ctx.sync().then(function () {
					Util.assertCompareValues("number", typeof (valueAxis.top), "Chart Axis Top");
					Util.assertCompareValues("number", typeof (valueAxis.left), "Chart Axis Left");
					Util.assertCompareValues("number", typeof (valueAxis.width), "Chart Axis Width");
					Util.assertCompareValues("number", typeof (valueAxis.height), "Chart Axis Height");
					valueAxis.visible = false;
					ctx.load(valueAxis);
					return ctx.sync().then(function () {
						Util.assertCompareValues(null, valueAxis.top, "Chart Axis Top");
						Util.assertCompareValues(null, valueAxis.left, "Chart Axis Left");
						Util.assertCompareValues(null, valueAxis.width, "Chart Axis Width");
						Util.assertCompareValues(null, valueAxis.height, "Chart Axis Height");
					});
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetAndGetAxisCrossAndPlotOrderProperties_cvt_JScript_V18() {
		var sheetName = "ChartsAxis";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var categoryAxis = chart.axes.categoryAxis;
				var valueAxis = chart.axes.valueAxis;
				ctx.load(categoryAxis);
				ctx.load(valueAxis);
				return ctx.sync().then(function () {
					Util.assertCompareValues(Excel.AxisCrosses.automatic, categoryAxis.crosses);
					Util.assertCompareValues(Excel.AxisCrosses.automatic, valueAxis.crosses);
					Util.assertCompareValues(null, categoryAxis.crossesAt);
					Util.assertCompareValues(null, valueAxis.crossesAt);
					Util.assertCompareValues(false, valueAxis.reversePlotOrder);
					categoryAxis.setCrossesAt(1);
					valueAxis.crosses = Excel.AxisCrosses.minimum;
					valueAxis.reversePlotOrder = true;
					ctx.load(categoryAxis);
					ctx.load(valueAxis);
					return ctx.sync().then(function () {
						Util.assertCompareValues(Excel.AxisCrosses.custom, categoryAxis.crosses);
						Util.assertCompareValues(Excel.AxisCrosses.minimum, valueAxis.crosses);
						Util.assertCompareValues(1, categoryAxis.crossesAt);
						Util.assertCompareValues(null, valueAxis.crossesAt);
						Util.assertCompareValues(true, valueAxis.reversePlotOrder);
					});
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetAndGetAxisTickProperties_cvt_JScript_V18() {
		var sheetName = "ChartsAxis";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange(sheetName + "!" + "A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var categoryAxis = chart.axes.categoryAxis;
				var valueAxis = chart.axes.valueAxis;
				ctx.load(categoryAxis);
				ctx.load(valueAxis);
				return ctx.sync().then(function () {
					Util.assertCompareValues(Excel.AxisTickMark.outside, categoryAxis.majorTickMark);
					Util.assertCompareValues(Excel.AxisTickMark.none, categoryAxis.minorTickMark);
					Util.assertCompareValues(1, categoryAxis.tickMarkSpacing);
					Util.assertCompareValues(Excel.AxisTickLabelPosition.nextToAxis, categoryAxis.tickLabelPosition);
					Util.assertCompareValues(1, categoryAxis.tickLabelSpacing);
					Util.assertCompareValues(Excel.AxisTickMark.none, valueAxis.majorTickMark);
					Util.assertCompareValues(Excel.AxisTickMark.none, valueAxis.minorTickMark);
					Util.assertCompareValues(null, valueAxis.tickMarkSpacing);
					Util.assertCompareValues(Excel.AxisTickLabelPosition.nextToAxis, valueAxis.tickLabelPosition);
					Util.assertCompareValues(null, valueAxis.tickLabelSpacing);
					valueAxis.majorTickMark = Excel.AxisTickMark.inside;
					valueAxis.minorTickMark = Excel.AxisTickMark.outside;
					categoryAxis.tickMarkSpacing = 2;
					categoryAxis.tickLabelPosition = Excel.AxisTickLabelPosition.high;
					categoryAxis.tickLabelSpacing = 2;
					ctx.load(categoryAxis);
					ctx.load(valueAxis);
					return ctx.sync().then(function () {
						Util.assertCompareValues(2, categoryAxis.tickMarkSpacing);
						Util.assertCompareValues(Excel.AxisTickLabelPosition.high, categoryAxis.tickLabelPosition);
						Util.assertCompareValues(2, categoryAxis.tickLabelSpacing);
						Util.assertCompareValues(Excel.AxisTickMark.inside, valueAxis.majorTickMark);
						Util.assertCompareValues(Excel.AxisTickMark.outside, valueAxis.minorTickMark);
					});
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetPolynomialOrderToLinearTrendline_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("Linear");
				ctx.load(trendlines);
				return ctx.sync().then(function () {
					var trendline = trendlines.items[0];
					trendline.polynomialOrder = 2;
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetMovingAveragePeriodToLinearTrendline_cvt_JScript_V18() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, "auto");
				ctx.load(chart);
				return ctx.sync().then(function () {
					var trendlines = chart.series.getItemAt(0).trendlines;
					trendlines.add("Linear");
					ctx.load(trendlines);
					return ctx.sync().then(function () {
						var trendline = trendlines.items[0];
						trendline.movingAveragePeriod = 2;
						return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
					})
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_TrendlineSetAndGetForwardAndBackward_cvt_JScript_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(async (ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B11");
				var chart = worksheet.charts.add(Excel.ChartType.xyscatter, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("Linear");
				trendlines.add("MovingAverage");
				ctx.load(trendlines);
				await ctx.sync();
				var linearTrendline = trendlines.items[0];
				var movingAvrTrendline = trendlines.items[1];
				linearTrendline.forward = 2;
				linearTrendline.backward = 3.4;
				ctx.load(linearTrendline);
				ctx.load(movingAvrTrendline);
				await ctx.sync();
				Util.assertCompareValues(2, linearTrendline.forward, "linearTrendline.forward");
				Util.assertCompareValues(3.4, linearTrendline.backward, "linearTrendline.backward");
				Util.assertCompareValues(null, movingAvrTrendline.forward, "movingAvrTrendline.forward");
				Util.assertCompareValues(null, movingAvrTrendline.backward, "movingAvrTrendline.backward");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetForwardOnMovingAverageTrendline_cvt_JScript_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(async (ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B11");
				var chart = worksheet.charts.add(Excel.ChartType.xyscatter, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("MovingAverage");
				ctx.load(trendlines);
				await ctx.sync();
				var trendline = trendlines.items[0];
				trendline.forward = 2;
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetBackwardOnMovingAverageTrendline_cvt_JScript_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(async (ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B11");
				var chart = worksheet.charts.add(Excel.ChartType.xyscatter, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("MovingAverage");
				ctx.load(trendlines);
				await ctx.sync();
				var trendline = trendlines.items[0];
				trendline.backward = 2;
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_DeleteTrendline_cvt_JScript_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(async (ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B11");
				var chart = worksheet.charts.add(Excel.ChartType.xyscatter, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("MovingAverage");
				ctx.load(trendlines);
				await ctx.sync();
				var trendline = trendlines.items[0];
				trendline.delete();
				ctx.load(trendlines);
				await ctx.sync();
				Util.assertCompareValues(0, trendlines.items.length, "Expected trendline count");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_TrendlineSetAndGetDisplayEquationAndDisplayRSquared_cvt_JScript_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(async ctx => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B11");
				var chart = worksheet.charts.add(Excel.ChartType.xyscatter, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("Linear");
				trendlines.add("MovingAverage");
				ctx.load(trendlines);
				await ctx.sync();
				var linearTrendline = trendlines.items[0];
				var movingAvrTrendline = trendlines.items[1];
				linearTrendline.displayEquation = true;
				linearTrendline.displayRSquared = true;
				ctx.load(linearTrendline);
				ctx.load(movingAvrTrendline);
				await ctx.sync();
				Util.assertCompareValues(true, linearTrendline.displayEquation, "linearTrendline.displayEquation");
				Util.assertCompareValues(true, linearTrendline.displayRSquared, "linearTrendline.displayRSquared");
				Util.assertCompareValues(null, movingAvrTrendline.displayEquation, "movingAvrTrendline.displayEquation");
				Util.assertCompareValues(null, movingAvrTrendline.displayRSquared, "movingAvrTrendline.displayRSquared");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetDisplayEquationOnMovingAverageTrendline_cvt_JScript_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(async ctx => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B11");
				var chart = worksheet.charts.add(Excel.ChartType.xyscatter, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("MovingAverage");
				ctx.load(trendlines);
				await ctx.sync();
				var trendline = trendlines.items[0];
				trendline.displayEquation = true;
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetDisplayRSquaredOnMovingAverageTrendline_cvt_JScript_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(async ctx => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B11");
				var chart = worksheet.charts.add(Excel.ChartType.xyscatter, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("MovingAverage");
				ctx.load(trendlines);
				await ctx.sync();
				var trendline = trendlines.items[0];
				trendline.displayRSquared = true;
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_TrendlineSetAndGetName_cvt_JScript_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(async (ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B11");
				var chart = worksheet.charts.add(Excel.ChartType.xyscatter, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("Linear");
				ctx.load(trendlines);
				await ctx.sync();
				var trendline = trendlines.items[0];
				trendline.name = "Custom Name"
				ctx.load(trendline);
				await ctx.sync();
				Util.assertCompareValues("Custom Name", trendline.name, "Trendline Custom Name");
				trendline.name = null;
				ctx.load(trendline);
				await ctx.sync();
				Util.assertCompareValues("Linear (Sales)", trendline.name, "Trendline Automatic Name");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_TrendlineSetAndGetIntercept_cvt_JScript_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(async (ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B11");
				var chart = worksheet.charts.add(Excel.ChartType.xyscatter, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("Linear");
				ctx.load(trendlines);
				await ctx.sync();
				var trendline = trendlines.items[0];
				trendline.intercept = 1234567
				ctx.load(trendline);
				await ctx.sync();
				Util.assertCompareValues(1234567, trendline.intercept, "Trendline Custom Intercept");
				trendline.intercept = "";
				ctx.load(trendline);
				await ctx.sync();
				Util.assertCompareValues(0, trendline.intercept, "Trendline Automatic Intercept");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart2_SetInterceptOnWrongTypeTrendline_cvt_JScript_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(async (ctx) => {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B11");
				var chart = worksheet.charts.add(Excel.ChartType.xyscatter, sourceData, "auto");
				var trendlines = chart.series.getItemAt(0).trendlines;
				trendlines.add("MovingAverage");
				ctx.load(trendlines);
				await ctx.sync();
				var trendline = trendlines.items[0];
				trendline.intercept = 1234567;
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
}?module ExcelTest {
	export function test_Chart_FormattingPieChartScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.format.fill.setSolidColor("darkslategray");
			chart.title.text = "Client distribution";
			chart.title.format.font.bold = true;
			chart.title.format.font.size = 18;
			chart.title.format.font.color = "FFFFFE";
			chart.legend.position = "right"
			chart.legend.format.font.name = "Algerian"
			chart.legend.format.fill.setSolidColor("white");
			chart.dataLabels.showPercentage = true;
			chart.dataLabels.format.font.size = 15;
			chart.dataLabels.format.font.color = "cCccCc";
			var points = chart.series.getItemAt(0).points;
			points.getItemAt(0).format.fill.setSolidColor("darkorchid");
			points.getItemAt(1).format.fill.setSolidColor('indigo');
			points.getItemAt(2).format.fill.setSolidColor("green");
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FormattingPieChartDataCalloutsScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.format.fill.setSolidColor("darkslategray");
			chart.title.text = "Client distribution";
			chart.title.format.font.bold = true;
			chart.title.format.font.size = 18;
			chart.title.format.font.color = "FFFFFE";
			chart.legend.position = "right";
			chart.legend.format.font.name = "Algerian";
			chart.legend.format.fill.setSolidColor("white");
			chart.dataLabels.position = Excel.ChartDataLabelPosition.callout;
			chart.dataLabels.showPercentage = true;
			chart.dataLabels.showCategoryName = false;
			chart.dataLabels.format.font.color = "cCccCc";
			chart.dataLabels.format.fill.setSolidColor("555555");
			var points = chart.series.getItemAt(0).points;
			points.getItemAt(0).format.fill.setSolidColor("darkorchid");
			points.getItemAt(1).format.fill.setSolidColor('indigo');
			points.getItemAt(2).format.fill.setSolidColor("green");
			chart.series.getItemAt(0).format.line.color = "goldenrod";
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FormattingColumnChartScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("$E$1:$H$5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			chart.format.fill.setSolidColor("PaleGoldenRod");
			chart.title.format.font.italic = true;
			chart.title.format.font.underline = Excel.ChartUnderlineStyle.single;
			chart.title.format.font.color = "DarkRed";
			chart.series.getItemAt(0).format.fill.setSolidColor("goldenrod");
			chart.series.getItemAt(1).format.fill.setSolidColor('palevioletred');
			chart.series.getItemAt(2).format.fill.setSolidColor("crimson");
			chart.dataLabels.showValue = true;
			chart.dataLabels.format.font.size = 15;
			chart.dataLabels.format.font.bold = true;
			chart.dataLabels.format.font.color = "FFFFFF";
			chart.axes.valueAxis.format.font.color = "999999";
			chart.axes.valueAxis.format.font.name = "Algerian";
			chart.axes.categoryAxis.format.font.color = "666666";
			chart.axes.categoryAxis.format.font.name = "Algerian";
			chart.axes.categoryAxis.title.text = "Fastest selling products";
			chart.axes.categoryAxis.title.format.font.italic = true;
			chart.axes.categoryAxis.title.format.font.color = "Olive";
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FormattingLineGraphScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E2:H5");
			var chart = worksheet.charts.add(Excel.ChartType.line, sourceData, Excel.ChartSeriesBy.rows);
			chart.format.fill.setSolidColor("PaleGoldenRod");
			chart.title.text = "Sales"
			chart.title.format.font.italic = true;
			chart.title.format.font.underline = Excel.ChartUnderlineStyle.single;
			chart.title.format.font.color = "DarkRed";
			chart.series.getItemAt(0).format.line.color = "goldenrod";
			chart.series.getItemAt(1).format.line.color = 'palevioletred';
			chart.series.getItemAt(2).format.line.color = "crimson";
			chart.axes.valueAxis.format.font.color = "999999";
			chart.axes.valueAxis.format.font.name = "Algerian";
			chart.axes.categoryAxis.format.font.color = "666666";
			chart.axes.categoryAxis.format.font.name = "Algerian";
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FormattingLinePropertyOnColumnSeriesScenario_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E2:H5");
			var chart = worksheet.charts.add(Excel.ChartType.columnClustered, sourceData, Excel.ChartSeriesBy.rows);
			
			chart.series.getItemAt(0).format.line.color = "goldenrod";
			chart.series.getItemAt(1).format.line.color = 'palevioletred';
			chart.series.getItemAt(2).format.line.color = "crimson";
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FontNameSetToInvalid_cvt_JScript_V11() {
		
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.title.format.font.name = "Algerian";
			chart.title.format.font.name = "SomeNonExistantFont";
			ctx.load(chart.title.format.font);
			return ctx.sync().then(function () {
				var success = Util.compare(chart.title.format.font.name, "SomeNonExistantFont");
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FontNameIgnoresCapitalization_cvt_JScript_V11() {
		
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.format.font.name = "alGERian";
			ctx.load(chart.format.font);
			return ctx.sync().then(function () {
				var success = Util.compare(chart.format.font.name, "alGERian");
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FontPropertyRetrieval_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add(Excel.ChartType.columnClustered, sourceData, "auto");
			chart.format.font.bold = true;
			chart.format.font.color = "000000";
			chart.format.font.italic = true;
			chart.format.font.name = "Algerian";
			chart.format.font.size = 8;
			chart.format.font.underline = Excel.ChartUnderlineStyle.single;
			chart.legend.format.fill.setSolidColor("000000");
			chart.legend.format.font.bold = false;
			chart.legend.format.font.color = "FFFfff"; 
			chart.legend.format.font.italic = true;
			chart.legend.format.font.name = "Garamond";
			chart.legend.format.font.size = 11;
			chart.legend.format.font.underline = Excel.ChartUnderlineStyle.none;
			chart.title.format.font.bold = true;
			chart.title.format.font.color = "b80f62"; 
			chart.title.format.font.italic = false;
			chart.title.format.font.name = "Arial";
			chart.title.format.font.size = 15;
			chart.title.format.font.underline = Excel.ChartUnderlineStyle.single;
			chart.axes.valueAxis.format.font.bold = false;
			chart.axes.valueAxis.format.font.color = "AAAAAA";
			chart.axes.valueAxis.format.font.italic = true;
			chart.axes.valueAxis.format.font.name = "Garamond";
			chart.axes.valueAxis.format.font.size = 11;
			chart.axes.valueAxis.format.font.underline = Excel.ChartUnderlineStyle.none;
			chart.axes.valueAxis.title.format.font.bold = true;
			chart.axes.valueAxis.title.format.font.color = "009900";
			chart.axes.valueAxis.title.format.font.italic = false;
			chart.axes.valueAxis.title.format.font.name = "Arial";
			chart.axes.valueAxis.title.format.font.size = 12;
			chart.axes.valueAxis.title.format.font.underline = Excel.ChartUnderlineStyle.single;
			ctx.load(chart.format.font);
			ctx.load(chart.legend.format.font);
			ctx.load(chart.title.format.font);
			ctx.load(chart.axes.valueAxis.format.font);
			ctx.load(chart.axes.valueAxis.title.format.font);
			ctx.load(chart.axes.categoryAxis.format.font); 
			return ctx.sync().then(function () {
				var success =
					Util.compare(chart.format.font.bold, true) &&
					Util.compare(chart.format.font.color, "#000000") &&
					Util.compare(chart.format.font.italic, true) &&
					Util.compare(chart.format.font.name, "Algerian") &&
					Util.compare(chart.format.font.size, 8) &&
					Util.compare(chart.format.font.underline, Excel.ChartUnderlineStyle.single) &&
					Util.compare(chart.legend.format.font.bold, false) &&
					Util.compare(chart.legend.format.font.color, "#FFFFFF") &&
					Util.compare(chart.legend.format.font.italic, true) &&
					Util.compare(chart.legend.format.font.name, "Garamond") &&
					Util.compare(chart.legend.format.font.size, 11) &&
					Util.compare(chart.legend.format.font.underline, Excel.ChartUnderlineStyle.none) &&
					Util.compare(chart.title.format.font.bold, true) &&
					Util.compare(chart.title.format.font.color, "#B80F62") &&
					Util.compare(chart.title.format.font.italic, false) &&
					Util.compare(chart.title.format.font.name, "Arial") &&
					Util.compare(chart.title.format.font.size, 15) &&
					Util.compare(chart.title.format.font.underline, Excel.ChartUnderlineStyle.single) &&
					Util.compare(chart.axes.valueAxis.format.font.bold, false) &&
					Util.compare(chart.axes.valueAxis.format.font.color, "#AAAAAA") &&
					Util.compare(chart.axes.valueAxis.format.font.italic, true) &&
					Util.compare(chart.axes.valueAxis.format.font.name, "Garamond") &&
					Util.compare(chart.axes.valueAxis.format.font.size, 11) &&
					Util.compare(chart.axes.valueAxis.format.font.underline, Excel.ChartUnderlineStyle.none) &&
					Util.compare(chart.axes.valueAxis.title.format.font.bold, true) &&
					Util.compare(chart.axes.valueAxis.title.format.font.color, "#009900") &&
					Util.compare(chart.axes.valueAxis.title.format.font.italic, false) &&
					Util.compare(chart.axes.valueAxis.title.format.font.name, "Arial") &&
					Util.compare(chart.axes.valueAxis.title.format.font.size, 12) &&
					Util.compare(chart.axes.valueAxis.title.format.font.underline, Excel.ChartUnderlineStyle.single) &&
					
					Util.compare(chart.axes.categoryAxis.format.font.bold, true) &&
					Util.compare(chart.axes.categoryAxis.format.font.color, "#000000") &&
					Util.compare(chart.axes.categoryAxis.format.font.italic, true) &&
					Util.compare(chart.axes.categoryAxis.format.font.name, "Algerian") &&
					Util.compare(chart.axes.categoryAxis.format.font.size, 8) &&
					Util.compare(chart.axes.categoryAxis.format.font.underline, Excel.ChartUnderlineStyle.single);
				RichApiTest.log.done(success);
		}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FontApplicationOrderingMatters1_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			
			chart.format.font.name = "Algerian";
			chart.title.format.font.name = "Arial";
			ctx.load(chart.title.format.font);
			return ctx.sync().then(function () {
				var success = Util.compare(chart.title.format.font.name, "Arial");
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FontApplicationOrderingMatters2_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			
			chart.title.format.font.name = "Arial";
			chart.format.font.name = "Algerian";
			ctx.load(chart.title.format.font);
			return ctx.sync().then(function () {
				
				var success = Util.compare(chart.title.format.font.name, "Algerian");
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FontPropertyRetrievalOnNonExistantObject_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			
			chart.title.text = "";
			ctx.load(chart.title.format.font);
			return ctx.sync().then(function () {
				var success =
					Util.compare(chart.title.format.font.bold, null) &&
					Util.compare(chart.title.format.font.color, null) &&
					Util.compare(chart.title.format.font.italic, null) &&
					Util.compare(chart.title.format.font.name, null) &&
					Util.compare(chart.title.format.font.size, null) &&
					Util.compare(chart.title.format.font.underline, null);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_SetAndGetTitleHorizontalAlignment_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				chart.title.text = "Chart Title";
				chart.title.horizontalAlignment = "Distributed";
				ctx.load(chart.title, "horizontalAlignment");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Distributed", chart.title.horizontalAlignment, "Chart Title Horizontal Alignment");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SetAndGetTitleHorizontalAlignmentWithNull_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				chart.title.text = "Chart Title";
				chart.title.horizontalAlignment = null;
				ctx.load(chart.title, "horizontalAlignment");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Center", chart.title.horizontalAlignment, "Chart Title Horizontal Alignment");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SetAndGetTitleTextOrientation_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				chart.title.text = "Chart Title";
				chart.title.textOrientation = 180;
				ctx.load(chart.title, "textOrientation");
				return ctx.sync().then(function () {
					Util.assertCompareValues(180, chart.title.textOrientation, "Chart Title Text Orientation");
					chart.title.textOrientation = 90;
					ctx.load(chart.title, "textOrientation");
					return ctx.sync().then(function () {
						Util.assertCompareValues(90, chart.title.textOrientation, "Chart Title Text Orientation");
					});
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SetAndGetTitlePosition_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				chart.title.text = "Chart Title";
				ctx.load(chart.title, "position");
				return ctx.sync().then(function () {
					Util.assertCompareValues(Excel.ChartTitlePosition.top, chart.title.position, "Chart Title Position");
					chart.title.position = Excel.ChartTitlePosition.right;
					ctx.load(chart.title, "position");
					return ctx.sync().then(function () {
						Util.assertCompareValues(Excel.ChartTitlePosition.right, chart.title.position, "Chart Title Position");
					});
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SetAndGetTitleShowShadow_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				chart.title.text = "Chart Title";
				chart.title.showShadow = true;
				ctx.load(chart.title, "showShadow");
				return ctx.sync().then(function () {
					Util.assertCompareValues(true, chart.title.showShadow, "Chart Title showShadow");
					chart.title.showShadow = false;
					ctx.load(chart.title, "showShadow");
					return ctx.sync().then(function () {
						Util.assertCompareValues(false, chart.title.showShadow, "Chart Title showShadow");
					});
				});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SetAndGetTitleTopLeft_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function(ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				var title = chart.title;
				title.text = "Chart Title";
				title.top = 100.01;
				title.left = 50;
				title.load("top,left");
				return ctx.sync().then(function () {
					ExcelTest.Util.assertCompareValues("number", typeof(title.top), "Chart Title Top");
					ExcelTest.Util.assertCompareValues("number", typeof(title.left), "Chart Title Left");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_GetTitleWidthHeight_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				var title = chart.title;
				title.text = "Chart Title";
				title.load("width,height");
				return ctx.sync().then(function () {
					ExcelTest.Util.assertCompareValues("number", typeof(title.width), "Chart Title Width");
					ExcelTest.Util.assertCompareValues("number", typeof(title.height), "Chart Title Height");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SetTitleFormula_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				var title = chart.title;
				title.text = "Chart Title";
				title.setFormula("=Charts!B1");
				title.load("text");
				return ctx.sync().then(function () {
					ExcelTest.Util.assertCompareValues("Projects", title.text, "Chart Title Text from formula");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SetTitleVerticalAlignmentInvalidOperation_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				var title = chart.title;
				title.text = "Chart Title";
				
				title.verticalAlignment = Excel.ChartTextVerticalAlignment.top;
				return ctx.sync();
			})
			.then(ExcelTest.pass)
			.catch(function (error) {
				ExcelTest.Util.ensureExpectedFailureAndPassOrFail(error, Excel.ErrorCodes.invalidOperation);
			});
		});
	}
	export function test_Chart_GetTitleVerticalAlignmentCenter_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				var title = chart.title;
				title.text = "Chart Title";
				title.load("verticalAlignment");
				return ctx.sync().then(function () {
					ExcelTest.Util.assertCompareValues("Center", title.verticalAlignment, "Chart Title VerticalAlignment");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SetAndGetTitleVerticalAlignmentTop_cvt_JScript_V18() {
		var sheetName = "Charts";
		ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var worksheet = ctx.workbook.worksheets.getItem(sheetName);
				var sourceData = worksheet.getRange("A1:B4");
				var chart = worksheet.charts.add("pie", sourceData, "auto");
				var title = chart.title;
				title.text = "Chart Title";
				title.textOrientation = 90;
				title.verticalAlignment = Excel.ChartTextVerticalAlignment.top;
				title.load("verticalAlignment");
				return ctx.sync().then(function () {
					ExcelTest.Util.assertCompareValues("Top", title.verticalAlignment, "Chart Title VerticalAlignment");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_SetAndGetTitleSubstringFontProperty_cvt_JScript_V18() {
		if (ExcelTest.Util.isDesktop()) {
			var sheetName = "Charts";
			ExcelTest.Util.removeAllChartsBefore(sheetName, () => {
				Excel.run(function (ctx) {
					var worksheet = ctx.workbook.worksheets.getItem(sheetName);
					var sourceData = worksheet.getRange("A1:B4");
					var chart = worksheet.charts.add("pie", sourceData, "auto");
					chart.title.text = "Chart Title";
					var font = chart.title.getSubstring(6, 20).font;
					font.color = "#FF0000";
					font.bold = true;
					font.italic = true;
					font.underline = "Single";
					font.name = "Bell MT";
					font.size = 24;
					ctx.load(font);
					return ctx.sync().then(function () {
						Util.assertCompareValues(true, font.bold, "Chart Title Substring Font's Bold");
						Util.assertCompareValues("#FF0000", font.color, "Chart Title Substring Font's Color");
						Util.assertCompareValues(true, font.italic, "Chart Title Substring Font's Italic");
						Util.assertCompareValues("Bell MT", font.name, "Chart Title Substring Font's Name");
						Util.assertCompareValues(24, font.size, "Chart Title Substring Font's Size");
						Util.assertCompareValues("Single", font.underline, "Chart Title Substring Font's Underline");
					});
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
			});
		}
	}
	
	export function test_Chart_LineFormatting_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName,() => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("E1:H5");
			var chart = worksheet.charts.add("ColumnClustered", sourceData, "auto");
			chart.format.fill.setSolidColor("333333");
			chart.series.getItemAt(0).format.line.color = "FF0000";
			chart.series.getItemAt(0).format.line.lineStyle = "Dash";
			chart.series.getItemAt(0).format.line.weight = 2;
			chart.series.getItemAt(0).format.fill.setSolidColor("004400");
			chart.series.getItemAt(1).format.fill.setSolidColor("000099");
			chart.series.getItemAt(2).format.fill.setSolidColor("CC0022");
			chart.axes.valueAxis.format.line.color = "ff0000";
			chart.axes.valueAxis.format.line.lineStyle = "Continuous";
			chart.axes.valueAxis.format.line.weight = 1;
			chart.axes.valueAxis.majorGridlines.format.line.color = "999900";
			chart.axes.valueAxis.majorGridlines.format.line.lineStyle = "DashDot";
			chart.axes.valueAxis.majorGridlines.format.line.weight = 3;
			chart.axes.valueAxis.minorGridlines.format.line.color = "444444";
			chart.axes.valueAxis.minorGridlines.format.line.lineStyle = "DashDotDot";
			chart.axes.valueAxis.minorGridlines.format.line.weight = 1;
			chart.axes.categoryAxis.format.line.color = "0000ff";
			chart.axes.categoryAxis.majorGridlines.format.line.color = "9999ff";
			chart.axes.categoryAxis.majorGridlines.format.line.lineStyle = "Grey25";
			chart.axes.categoryAxis.majorGridlines.format.line.weight = 1;
			chart.axes.categoryAxis.minorGridlines.format.line.lineStyle = "Automatic";
			var firstSeries = chart.series.getItemAt(0);
			var secondSeries = chart.series.getItemAt(1);
			ctx.load(firstSeries.format.line);
			ctx.load(secondSeries.format.line);
			ctx.load(chart.axes.valueAxis.format.line);
			ctx.load(chart.axes.valueAxis.majorGridlines.format.line);
			ctx.load(chart.axes.valueAxis.minorGridlines.format.line);
			ctx.load(chart.axes.categoryAxis.format.line);
			ctx.load(chart.axes.categoryAxis.majorGridlines.format.line);
			ctx.load(chart.axes.categoryAxis.minorGridlines.format.line);
			return ctx.sync().then(function () {
				var success =
					Util.compare(firstSeries.format.line.color, "#FF0000") &&
					Util.compare(firstSeries.format.line.lineStyle, "Dash") &&
					Util.compare(firstSeries.format.line.weight, 2)
					Util.compare(secondSeries.format.line.color, null) &&
					Util.compare(chart.axes.valueAxis.format.line.color, "#FF0000") &&
					Util.compare(chart.axes.valueAxis.format.line.lineStyle, "Continuous") &&
					Util.compare(chart.axes.valueAxis.format.line.weight, 1) &&
					Util.compare(chart.axes.valueAxis.majorGridlines.format.line.color, "#999900") &&
					Util.compare(chart.axes.valueAxis.majorGridlines.format.line.lineStyle, "DashDot") &&
					Util.compare(chart.axes.valueAxis.majorGridlines.format.line.weight, 3) &&
					Util.compare(chart.axes.valueAxis.minorGridlines.format.line.color, "#444444") &&
					Util.compare(chart.axes.valueAxis.minorGridlines.format.line.lineStyle, "DashDotDot") &&
					Util.compare(chart.axes.valueAxis.minorGridlines.format.line.weight, 1) &&
					Util.compare(chart.axes.categoryAxis.format.line.color, "#0000FF") &&
					Util.compare(chart.axes.categoryAxis.majorGridlines.format.line.color, "#9999FF") &&
					Util.compare(chart.axes.categoryAxis.majorGridlines.format.line.lineStyle, "Grey25") &&
					Util.compare(chart.axes.categoryAxis.majorGridlines.format.line.weight, 1) &&
					Util.compare(chart.axes.categoryAxis.minorGridlines.format.line.color, "#000000") &&
					Util.compare(chart.axes.categoryAxis.minorGridlines.format.line.lineStyle, "Automatic") &&
					Util.compare(chart.axes.categoryAxis.minorGridlines.format.line.weight, 0);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Chart_FontNameNull_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName,() => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.title.format.font.name = null;
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_Chart_FontNameEmpty_cvt_JScript_V11() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName,() => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var sourceData = worksheet.getRange("A1:B4");
			var chart = worksheet.charts.add("pie", sourceData, "auto");
			chart.title.format.font.name = "";
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
}
?module ExcelTest {
	export function test_ConditionalFormats_BasicRangeCount_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var count = sheet.getRange("C5:E5").conditionalFormats.getCount();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(1, count.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_LoadAllFormats_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var formats = sheet.getRange("B3:B7").conditionalFormats;
			ctx.load(formats);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(3, formats.items.length);
					Util.assertCompareValues(Excel.ConditionalFormatType.cellValue, formats.items[0].type, "Item 0 type");
					Util.assertCompareValues(Excel.ConditionalFormatType.cellValue, formats.items[1].type, "Item 1 type");
					Util.assertCompareValues(Excel.ConditionalFormatType.cellValue, formats.items[2].type, "Item 2 type");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetRangeLargerThanCurrentCell_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("C3").conditionalFormats.getItemAt(0).getRangeOrNullObject();
			range.load("address");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("ConditionalFormat!3:3", range.address);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetRangeRangeSmallerThanSelection_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range1 = sheet.getRange("A3:E7").conditionalFormats.getItemAt(0).getRangeOrNullObject();
			range1.load("address");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("ConditionalFormat!3:3", range1.address);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetStopIfTrue_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("H9:H15").conditionalFormats.getItemAt(0);
			cf.load("stopIfTrue");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, cf.stopIfTrue);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetStopIfTrueFail_cvt_JSCript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0);
			cf.stopIfTrue = true;
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetPriorityBasic_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("C9:C15").conditionalFormats.getItemAt(0);
			cf.load("priority");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(0, cf.priority);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetPriorityBasic_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("D9:D15").conditionalFormats.getItemAt(0);
			cf.priority = 1;
			return ctx.sync()
				.then(function () {
					var cf2 = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("D9:D15").conditionalFormats.getItemAt(1);
					cf2.load("priority");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(1, cf2.priority);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetPriorityGreaterThanMax_cvt_JSCript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0);
			cf.priority = 200;
			return ctx.sync()
				.then(function () {
					var cf2 = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("D9:D15").conditionalFormats.getItemAt(1);
					cf2.load("priority");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(1, cf2.priority);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetPriorityNegative_cvt_JSCript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0);
			cf.priority = -1;
			return ctx.sync()
				.then(function () {
					var cf2 = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("D9:D15").conditionalFormats.getItemAt(1);
					cf2.load("priority");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(1, cf2.priority);
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetType_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("A9:A15").conditionalFormats.getItemAt(0);
			cf.load("type");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.iconSet, cf.type);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarShowValue_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0);
			cf.load("dataBarOrNullObject");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(false, cf.dataBarOrNullObject.showDataBarOnly);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarShowValue_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.showDataBarOnly = true;
			return ctx.sync()
				.then(function () {
					var cf2 = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0);
					cf2.load("dataBarOrNullObject");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, cf2.dataBarOrNullObject.showDataBarOnly);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarBarDirection_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0);
			cf.load("dataBarOrNullObject");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalDataBarDirection.context, cf.dataBarOrNullObject.barDirection);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarDirection_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.barDirection = Excel.ConditionalDataBarDirection.rightToLeft;
			return ctx.sync()
				.then(function () {
					var cf2 = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0);
					cf2.load("dataBarOrNullObject");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalDataBarDirection.rightToLeft, cf2.dataBarOrNullObject.barDirection);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarAxisFormat_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0);
			cf.load("dataBarOrNullObject");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalDataBarAxisFormat.automatic, cf.dataBarOrNullObject.axisFormat);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarAxisFormat_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.axisFormat = Excel.ConditionalDataBarAxisFormat.cellMidPoint;
			return ctx.sync()
				.then(function () {
					var cf2 = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0);
					cf2.load("dataBarOrNullObject");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalDataBarAxisFormat.cellMidPoint, cf2.dataBarOrNullObject.axisFormat);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarNoAxisColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("J9:J15").conditionalFormats.getItemAt(1);
			cf.load("dataBarOrNullObject");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("", cf.dataBarOrNullObject.axisColor);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarAxisColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("J9:J15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.axisColor = "#000001";
			return ctx.sync()
				.then(function () {
					var cf2 = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("J9:J15").conditionalFormats.getItemAt(0);
					cf2.load("dataBarOrNullObject");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#000001", cf2.dataBarOrNullObject.axisColor);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarPositiveFormatNoBorderColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var db = sheet.getRange("E9:E15").conditionalFormats.getItemAt(1).dataBarOrNullObject;
			db.load("positiveFormat");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("", db.positiveFormat.borderColor);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPositiveFormatBorderColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.positiveFormat.borderColor = "#000001";
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("positiveFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#000001", db.positiveFormat.borderColor);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPositiveFormatBorderNamedColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.positiveFormat.borderColor = "blue";
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("positiveFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#0000FF", db.positiveFormat.borderColor);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPositiveFormatRemoveBorderColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.positiveFormat.borderColor = "";
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("positiveFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("", db.positiveFormat.borderColor);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarPositiveFormatColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var db = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
			db.load("positiveFormat");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("#638EC6", db.positiveFormat.fillColor);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPositiveFormatColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.positiveFormat.fillColor = "#000001";
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("positiveFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#000001", db.positiveFormat.fillColor);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarPositiveFormatGradient_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var db = sheet.getRange("E9:E15").conditionalFormats.getItemAt(1).dataBarOrNullObject;
			db.load("positiveFormat");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, db.positiveFormat.gradientFill);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPositiveFormatGradient_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.positiveFormat.gradientFill = false;
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("positiveFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(false, db.positiveFormat.gradientFill);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarNegativeFormatColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var db = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
			db.load("negativeFormat");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("#FF0000", db.negativeFormat.fillColor);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarNegativeFormatColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.negativeFormat.fillColor = "#001000";
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("negativeFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#001000", db.negativeFormat.fillColor);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarNegativeFormatBorderColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var db = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
			db.load("negativeFormat");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("#FFC000", db.negativeFormat.borderColor);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarNegativeFormatBorderColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.negativeFormat.borderColor = "#000001";
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("negativeFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#000001", db.negativeFormat.borderColor);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarNegativeFormatBorderNamedColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.negativeFormat.borderColor = "blue";
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("negativeFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#0000FF", db.negativeFormat.borderColor);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarNegativeFormatMatchPositiveBorderColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var db = sheet.getRange("E9:E15").conditionalFormats.getItemAt(1).dataBarOrNullObject;
			db.load("negativeFormat");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, db.negativeFormat.matchPositiveBorderColor);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarNegativeFormatMatchPositiveBorderColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.negativeFormat.matchPositiveBorderColor = false;
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("negativeFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#0000FF", db.negativeFormat.borderColor);
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarNegativeFormatBorderColorSetsMatchPositiveBorderColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.negativeFormat.borderColor = "#001100";
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("negativeFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#001100", db.negativeFormat.borderColor);
							Util.assertCompareValues(false, db.negativeFormat.matchPositiveBorderColor);
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarNegativeFormatMatchPositiveFillColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var db = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
			db.load("negativeFormat");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(false, db.negativeFormat.matchPositiveFillColor);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarNegativeFormatMatchPositiveFillColor_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.positiveFormat.fillColor = "#001000";
			cf.dataBarOrNullObject.negativeFormat.matchPositiveFillColor = false;
			cf.dataBarOrNullObject.negativeFormat.fillColor = "#100000";
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("negativeFormat");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#100000", db.negativeFormat.fillColor);
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarLowerBoundRuleType_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var db = sheet.getRange("E9:E15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
			db.load("lowerBoundRule");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatRuleType.automatic, db.lowerBoundRule.type);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarLowerBoundRuleType_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F9:F15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.lowerBoundRule =
			{
				type: Excel.ConditionalFormatRuleType.number
			};
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("F9:F15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("lowerBoundRule");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalFormatRuleType.number, db.lowerBoundRule.type);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarFormulaRange_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var db = sheet.getRange("G9:G15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
			db.load("lowerBoundRule");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("ConditionalFormat!$F$9", db.lowerBoundRule.formula);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarFormulaNumeric_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var db = sheet.getRange("G9:G15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
			db.load("upperBoundRule");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("5", db.upperBoundRule.formula);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarFormulaRange_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule = {
				type: Excel.ConditionalFormatRuleType.formula,
				formula: "=ConditionalFormat!$A$1",
			};
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("I9:I15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("upperBoundRule");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalFormatRuleType.formula, db.upperBoundRule.type);
							Util.assertCompareValues("ConditionalFormat!$A$1", db.upperBoundRule.formula);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarFormulaString_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.formula,
					formula: "foobar"
				};
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("I9:I15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("upperBoundRule");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalFormatRuleType.formula, db.upperBoundRule.type);
							Util.assertCompareValues("foobar", db.upperBoundRule.formula);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarAutomaticFormula_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.automatic,
					formula: "=5"
				};
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarNumberNumeric_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.number,
					formula: <any>4
				};
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("I9:I15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("upperBoundRule");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalFormatRuleType.number, db.upperBoundRule.type);
							Util.assertCompareValues("4", db.upperBoundRule.formula);
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPercentile_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.percentile,
					formula: <any>90
				};
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("I9:I15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("upperBoundRule");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalFormatRuleType.percentile, db.upperBoundRule.type);
							Util.assertCompareValues("90", db.upperBoundRule.formula);
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPercentileOver100_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.percentile,
					formula: <any>110.5
				};
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPercentileUnder0_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.percentile,
					formula: <any>-10
				};
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPercentileNumAsString_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.percentile,
					formula: "=60.5"
				};
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("I9:I15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("upperBoundRule");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalFormatRuleType.percentile, db.upperBoundRule.type);
							Util.assertCompareValues("60.5", db.upperBoundRule.formula);
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPercentileRef_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.percentile,
					formula: "=A1"
				};
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPercent_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.percent,
					formula: <any>50
				};
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("I9:I15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("upperBoundRule");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalFormatRuleType.percent, db.upperBoundRule.type);
							Util.assertCompareValues("50", db.upperBoundRule.formula);
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPercentRef_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.percent,
					formula: "$A$1"
				};
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("I9:I15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("upperBoundRule");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalFormatRuleType.percent, db.upperBoundRule.type);
							Util.assertCompareValues("$A$1", db.upperBoundRule.formula);
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarHighestValue_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.highestValue,
				};
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("I9:I15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("upperBoundRule");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalFormatRuleType.highestValue, db.upperBoundRule.type);
							Util.assertCompareValues(null, db.upperBoundRule.formula);
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarHighestValueFormula_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.upperBoundRule =
				{
				type: Excel.ConditionalFormatRuleType.highestValue,
				formula: "=5"
				};
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarLowestValue_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("I9:I15").conditionalFormats.getItemAt(0);
			cf.dataBarOrNullObject.lowerBoundRule =
				{
					type: Excel.ConditionalFormatRuleType.lowestValue,
				};
			return ctx.sync()
				.then(function () {
					var db = ctx.workbook.worksheets.getItem("ConditionalFormat").getRange("I9:I15").conditionalFormats.getItemAt(0).dataBarOrNullObject;
					db.load("lowerBoundRule");
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalFormatRuleType.lowestValue, db.lowerBoundRule.type);
							Util.assertCompareValues(null, db.lowerBoundRule.formula);
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AddDatabarConditionalFormat_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M20:M23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.dataBar);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).dataBarOrNullObject;
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(false, cfLoaded.isNull, "isNulls");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatNumberFormat_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.numberFormat = "00.00";
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("00.00", cfLoaded.format.numberFormat, "Numberformat");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatNumberFormatClear_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.numberFormat = "00.00";
			ctx.load(cfCustom.format);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					Util.assertCompareValues("00.00", cfCustom.format.numberFormat, "Numberformat");
					cfLoaded.format.numberFormat = null;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(null, cfLoaded.format.numberFormat, "Numberformat");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatFillColor_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.fill.color = "#FF00FF";
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format.fill);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("#FF00FF", cfLoaded.format.fill.color, "Fill color");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatFillColorClear_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.fill.color = "#FF00FF";
			ctx.load(cfCustom.format.fill);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					Util.assertCompareValues("#FF00FF", cfCustom.format.fill.color, "Fill color");
					cfLoaded.format.fill.clear();
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format.fill);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(null, cfLoaded.format.fill.color, "Fill color");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatFontBold_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.font.bold = true;
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format.font);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, cfLoaded.format.font.bold, "Font Bold");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatFontBoldTrueItalicFalse_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.font.bold = true;
			cfCustom.format.font.italic = false;
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format.font);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, cfLoaded.format.font.bold, "Font Bold");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatFontBoldAndItalic_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.font.bold = true;
			cfCustom.format.font.italic = true;
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded.format.font);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, cfLoaded.format.font.bold, "Font Bold");
							Util.assertCompareValues(true, cfLoaded.format.font.italic, "Font Italic");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatFontStrikethrough_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.font.strikethrough = true;
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format.font);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, cfLoaded.format.font.strikethrough, "Font Strikethrough");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatFontBoldAndUnderline_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.font.bold = true;
			cfCustom.format.font.underline = Excel.RangeUnderlineStyle.single;
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded.format.font);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, cfLoaded.format.font.bold, "Font Bold");
							Util.assertCompareValues(Excel.ConditionalRangeFontUnderlineStyle.single, cfLoaded.format.font.underline, "Font underline");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatFontColorDefault_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format.font);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(null, cfLoaded.format.font.color, "Font Color");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatFontSetAllThenClear_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.font.bold = true;
			cfCustom.format.font.italic = true;
			cfCustom.format.font.underline = Excel.RangeUnderlineStyle.single;
			cfCustom.format.font.strikethrough = true;
			cfCustom.format.font.color = "#FF00FF";
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format.font);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, cfLoaded.format.font.bold, "Font bold");
							Util.assertCompareValues(true, cfLoaded.format.font.italic, "Font italic");
							Util.assertCompareValues(Excel.ConditionalRangeFontUnderlineStyle.single, cfLoaded.format.font.underline, "Font underline");
							Util.assertCompareValues(true, cfLoaded.format.font.strikethrough, "Font Strikethrough");
							Util.assertCompareValues("#FF00FF", cfLoaded.format.font.color, "Font color");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
							cfLoaded.format.font.clear();
							var cfLoaded2 = range.conditionalFormats.getItemAt(0).custom;
							ctx.load(cfLoaded2);
							ctx.load(cfLoaded2.format.font);
							ctx.load(cfLoaded2.rule);
							return ctx.sync()
								.then(function () {
									Util.assertCompareValues(null, cfLoaded2.format.font.bold, "Font bold");
									Util.assertCompareValues(null, cfLoaded2.format.font.italic, "Font italic");
									Util.assertCompareValues(null, cfLoaded2.format.font.underline, "Font underline");
									Util.assertCompareValues(null, cfLoaded2.format.font.strikethrough, "Font Strikethrough");
									Util.assertCompareValues(null, cfLoaded2.format.font.color, "Font color");
									Util.assertCompareValues("=M5<10", cfLoaded2.rule.formula, "formula");
								});
						})
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatBorderDifferentStyles1_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.borders.getItem(Excel.ConditionalRangeBorderIndex.edgeTop).style = Excel.ConditionalRangeBorderLineStyle.continuous;
			cfCustom.format.borders.getItem(Excel.ConditionalRangeBorderIndex.edgeTop).color = "#FF00FF";
			cfCustom.format.borders.getItem(Excel.ConditionalRangeBorderIndex.edgeBottom).style = Excel.ConditionalRangeBorderLineStyle.dash;
			cfCustom.format.borders.getItem(Excel.ConditionalRangeBorderIndex.edgeLeft).style = Excel.ConditionalRangeBorderLineStyle.dashDot;
			cfCustom.format.borders.getItem(Excel.ConditionalRangeBorderIndex.edgeRight).style = Excel.ConditionalRangeBorderLineStyle.dashDotDot;
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format.borders);
					ctx.load(cfLoaded.format.borders, "items");
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalRangeBorderLineStyle.continuous, cfLoaded.format.borders.items[0].style, "border style");
							Util.assertCompareValues(Excel.ConditionalRangeBorderLineStyle.dash, cfLoaded.format.borders.items[1].style, "border style");
							Util.assertCompareValues(Excel.ConditionalRangeBorderLineStyle.dashDot, cfLoaded.format.borders.items[2].style, "border style");
							Util.assertCompareValues(Excel.ConditionalRangeBorderLineStyle.dashDotDot, cfLoaded.format.borders.items[3].style, "border style");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomFormatBorderDifferentStyles2_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=M5<10";
			cfCustom.format.borders.top.style = Excel.ConditionalRangeBorderLineStyle.dot;
			cfCustom.format.borders.top.color = "red";
			cfCustom.format.borders.left.style = Excel.ConditionalRangeBorderLineStyle.none;
			cfCustom.format.borders.right.style = Excel.ConditionalRangeBorderLineStyle.continuous;
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.format.borders);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConditionalRangeBorderLineStyle.dot, cfLoaded.format.borders.items[0].style, "border style");
							Util.assertCompareValues(Excel.ConditionalRangeBorderLineStyle.none, cfLoaded.format.borders.items[1].style, "border style");
							Util.assertCompareValues(Excel.ConditionalRangeBorderLineStyle.none, cfLoaded.format.borders.items[2].style, "border style");
							Util.assertCompareValues(Excel.ConditionalRangeBorderLineStyle.continuous, cfLoaded.format.borders.items[3].style, "border style");
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomConditionalFormatFormulaR1C1_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			ctx.load(cf);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formulaR1C1 = "=RC<10";
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.custom, cf.type, "Type");
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("=M5<10", cfLoaded.rule.formula, "formula");
							Util.assertCompareValues("=RC<10", cfLoaded.rule.formulaR1C1, "formulaR1C1");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CustomConditionalFormatNumberRule_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
			var cfCustom = cf.customOrNullObject;
			cfCustom.rule.formula = "=20";
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).customOrNullObject;
					ctx.load(cfLoaded);
					ctx.load(cfLoaded.rule);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("=20", cfLoaded.rule.formula, "formula");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconGet_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("E25:E30").conditionalFormats.getItemAt(0);
			ctx.load(cf.iconSetOrNullObject);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[0].type);
					Util.assertCompareValues("0", cf.iconSetOrNullObject.criteria[0].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[1].type);
					Util.assertCompareValues("33", cf.iconSetOrNullObject.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[2].type);
					Util.assertCompareValues("67", cf.iconSetOrNullObject.criteria[2].formula);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconGetIconOnly_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("F25:E31").conditionalFormats.getItemAt(0);
			ctx.load(cf.iconSetOrNullObject);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, cf.iconSetOrNullObject.showIconOnly, "ShowIconOnly");
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[0].type);
					Util.assertCompareValues("0", cf.iconSetOrNullObject.criteria[0].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[1].type);
					Util.assertCompareValues("20", cf.iconSetOrNullObject.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[2].type);
					Util.assertCompareValues("40", cf.iconSetOrNullObject.criteria[2].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[3].type);
					Util.assertCompareValues("60", cf.iconSetOrNullObject.criteria[3].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[4].type);
					Util.assertCompareValues("80", cf.iconSetOrNullObject.criteria[4].formula);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconGetReverseOrder_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("G25:G30").conditionalFormats.getItemAt(0);
			ctx.load(cf.iconSetOrNullObject);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, cf.iconSetOrNullObject.reverseIconOrder, "ReverseIconOrder");
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[0].type);
					Util.assertCompareValues("0", cf.iconSetOrNullObject.criteria[0].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[1].type);
					Util.assertCompareValues("20", cf.iconSetOrNullObject.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[2].type);
					Util.assertCompareValues("40", cf.iconSetOrNullObject.criteria[2].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[3].type);
					Util.assertCompareValues("60", cf.iconSetOrNullObject.criteria[3].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[4].type);
					Util.assertCompareValues("80", cf.iconSetOrNullObject.criteria[4].formula);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconGetFormulaNumber_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var cf = sheet.getRange("H25:H30").conditionalFormats.getItemAt(0);
			ctx.load(cf.iconSetOrNullObject);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.IconSet.fourRedToBlack, cf.iconSetOrNullObject.style);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[0].type);
					Util.assertCompareValues("0", cf.iconSetOrNullObject.criteria[0].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[1].type);
					Util.assertCompareValues("20", cf.iconSetOrNullObject.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.formula, cf.iconSetOrNullObject.criteria[2].type);
					Util.assertCompareValues("ConditionalFormat!$B$6*10", cf.iconSetOrNullObject.criteria[2].formula);
					Util.assertCompareValues(Excel.IconSet.threeArrows, cf.iconSetOrNullObject.criteria[3].customIcon.set);
					Util.assertCompareValues(Excel.ConditionalIconCriterionOperator.greaterThan, cf.iconSetOrNullObject.criteria[3].operator);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.number, cf.iconSetOrNullObject.criteria[3].type);
					Util.assertCompareValues("90", cf.iconSetOrNullObject.criteria[3].formula);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconAdd_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N8");
			range.values = [[1], [2], [3], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			ctx.load(cf.iconSetOrNullObject);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[0].type);
					Util.assertCompareValues("0", cf.iconSetOrNullObject.criteria[0].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[1].type);
					Util.assertCompareValues("33", cf.iconSetOrNullObject.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[2].type);
					Util.assertCompareValues("67", cf.iconSetOrNullObject.criteria[2].formula);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetReverseOrder_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N8");
			range.values = [[1], [2], [3], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			cf.iconSetOrNullObject.reverseIconOrder = true;
			ctx.load(cf.iconSetOrNullObject);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, cf.iconSetOrNullObject.reverseIconOrder, "ReverseIconOrder");
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[0].type);
					Util.assertCompareValues("0", cf.iconSetOrNullObject.criteria[0].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[1].type);
					Util.assertCompareValues("33", cf.iconSetOrNullObject.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[2].type);
					Util.assertCompareValues("67", cf.iconSetOrNullObject.criteria[2].formula);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetShowIconOnly_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N8");
			range.values = [[1], [2], [3], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			cf.iconSetOrNullObject.showIconOnly = true;
			ctx.load(cf.iconSetOrNullObject);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, cf.iconSetOrNullObject.showIconOnly, "ShowIconOnly");
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[0].type);
					Util.assertCompareValues("0", cf.iconSetOrNullObject.criteria[0].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[1].type);
					Util.assertCompareValues("33", cf.iconSetOrNullObject.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cf.iconSetOrNullObject.criteria[2].type);
					Util.assertCompareValues("67", cf.iconSetOrNullObject.criteria[2].formula);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetCriteria_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N8");
			range.values = [[1], [2], [3], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cfLoaded = range.conditionalFormats.getItemAt(0).iconSetOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria = cfLoaded.criteria;
					criteria[1].operator = Excel.ConditionalIconCriterionOperator.greaterThan;
					criteria[1].type = Excel.ConditionalFormatIconRuleType.number;
					criteria[1].formula = "=30";
					cfLoaded.criteria = criteria;
					ctx.load(cfLoaded);
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[0].type);
					Util.assertCompareValues("0", cfLoaded.criteria[0].formula);
					Util.assertCompareValues(Excel.ConditionalIconCriterionOperator.greaterThan, cfLoaded.criteria[1].operator);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.number, cfLoaded.criteria[1].type);
					Util.assertCompareValues("30", cfLoaded.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[2].type);
					Util.assertCompareValues("67", cfLoaded.criteria[2].formula);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetNoOpOn0CriteriaExceptIcon_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N8");
			range.values = [[1], [2], [3], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cfLoaded = range.conditionalFormats.getItemAt(0).iconSetOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria = cfLoaded.criteria;
					criteria[0].operator = Excel.ConditionalIconCriterionOperator.greaterThan;
					criteria[0].type = Excel.ConditionalFormatIconRuleType.number;
					criteria[0].formula = "=30";
					criteria[0].customIcon = Excel.icons.fiveBoxes.oneFilledBox;
					cfLoaded.criteria = criteria;
					ctx.load(cfLoaded);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded.criteria));
					Util.assertCompareValues(Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, cfLoaded.criteria[0].operator);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[0].type);
					Util.assertCompareValues("0", cfLoaded.criteria[0].formula);
					Util.assertCompareValues(Excel.IconSet.fiveBoxes, cfLoaded.criteria[0].customIcon.set);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[1].type);
					Util.assertCompareValues("33", cfLoaded.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[2].type);
					Util.assertCompareValues("67", cfLoaded.criteria[2].formula);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetSomeCriteria_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N8");
			range.values = [[1], [2], [3], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cfLoaded = range.conditionalFormats.getItemAt(0).iconSetOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria = 
						[
							{ formula: "20", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent},
							{ formula: "40", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent },
							{ formula: "60", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent },
						]
					cfLoaded.criteria = criteria;
					ctx.load(cfLoaded);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded.criteria));
					Util.assertCompareValues(Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, cfLoaded.criteria[0].operator);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[0].type);
					Util.assertCompareValues("0", cfLoaded.criteria[0].formula);
					Util.assertCompareValues(Excel.IconSet.invalid, cfLoaded.criteria[0].customIcon.set);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[1].type);
					Util.assertCompareValues("40", cfLoaded.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[2].type);
					Util.assertCompareValues("60", cfLoaded.criteria[2].formula);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetCriteriaInvalidOperator_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N8");
			range.values = [[1], [2], [3], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cfLoaded = range.conditionalFormats.getItemAt(0).iconSetOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria =
						[
							{ formula: "20", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent },
							{ formula: "40", operator: Excel.ConditionalIconCriterionOperator.invalid, type: Excel.ConditionalFormatIconRuleType.percent },
							{ formula: "60", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent },
						]
					cfLoaded.criteria = criteria;
					ctx.load(cfLoaded);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetCriteriaInvalidType_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N8");
			range.values = [[1], [2], [3], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cfLoaded = range.conditionalFormats.getItemAt(0).iconSetOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria =
						[
							{ formula: "20", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent },
							{ formula: "40", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.invalid },
							{ formula: "60", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent },
						]
					cfLoaded.criteria = criteria;
					ctx.load(cfLoaded);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetSomeTooManyCriteria_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N8");
			range.values = [[1], [2], [3], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cfLoaded = range.conditionalFormats.getItemAt(0).iconSetOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria =
						[
							{ formula: "20", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent },
							{ formula: "40", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent },
							{ formula: "60", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent },
							{ formula: "80", operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, type: Excel.ConditionalFormatIconRuleType.percent },
						]
					cfLoaded.criteria = criteria;
					ctx.load(cfLoaded);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetStyleFourRating_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N9");
			range.values = [[1], [2], [3], [4], [5]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cfLoaded = range.conditionalFormats.getItemAt(0).iconSetOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria = cfLoaded.criteria;
					cfLoaded.style = Excel.IconSet.fourRating;
					ctx.load(cfLoaded);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded.criteria));
					Util.assertCompareValues(Excel.IconSet.fourRating, cfLoaded.style);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[0].type);
					Util.assertCompareValues("0", cfLoaded.criteria[0].formula);
					Util.assertCompareValues(Excel.IconSet.invalid, cfLoaded.criteria[0].customIcon.set);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[1].type);
					Util.assertCompareValues("25", cfLoaded.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[2].type);
					Util.assertCompareValues("50", cfLoaded.criteria[2].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[3].type);
					Util.assertCompareValues("75", cfLoaded.criteria[3].formula);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetStyleFiveBoxes_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N9");
			range.values = [[1], [2], [3], [4], [5]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cfLoaded = range.conditionalFormats.getItemAt(0).iconSetOrNullObject;
			ctx.load(cf);
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.iconSet, cf.type, "Type");
					var criteria = cfLoaded.criteria;
					cfLoaded.style = Excel.IconSet.fiveBoxes;
					ctx.load(cfLoaded);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded.criteria));
					Util.assertCompareValues(Excel.IconSet.fiveBoxes, cfLoaded.style);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[0].type);
					Util.assertCompareValues("0", cfLoaded.criteria[0].formula);
					Util.assertCompareValues(Excel.IconSet.invalid, cfLoaded.criteria[0].customIcon.set);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[1].type);
					Util.assertCompareValues("20", cfLoaded.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[2].type);
					Util.assertCompareValues("40", cfLoaded.criteria[2].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[3].type);
					Util.assertCompareValues("60", cfLoaded.criteria[3].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[4].type);
					Util.assertCompareValues("80", cfLoaded.criteria[4].formula);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IconSetSetStyleFiveBoxesThenFour_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("N5:N9");
			range.values = [[1], [2], [3], [4], [5]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cfLoaded = range.conditionalFormats.getItemAt(0).iconSetOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria = cfLoaded.criteria;
					cfLoaded.style = Excel.IconSet.fiveBoxes;
					ctx.load(cfLoaded);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded.criteria));
					Util.assertCompareValues(Excel.IconSet.fiveBoxes, cfLoaded.style);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[0].type);
					Util.assertCompareValues("0", cfLoaded.criteria[0].formula);
					Util.assertCompareValues(Excel.IconSet.invalid, cfLoaded.criteria[0].customIcon.set);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[1].type);
					Util.assertCompareValues("20", cfLoaded.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[2].type);
					Util.assertCompareValues("40", cfLoaded.criteria[2].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[3].type);
					Util.assertCompareValues("60", cfLoaded.criteria[3].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[4].type);
					Util.assertCompareValues("80", cfLoaded.criteria[4].formula);
					cfLoaded.style = Excel.IconSet.fourTrafficLights;
					ctx.load(cfLoaded);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded.criteria));
					Util.assertCompareValues(Excel.IconSet.fourTrafficLights, cfLoaded.style);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[0].type);
					Util.assertCompareValues("0", cfLoaded.criteria[0].formula);
					Util.assertCompareValues(Excel.IconSet.invalid, cfLoaded.criteria[0].customIcon.set);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[1].type);
					Util.assertCompareValues("25", cfLoaded.criteria[1].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[2].type);
					Util.assertCompareValues("50", cfLoaded.criteria[2].formula);
					Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.percent, cfLoaded.criteria[3].type);
					Util.assertCompareValues("75", cfLoaded.criteria[3].formula);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AddColorScaleConditionalFormat_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "N20:N23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).colorScaleOrNullObject;
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(false, cfLoaded.isNull, "isNulls");
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_ColorScalesSetLowestValueTypeToMaxFail_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("O5:O9");
			range.values = [[1], [2], [3], [4], [5]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			var cfLoaded = range.conditionalFormats.getItemAt(0).colorScaleOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria = cfLoaded.criteria;
					criteria.maximum = criteria.minimum;
					cfLoaded.criteria = criteria;
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_ColorScalesChangeMinType_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("O5:O9");
			range.values = [[1], [2], [3], [4], [5]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			var cfLoaded = range.conditionalFormats.getItemAt(0).colorScaleOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria = cfLoaded.criteria;
					criteria.minimum.type = Excel.ConditionalFormatColorCriterionType.number;
					criteria.minimum.formula = "2";
					cfLoaded.criteria = criteria;
					ctx.load(cfLoaded);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded));
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.number, cfLoaded.criteria.minimum.type);
					Util.assertCompareValues("2", cfLoaded.criteria.minimum.formula);
					Util.assertCompareValues("#FF7128", cfLoaded.criteria.minimum.color);
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.highestValue, cfLoaded.criteria.maximum.type);
					Util.assertCompareValues(null, cfLoaded.criteria.maximum.formula);
					Util.assertCompareValues("#FFEF9C", cfLoaded.criteria.maximum.color);
					ctx.load(cfLoaded);
					return ctx.sync();
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_ColorScalesChangeMaxType_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("O5:O9");
			range.values = [[1], [2], [3], [4], [5]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			var cfLoaded = range.conditionalFormats.getItemAt(0).colorScaleOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria = cfLoaded.criteria;
					criteria.maximum.type = Excel.ConditionalFormatColorCriterionType.percentile;
					criteria.maximum.formula = "30";
					criteria.maximum.color = "#0000FF";
					cfLoaded.criteria = criteria;
					ctx.load(cfLoaded);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded));
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.percentile, cfLoaded.criteria.maximum.type);
					Util.assertCompareValues("30", cfLoaded.criteria.maximum.formula);
					Util.assertCompareValues("#0000FF", cfLoaded.criteria.maximum.color);
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.lowestValue, cfLoaded.criteria.minimum.type);
					Util.assertCompareValues(null, cfLoaded.criteria.minimum.formula);
					Util.assertCompareValues("#FF7128", cfLoaded.criteria.minimum.color);
					ctx.load(cfLoaded);
					return ctx.sync();
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_ColorScalesChangeMaxTypeFormula_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("O5:O9");
			range.values = [[1], [2], [3], [4], [5]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			var cfLoaded = range.conditionalFormats.getItemAt(0).colorScaleOrNullObject;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					var criteria = cfLoaded.criteria;
					criteria.maximum.type = Excel.ConditionalFormatColorCriterionType.formula;
					criteria.maximum.formula = "=4";
					criteria.maximum.color = "#0000FF";
					cfLoaded.criteria = criteria;
					ctx.load(cfLoaded);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded));
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.formula, cfLoaded.criteria.maximum.type);
					Util.assertCompareValues("4", cfLoaded.criteria.maximum.formula);
					Util.assertCompareValues("#0000FF", cfLoaded.criteria.maximum.color);
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.lowestValue, cfLoaded.criteria.minimum.type);
					Util.assertCompareValues(null, cfLoaded.criteria.minimum.formula);
					Util.assertCompareValues("#FF7128", cfLoaded.criteria.minimum.color);
					ctx.load(cfLoaded);
					return ctx.sync();
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_ColorScalesChangeMidType_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("O5:O9");
			range.values = [[1], [2], [3], [4], [5]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			var cfLoaded = range.conditionalFormats.getItemAt(0).colorScaleOrNullObject;
			var criteria = {
				minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "#FF0000" },
				midpoint: { formula: "30", type: Excel.ConditionalFormatColorCriterionType.percent, color: "#AAAAFF" },
				maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "#00FF00" }
			};
			cfLoaded.criteria = criteria;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded));
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.lowestValue, cfLoaded.criteria.minimum.type);
					Util.assertCompareValues(null, cfLoaded.criteria.minimum.formula);
					Util.assertCompareValues("#FF0000", cfLoaded.criteria.minimum.color);
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.percent, cfLoaded.criteria.midpoint.type);
					Util.assertCompareValues("30", cfLoaded.criteria.midpoint.formula);
					Util.assertCompareValues("#AAAAFF", cfLoaded.criteria.midpoint.color);
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.highestValue, cfLoaded.criteria.maximum.type);
					Util.assertCompareValues(null, cfLoaded.criteria.maximum.formula);
					Util.assertCompareValues("#00FF00", cfLoaded.criteria.maximum.color);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_ColorScalesFrom3to2_cvt_JScript_V16() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("ConditionalFormat");
			var range = sheet.getRange("O5:O9");
			range.values = [[1], [2], [3], [4], [5]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			ctx.load(cf);
			var cfLoaded = range.conditionalFormats.getItemAt(0).colorScaleOrNullObject;
			var criteria = {
				minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "#FF0000" },
				midpoint: { formula: "30", type: Excel.ConditionalFormatColorCriterionType.percent, color: "#AAAAFF" },
				maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "#00FF00" }
			};
			cfLoaded.criteria = criteria;
			ctx.load(cfLoaded);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.colorScale, cf.type, "Type");
					var criteriaNew = {
						minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "#FF0000" },
						midpoint: null,
						maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "#00FF00" }
					};
					cfLoaded.criteria = criteriaNew;
					ctx.load(cfLoaded);
				})
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cfLoaded));
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.lowestValue, cfLoaded.criteria.minimum.type);
					Util.assertCompareValues(null, cfLoaded.criteria.minimum.formula);
					Util.assertCompareValues("#FF0000", cfLoaded.criteria.minimum.color);
					Util.assertCompareValues(null, cfLoaded.criteria.midpoint);
					Util.assertCompareValues(Excel.ConditionalFormatColorCriterionType.highestValue, cfLoaded.criteria.maximum.type);
					Util.assertCompareValues(null, cfLoaded.criteria.maximum.formula);
					Util.assertCompareValues("#00FF00", cfLoaded.criteria.maximum.color);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TopBottomAdd_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "O20:O23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.topBottom);
			ctx.load(cf);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.topBottom, cf.type, "Type");
					var cfLoaded = range.conditionalFormats.getItemAt(0).topBottomOrNullObject;
					cfLoaded.format.fill.color = "#FF00FF";
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(false, cfLoaded.isNull, "isNulls");
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TopBottomSetPercent_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "O20:O23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.topBottom);
			ctx.load(cf);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.topBottom, cf.type, "Type");
					var cfLoaded = range.conditionalFormats.getItemAt(0).topBottomOrNullObject;
					cfLoaded.format.fill.color = "#FFFF00";
					cfLoaded.rule = { type: Excel.ConditionalTopBottomCriterionType.topPercent, rank: 10 };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalTopBottomCriterionType.topPercent, cfLoaded.rule.type, "Percent");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TopBottomSetRank2_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "O20:O23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.topBottom);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).topBottomOrNullObject;
					cfLoaded.format.fill.color = "#FF0000";
					cfLoaded.rule = { type: Excel.ConditionalTopBottomCriterionType.topItems, rank: 2 };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(2, cfLoaded.rule.rank, "Rank");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TopBottomSetBottom2_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "O20:O23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], [15]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.topBottom);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).topBottomOrNullObject;
					cfLoaded.format.font.bold = true;
					cfLoaded.rule = { type: Excel.ConditionalTopBottomCriterionType.bottomItems, rank: 2 };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalTopBottomCriterionType.bottomItems, cfLoaded.rule.type, "Rank");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TomBottomRankTooHigh_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "O20:O23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], [15]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.topBottom);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).topBottomOrNullObject;
					cfLoaded.rule = { type: Excel.ConditionalTopBottomCriterionType.topItems, rank: 1500 };
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TomBottomPercentTooHigh_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "O20:O23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], [15]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.topBottom);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).topBottomOrNullObject;
					cfLoaded.rule = { type: Excel.ConditionalTopBottomCriterionType.bottomPercent, rank: 150 };
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TomBottomRankTooLow_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "O20:O23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], [15]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.topBottom);
			ctx.load(cf);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.topBottom, cf.type, "Type");
					var cfLoaded = range.conditionalFormats.getItemAt(0).topBottomOrNullObject;
					cfLoaded.rule = { type: Excel.ConditionalTopBottomCriterionType.topItems, rank: -10 };
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AverageSetBelow_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "P20:P23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).presetOrNullObject;
					cfLoaded.format.fill.color = "#FF00FF";
					cfLoaded.rule = { criterion: Excel.ConditionalFormatPresetCriterion.belowAverage };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalFormatPresetCriterion.belowAverage, cfLoaded.rule.criterion, "Criteria");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AverageSetAboveOrEqual_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "P20:P23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).presetOrNullObject;
					cfLoaded.format.fill.color = "#FF00FF";
					cfLoaded.rule = { criterion: Excel.ConditionalFormatPresetCriterion.equalOrAboveAverage };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalFormatPresetCriterion.equalOrAboveAverage, cfLoaded.rule.criterion, "Criteria");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AverageSet2StdevAbove_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "P20:P23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [5], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			ctx.load(cf);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.presetCriteria, cf.type, "Type");
					var cfLoaded = range.conditionalFormats.getItemAt(0).presetOrNullObject;
					cfLoaded.format.fill.color = "#FF00FF";
					cfLoaded.rule = { criterion: Excel.ConditionalFormatPresetCriterion.twoStdDevAboveAverage };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalFormatPresetCriterion.twoStdDevAboveAverage, cfLoaded.rule.criterion, "Criteria");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_UniqueAdd_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "Q20:Q23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).presetOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					cfLoaded.rule = { criterion: Excel.ConditionalFormatPresetCriterion.uniqueValues };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalFormatPresetCriterion.uniqueValues, cfLoaded.rule.criterion, "Unique Values");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_UniqueSetDuplicate_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "Q20:Q23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [20], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			ctx.load(cf);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.presetCriteria, cf.type, "Type");
					var cfLoaded = range.conditionalFormats.getItemAt(0).presetOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					cfLoaded.rule = { criterion: Excel.ConditionalFormatPresetCriterion.duplicateValues };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalFormatPresetCriterion.duplicateValues, cfLoaded.rule.criterion, "Duplicate Values");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_PresetBlankAdd_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "R20:R23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [""], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).presetOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalFormatPresetCriterion.blanks, cfLoaded.rule.criterion, "Criteria");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_PresetNonBlank_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "R20:R23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [""], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).presetOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					cfLoaded.rule = { criterion: Excel.ConditionalFormatPresetCriterion.nonBlanks };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalFormatPresetCriterion.nonBlanks, cfLoaded.rule.criterion, "Criteria");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_PresetError_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "R20:R23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [""], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).presetOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					cfLoaded.rule = { criterion: Excel.ConditionalFormatPresetCriterion.errors };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalFormatPresetCriterion.errors, cfLoaded.rule.criterion, "Criteria");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_PresetNonErrors_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "R20:R23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [""], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).presetOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					cfLoaded.rule = { criterion: Excel.ConditionalFormatPresetCriterion.nonErrors };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalFormatPresetCriterion.nonErrors, cfLoaded.rule.criterion, "Criteria");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_PresetTimeToday_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "R20:R23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [""], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			ctx.load(cf);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.presetCriteria, cf.type, "Type");
					var cfLoaded = range.conditionalFormats.getItemAt(0).presetOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					cfLoaded.rule = { criterion: Excel.ConditionalFormatPresetCriterion.today };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalFormatPresetCriterion.today, cfLoaded.rule.criterion, "Criteria");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TextContainsAdd_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "S20:S23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], ["Text"], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.containsText);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).textComparisonOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalTextOperator.contains, cfLoaded.rule.operator, "Operator");
							Util.assertCompareValues("Text", cfLoaded.rule.text, "Text");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TextNotContains_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "S20:S23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], ["Text"], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.containsText);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).textComparisonOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					cfLoaded.rule = { operator: Excel.ConditionalTextOperator.notContains, text: "Text" };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalTextOperator.notContains, cfLoaded.rule.operator, "Operator");
							Util.assertCompareValues("Text", cfLoaded.rule.text, "Text");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TextChangeText_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "S20:S23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], ["Text"], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.containsText);
			ctx.load(cf);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.containsText, cf.type, "Type");
					var cfLoaded = range.conditionalFormats.getItemAt(0).textComparisonOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					cfLoaded.rule = { operator: Excel.ConditionalTextOperator.contains, text: "foo" };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalTextOperator.contains, cfLoaded.rule.operator, "Operator");
							Util.assertCompareValues("foo", cfLoaded.rule.text, "Text");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_TextChangeTextFormula_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "S20:S23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], ["Text"], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.containsText);
			ctx.load(cf);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.containsText, cf.type, "Type");
					var cfLoaded = range.conditionalFormats.getItemAt(0).textComparisonOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					cfLoaded.rule = { operator: Excel.ConditionalTextOperator.contains, text: "=$B$3" };
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(Excel.ConditionalTextOperator.contains, cfLoaded.rule.operator, "Operator");
							Util.assertCompareValues("=$B$3", cfLoaded.rule.text, "Text");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CellValueBetweenAdd_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "T20:T23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], ["Text"], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).cellValueOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(false, cfLoaded.isNull, "isNulls");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CellValueEqualTo_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "T20:T23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], ["Text"], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).cellValueOrNullObject;
					cfLoaded.format.fill.color = "#00FFFF";
					cfLoaded.rule = { operator: Excel.ConditionalCellValueOperator.equalTo, formula1: "=\"foo\"", formula2: null }
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(false, cfLoaded.isNull, "isNulls");
							Util.assertCompareValues(Excel.ConditionalCellValueOperator.equalTo, cfLoaded.rule.operator, "Operator");
							Util.assertCompareValues("=\"foo\"", cfLoaded.rule.formula1, "Formula1");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CellValueNotBetween_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "T20:T23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [8], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).cellValueOrNullObject;
					cfLoaded.format.fill.color = "#00FF00";
					cfLoaded.rule = { operator: Excel.ConditionalCellValueOperator.notBetween, formula1: "=3", formula2: "=10" }
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(false, cfLoaded.isNull, "isNulls");
							Util.assertCompareValues(Excel.ConditionalCellValueOperator.notBetween, cfLoaded.rule.operator, "Operator");
							Util.assertCompareValues("=3", cfLoaded.rule.formula1, "Formula1");
							Util.assertCompareValues("=10", cfLoaded.rule.formula2, "Formula2");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CellValueGreaterThan_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "T20:T23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [8], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).cellValueOrNullObject;
					cfLoaded.format.fill.color = "#00FF00";
					cfLoaded.rule = { operator: Excel.ConditionalCellValueOperator.greaterThan, formula1: "=5", formula2: null }
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(false, cfLoaded.isNull, "isNulls");
							Util.assertCompareValues(Excel.ConditionalCellValueOperator.greaterThan, cfLoaded.rule.operator, "Operator");
							Util.assertCompareValues("=5", cfLoaded.rule.formula1, "Formula1");
							Util.assertCompareValues(null, cfLoaded.rule.formula2, "Formula2");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CellValueLessThanOrEqual_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "T20:T23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [8], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);
			ctx.load(cf);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.ConditionalFormatType.cellValue, cf.type, "Type");
					var cfLoaded = range.conditionalFormats.getItemAt(0).cellValueOrNullObject;
					cfLoaded.format.fill.color = "#00FF00";
					cfLoaded.rule = { operator: Excel.ConditionalCellValueOperator.lessThanOrEqual, formula1: "=5", formula2: null }
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(false, cfLoaded.isNull, "isNulls");
							Util.assertCompareValues(Excel.ConditionalCellValueOperator.lessThanOrEqual, cfLoaded.rule.operator, "Operator");
							Util.assertCompareValues("=5", cfLoaded.rule.formula1, "Formula1");
							Util.assertCompareValues(null, cfLoaded.rule.formula2, "Formula2");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_CellValueBetween_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "T20:T23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [8], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);
			return ctx.sync()
				.then(function () {
					var cfLoaded = range.conditionalFormats.getItemAt(0).cellValueOrNullObject;
					cfLoaded.format.fill.color = "#00FF00";
					cfLoaded.rule = { operator: Excel.ConditionalCellValueOperator.between, formula1: "=5", formula2: "=10" }
					ctx.load(cfLoaded);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfLoaded));
							Util.assertCompareValues(false, cfLoaded.isNull, "isNulls");
							Util.assertCompareValues(Excel.ConditionalCellValueOperator.between, cfLoaded.rule.operator, "Operator");
							Util.assertCompareValues("=5", cfLoaded.rule.formula1, "Formula1");
							Util.assertCompareValues("=10", cfLoaded.rule.formula2, "Formula2");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_PriorityToFront_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "U20:U23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [8], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cf2 = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			var cf3 = range.conditionalFormats.add(Excel.ConditionalFormatType.dataBar);
			return ctx.sync()
				.then(function () {
					var cfDataBar = range.conditionalFormats.getItemAt(2);
					cfDataBar.priority = 0;
					var cfDataBarAfterPriChange = range.conditionalFormats.getItemAt(0);
					ctx.load(cfDataBarAfterPriChange);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfDataBarAfterPriChange));
							Util.assertCompareValues(0, cfDataBarAfterPriChange.priority, "Priority");
							Util.assertCompareValues(Excel.ConditionalFormatType.dataBar, cfDataBarAfterPriChange.type, "Type");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_PriorityToEnd_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "U20:U23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [8], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cf2 = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			var cf3 = range.conditionalFormats.add(Excel.ConditionalFormatType.dataBar);
			return ctx.sync()
				.then(function () {
					var cfIconSet = range.conditionalFormats.getItemAt(0);
					cfIconSet.priority = 2;
					var cfIconSetAfterPriChange = range.conditionalFormats.getItemAt(2);
					ctx.load(cfIconSetAfterPriChange);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfIconSetAfterPriChange));
							Util.assertCompareValues(2, cfIconSetAfterPriChange.priority, "Priority");
							Util.assertCompareValues(Excel.ConditionalFormatType.iconSet, cfIconSetAfterPriChange.type, "Type");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_PriorityTopToMiddle_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "U20:U23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [8], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cf2 = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			var cf3 = range.conditionalFormats.add(Excel.ConditionalFormatType.dataBar);
			var cf4 = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			var cf5 = range.conditionalFormats.add(Excel.ConditionalFormatType.topBottom);
			return ctx.sync()
				.then(function () {
					var cfIconSet = range.conditionalFormats.getItemAt(0);
					cfIconSet.priority = 2;
					var cfIconSetAfterPriChange = range.conditionalFormats.getItemAt(2);
					ctx.load(cfIconSetAfterPriChange);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfIconSetAfterPriChange));
							Util.assertCompareValues(2, cfIconSetAfterPriChange.priority, "Priority");
							Util.assertCompareValues(Excel.ConditionalFormatType.iconSet, cfIconSetAfterPriChange.type, "Type");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_PriorityBackToMiddle_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "U20:U23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [8], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
			var cf2 = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);
			var cf3 = range.conditionalFormats.add(Excel.ConditionalFormatType.dataBar);
			var cf4 = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			var cf5 = range.conditionalFormats.add(Excel.ConditionalFormatType.topBottom);
			return ctx.sync()
				.then(function () {
					var cfTopBottom = range.conditionalFormats.getItemAt(4);
					cfTopBottom.priority = 2;
					var cfTopBottomAfterPriChange = range.conditionalFormats.getItemAt(2);
					ctx.load(cfTopBottomAfterPriChange);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cfTopBottomAfterPriChange));
							Util.assertCompareValues(2, cfTopBottomAfterPriChange.priority, "Priority");
							Util.assertCompareValues(Excel.ConditionalFormatType.topBottom, cfTopBottomAfterPriChange.type, "Type");
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_IdAfterAdd_cvt_JScript_V16() {
		var sheetName = "ConditionalFormat";
		var rangeAddress = "U20:U23";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.values = [[1], [8], [1], ["foo"]];
			range.conditionalFormats.clearAll();
			var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			ctx.load(cf);
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment(JSON.stringify(cf));
					cf.stopIfTrue = true;
					ctx.load(cf);
					var cfpreset = cf.presetOrNullObject;
					cfpreset.format.fill.color = "#00FF00";
					cfpreset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.aboveAverage };
					ctx.load(cfpreset);
					return ctx.sync()
						.then(function () {
							RichApiTest.log.comment(JSON.stringify(cf));
							RichApiTest.log.comment(JSON.stringify(cfpreset));
						});
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
 module ExcelTest {
	Excel.Script._CustomFunctionSettings = {
		resultSetterDelayMillis: 50 
	};
	Excel.Script.CustomFunctions = {
		"Microsoft.Office.Test": {
			"addThreeNumbers": {
				call: addThreeNumbers,
				description: "Adds three numbers",
				helpUrl: "http://dev.office.com",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
					resultDimensionality: Excel.CustomFunctionDimensionality.scalar,
				},
				parameters: [
					{
						name: "a",
						description: "First",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
					{
						name: "b",
						description: "Second",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
					{
						name: "c",
						description: "Third",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
				],
				options: {
					batch: false,
					stream: false,
				}
			},
			"AddArrayNumbersAndNumber": {
				call: AddArrayNumbersAndNumber,
				description: "Adds numbers in a range and a number in a cell",
				helpUrl: "http://dev.office.com",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
					resultDimensionality: Excel.CustomFunctionDimensionality.scalar,
				},
				parameters: [
					{
						name: "array",
						description: "First",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.matrix,
					},
					{
						name: "number",
						description: "Second",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
				],
				options: {
					batch: false,
					stream: false,
				}
			},
			"CountTest1": {
				call: () => 0,
				description: "Some description",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
				},
				parameters: [],
			},
			"CountTest2": {
				call: () => 0,
				description: "Some description",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
				},
				parameters: [],
			},
			"GetTest": {
				call: (a1, b2) => 0,
				description: "Some description",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
				},
				parameters: [
					{
						name: "a1",
						description: "First",
						valueType: Excel.CustomFunctionValueType.boolean,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
					{
						name: "b2",
						description: "Second",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
				],
			},
			"NoParamsTest": {
				call: () => 0,
				description: "Some description",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
				},
				parameters: [],
			},
			"ReturnArrayNumbers": {
				call: ReturnArrayNumbers,
				description: "Take numbers in a range and return those numbers",
				helpUrl: "http://dev.office.com",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
					resultDimensionality: Excel.CustomFunctionDimensionality.matrix,
				},
				parameters: [
					{
						name: "array",
						description: "First",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.matrix,
					},
				],
				options: {
					batch: false,
					stream: false,
				}
			},
			"errorOut": {
				call: errorOut,
				description: "Errors out",
				helpUrl: "http://dev.office.com",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
					resultDimensionality: Excel.CustomFunctionDimensionality.scalar,
				},
				parameters: [
					{
						name: "how",
						description: "'throw' | 'promise'",
						valueType: Excel.CustomFunctionValueType.string,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
				],
			},
			"add2": {
				call: add2Batch,
				description: "Adds two numbers",
				helpUrl: "http://dev.office.com",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
					resultDimensionality: Excel.CustomFunctionDimensionality.scalar,
				},
				parameters: [
					{
						name: "a",
						description: "First",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
					{
						name: "b",
						description: "Second",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
				],
				options: {
					batch: true,
					stream: false,
				}
			},
			"incrementStream": {
				call: incrementStreamBatch,
				description: "Streams incremented values",
				helpUrl: "http://dev.office.com",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
					resultDimensionality: Excel.CustomFunctionDimensionality.scalar,
				},
				parameters: [
					{
						name: "init",
						description: "Initial value",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
					{
						name: "step",
						description: "Incremental step",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
					{
						name: "frequency",
						description: "Frequency of increments in milliseconds",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
				],
				options: {
					batch: true,
					stream: true,
				}
			},
			"incrementStreamCancelable": {
				call: incrementStreamCancelable,
				description: "Provide random numbers continuously",
				helpUrl: "http://dev.office.com",
				result: {
					resultType: Excel.CustomFunctionValueType.number,
					resultDimensionality: Excel.CustomFunctionDimensionality.scalar,
				},
				parameters: [
					{
						name: "init",
						description: "Initial value",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
					{
						name: "step",
						description: "Incremental step",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
					{
						name: "frequency",
						description: "Frequency of increments in milliseconds",
						valueType: Excel.CustomFunctionValueType.number,
						valueDimensionality: Excel.CustomFunctionDimensionality.scalar,
					},
				],
				options: {
					batch: false,
					stream: true,
					cancelable: true,
				}
			},
		}, 
	};
	export function addThreeNumbers(a, b, c) {
		return a + b + c;
	}
	export function AddArrayNumbersAndNumber(array: Array<Array<any>>, num: number) {
		let sum = 0;
		let i = 0;
		let j = 0;
		for (i = 0; i < array.length; ++i) {
			for (j = 0; j < array[i].length; ++j) {
				sum += array[i][j];
			}
		}
		return sum;
	}
	export function ReturnArrayNumbers(unused: any) {
		var items = [
			[1, 2],
			[3, 4],
			[5, 6]
		];
		return items;
	}
	export function errorOut(how: string) {
		if (how === 'throw') {
			throw { prop1: "Jabberwocky thrown" };
		}
		else if (how === 'promise') {
			return OfficeExtension.Promise.reject({ prop1: "Jabberwocky rejected" });
		}
		return undefined;
	}
	
	export function add2Batch(argsArray: Array<Array<any>>) {
		let resultArray = [];
		for (let i: number = 0; i < argsArray.length; i++) {
			let args = argsArray[i];
			let a = args[0];
			let b = args[1];
			let r = a + b;
			resultArray.push(r);
		}
		
		return resultArray;
	}
	
	export function incrementStream(init: number, step: number, frequency: number, invocationContext: Excel.InvocationContext): number {
		let currentValue = init;
		let interval = setInterval(() => {
			invocationContext.setResult(currentValue);
			currentValue += step;
		},
			frequency
		);
		return interval;
	}
	export function incrementStreamBatch(argsArray: Array<Array<any>>) {
		for (let i = 0; i < argsArray.length; i++) {
			let args = argsArray[i];
			let init = args[0];
			let step = args[1];
			let frequency = args[2];
			let invocationContext = args[3];
			incrementStream(init, step, frequency, invocationContext);
		}
	}
	
	export function incrementStreamCancelable(init: number, step: number, frequency: number, invocationContext: Excel.InvocationContext) {
		let interval = incrementStream(init, step, frequency, invocationContext);
		invocationContext.onCanceled = (() => {
			clearInterval(interval);
		});
	}
	export const expectedTimeoutMilliseconds: number = 10000;
	export async function test_CustomFunctions_Add_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			const funcName: string = "Microsoft.Office.Test.addThreeNumbers";
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			ctx.load(func);
			await ctx.sync();
			RichApiTest.log.comment("name=" + func.name);
			RichApiTest.log.comment("description=" + func.description);
		});
	}
	export async function test_CustomFunctions_SetFormulas2_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			const funcName: string = "Microsoft.Office.Test.addThreeNumbers";
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			let arrayOfFormulas =  [
				['=' + funcName + '(1, 2, 3)'],
				['=' + funcName + '(2, 4, 6)'],
			];
			await customFunctions_Execute(ctx, arrayOfFormulas, expectedTimeoutMilliseconds);
		});
	}
	export async function test_CustomFunctions_SetFormulas5_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			const funcName: string = "Microsoft.Office.Test.addThreeNumbers";
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			let arrayOfFormulas  = [
				['=' + funcName + '(1, 2, 3)'],
				['=' + funcName + '(2, 4, 6)'],
				['=' + funcName + '(5, 7, 9)'],
				['=' + funcName + '(10, 20, 30)'],
				['=' + funcName + '(5, 15, 25)'],
			];
			await customFunctions_Execute(ctx, arrayOfFormulas, expectedTimeoutMilliseconds);
		});
	}
	export async function test_CustomFunctions_ErrorOutThrow_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			const funcName: string = "Microsoft.Office.Test.errorOut";
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			let arrayOfFormulas = [
				['=' + funcName + '("throw")'],
			];
			await customFunctions_Execute(ctx, arrayOfFormulas, expectedTimeoutMilliseconds);
		});
	}
	export async function test_CustomFunctions_ErrorOutPromise_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			const funcName: string = "Microsoft.Office.Test.errorOut";
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			let arrayOfFormulas = [
				['=' + funcName + '("promise")'],
			];
			await customFunctions_Execute(ctx, arrayOfFormulas, expectedTimeoutMilliseconds);
		});
	}
	export async function test_CustomFunctions_Batch_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			const funcName: string = "Microsoft.Office.Test.add2";
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			let arrayOfFormulas = [
				['=' + funcName + '(1, 2)'],
				['=' + funcName + '(2, 4)'],
				['=' + funcName + '(5, 7)'],
				['=' + funcName + '(10, 20)'],
				['=' + funcName + '(5, 15)'],
			];
			await customFunctions_Execute(ctx, arrayOfFormulas, expectedTimeoutMilliseconds);
		});
	}
	export async function test_CustomFunctions_BatchStream_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			const funcName: string = "Microsoft.Office.Test.incrementStream";
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			let init: number = 100;
			let range: Excel.Range = ctx.workbook.worksheets.getItem('Sheet1').getRange('D1:D5');
			range.formulas = [
				['=' + funcName + '(1, 1, 1000)'],
				['=' + funcName + '(10, 5, 1500)'],
				['=' + funcName + '(' + init +', 10, 2000)'],
				['=' + funcName + '(1000, 100, 3000)'],
				['=' + funcName + '(10000, 111, 4000)'],
			];
			await ctx.sync();
			RichApiTest.log.comment("Wait for 5 second");
			await OfficeExtension.Utility._createTimeoutPromise(5000);
			let rangeToGet: Excel.Range = ctx.workbook.worksheets.getItem('Sheet1').getRange('D3');
			ctx.load(rangeToGet, "values");
			await ctx.sync();
			let value: number = rangeToGet.values[0][0];
			RichApiTest.log.comment("Value=" + value);
			Util.assert(value > init, "At this point, streaming value should be greater than initial value.");
		});
	}
	export async function test_CustomFunctions_CancellableStream_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			const funcName: string = "Microsoft.Office.Test.incrementStreamCancelable";
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			let init: number = 1;
			let range: Excel.Range = ctx.workbook.worksheets.getItem('Sheet1').getRange('E1:E2');
			range.formulas = [
				['=' + funcName + '(' + init + ', 1, 1000)'],
				['=' + funcName + '(10, 5, 1500)'],
			];
			await ctx.sync();
			let rangeToDelete: Excel.Range = ctx.workbook.worksheets.getItem('Sheet1').getRange('E2');
			rangeToDelete.delete(Excel.DeleteShiftDirection.up);
			await ctx.sync();
			RichApiTest.log.comment("Wait for 5 second");
			await OfficeExtension.Utility._createTimeoutPromise(5000);
			let rangeToGet: Excel.Range = ctx.workbook.worksheets.getItem('Sheet1').getRange('E1');
			ctx.load(rangeToGet, "values");
			await ctx.sync();
			let value: number = rangeToGet.values[0][0];
			RichApiTest.log.comment("Value=" + value);
			Util.assert(value > init, "At this point, streaming value should be greater than initial value.");
		});
	}
	export async function test_CustomFunctions_DimMatrixParamAdd_cvt_JScript_V11CustomFunctions() {
		const sheetName: string = 'Sheet1';
		await Excel.run(async (ctx) => {
			await Util.clearSheetBeforePromise(ctx, sheetName);
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add("Microsoft.Office.Test.AddArrayNumbersAndNumber");
			ctx.load(func);
			await ctx.sync();
			RichApiTest.log.comment("name=" + func.name);
			RichApiTest.log.comment("description=" + func.description);
			Util.assertCompareValues(Excel.CustomFunctionDimensionality.matrix, func.parameters[0].valueDimensionality, "dimensionality");
		});
	}
	export async function test_CustomFunctions_DimMatrixParamSetFormulas_cvt_JScript_V11CustomFunctions() {
		const sheetName: string = 'Sheet1';
		await Excel.run(async (ctx) => {
			const funcName: string = "Microsoft.Office.Test.AddArrayNumbersAndNumber";
			await Util.clearSheetBeforePromise(ctx, sheetName);
			
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			let rangeToRead: Excel.Range = ctx.workbook.worksheets.getItem(sheetName).getRange('A1:B2');
			rangeToRead.values = [[1, 2], [3, 4]];
			ctx.load(rangeToRead, "address");
			await ctx.sync();
			let range: Excel.Range = ctx.workbook.worksheets.getItem(sheetName).getRange('D1:D2');
			range.formulas = [['=' + funcName + '(' + rangeToRead.address + ', 10)'], ['=' + funcName + '(' + rangeToRead.address + ', 100)']];
			await ctx.sync();
		});
	}
	export async function test_CustomFunctions_DimMatrixReturnAdd_cvt_JScript_V11CustomFunctions() {
		const sheetName: string = 'Sheet1';
		await Excel.run(async (ctx) => {
			await Util.clearSheetBeforePromise(ctx, sheetName);
			
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add("Microsoft.Office.Test.ReturnArrayNumbers");
			ctx.load(func);
			await ctx.sync();
			RichApiTest.log.comment("name=" + func.name);
			RichApiTest.log.comment("description=" + func.description);
			Util.assertCompareValues(Excel.CustomFunctionDimensionality.matrix, func.resultDimensionality, "dimensionality");
		});
	}
	export async function test_CustomFunctions_DimMatrixReturnSetFormulas_cvt_JScript_V11CustomFunctions() {
		const sheetName: string = 'Sheet1';
			await Excel.run(async (ctx) => {
				const funcName: string = "Microsoft.Office.Test.ReturnArrayNumbers";
				await Util.clearSheetBeforePromise(ctx, sheetName);
				
				let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
				let rangeToRead: Excel.Range = ctx.workbook.worksheets.getItem(sheetName).getRange('A1:B2');
				rangeToRead.values = [[1, 2], [3, 4]];
				ctx.load(rangeToRead, "address");
				await ctx.sync();
				let range: Excel.Range = ctx.workbook.worksheets.getItem(sheetName).getRange('D1');
				range.formulas = [['=' + funcName + '(' + rangeToRead.address + ')']];
				await ctx.sync();
			});
	}
	export async function test_CustomFunctions_Invoke_cvt_JScript_V11CustomFunctions() {
		const funcName: string = "Microsoft.Office.Test.addThreeNumbers";
		await Excel.run(async (ctx) => {
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			let testApi: Excel.InternalTest = ctx.workbook.internalTest;
			testApi.triggerMessage(1, 0, "", { invocationId: 10, functionName: funcName, parameterValues: [1, 2, 3] });
			await ctx.sync();
		});
	}
	export async function test_CustomFunctions_AddAll_cvt_JScript_V11CustomFunctions() {
		const funcNamespace: string = "Microsoft.Office.Test";
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.addAll();
			let count = ctx.workbook.customFunctions.getCount();
			await ctx.sync();
			Util.assertCompareValues(Object.keys(Excel.Script.CustomFunctions[funcNamespace]).length, count.value, "count");
		});
	}
	export async function test_CustomFunctions_Items_cvt_JScript_V11CustomFunctions() {
		const funcNamespace: string = "Microsoft.Office.Test";
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.addAll();
			ctx.load(ctx.workbook.customFunctions);
			await ctx.sync();
			let items: Array<Excel.CustomFunction> = ctx.workbook.customFunctions.items;
			Util.assertCompareValues(Object.keys(Excel.Script.CustomFunctions[funcNamespace]).length, items.length, "length");
			for (let i = 0; i < items.length; i++) {
				let nameSplit: Excel.CustomFunctionNameSplit = Excel.CustomFunctionProxy.splitName(items[i].name);
				Util.assertCompareValuesNotEqual(undefined, Excel.Script.CustomFunctions[nameSplit.namespace], "[" + i + "].namesapce=" + nameSplit.namespace);
				Util.assertCompareValuesNotEqual(undefined, Excel.Script.CustomFunctions[nameSplit.namespace][nameSplit.name], "[" + i + "].name=" + nameSplit.name);
			}
		});
	}
	export async function test_CustomFunctions_Delete_cvt_JScript_V11CustomFunctions() {
		const funcName: string = "Microsoft.Office.Test.CountTest1";
		
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.deleteAll();
			ctx.workbook.customFunctions.add(funcName);
			
			let count = ctx.workbook.customFunctions.getCount();
			let funcFound: Excel.CustomFunction = ctx.workbook.customFunctions.getItemOrNullObject(funcName);
			ctx.load(funcFound);
			await ctx.sync();
			Util.assertCompareValues(1, count.value, "count 1");
			Util.assert(!funcFound.isNull, "!func.isNull");
			funcFound.delete();
			count = ctx.workbook.customFunctions.getCount();
			let funcNotFound: Excel.CustomFunction = ctx.workbook.customFunctions.getItemOrNullObject(funcName);
			ctx.load(funcNotFound);
			await ctx.sync();
			
			Util.assertCompareValues(0, count.value, "count 0");
			Util.assert(funcNotFound.isNull, "funcNotFound.isNull");
		});
	}
	export async function test_CustomFunctions_DeleteAll_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.addAll();
			ctx.workbook.customFunctions.deleteAll();
			let count = ctx.workbook.customFunctions.getCount();
			await ctx.sync();
			Util.assertCompareValues(0, count.value, "count");
		});
	}
	export async function test_CustomFunctions_Count_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.deleteAll();
			ctx.workbook.customFunctions.add("Microsoft.Office.Test.CountTest1");
			ctx.workbook.customFunctions.add("Microsoft.Office.Test.CountTest2");
			let count = ctx.workbook.customFunctions.getCount();
			await ctx.sync();
			Util.assertCompareValues(2, count.value, "count");
		});
	}
	export async function test_CustomFunctions_Get_cvt_JScript_V11CustomFunctions() {
		const funcName: string = "Microsoft.Office.Test.GetTest";
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.deleteAll();
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			ctx.load(func);
			let funcFound: Excel.CustomFunction = ctx.workbook.customFunctions.getItemOrNullObject(funcName);
			ctx.load(funcFound);
			await ctx.sync();
			Util.assert(!func.isNull, "!func.isNull");
			Util.assert(!funcFound.isNull, "!funcFound.isNull");
			Util.assertCompareValues(func.type, funcFound.type, "type");
			Util.assertCompareValues(funcName, func.name, "func.name");
			Util.assertCompareValues(funcName, funcFound.name, "funcFound.name");
			Util.assertCompareValues(func.description, funcFound.description, "description");
			Util.assertCompareValues(func.streaming, funcFound.streaming, "streaming");
			Util.assertCompareValues(func.resultType, funcFound.resultType, "resultType");
		});
	}
	export async function test_CustomFunctions_GetNull_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.deleteAll();
			ctx.workbook.customFunctions.add("Microsoft.Office.Test.GetTest");
			let funcNotFound: Excel.CustomFunction = ctx.workbook.customFunctions.getItemOrNullObject("Microsoft.Office.Test.GarbageName");
			ctx.load(funcNotFound);
			await ctx.sync();
			Util.assert(funcNotFound.isNull, "isNull");
		});
	}
	export async function test_CustomFunctions_Paramters_cvt_JScript_V11CustomFunctions() {
		const funcName: string = "Microsoft.Office.Test.GetTest";
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.deleteAll();
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			ctx.load(func);
			let funcFound: Excel.CustomFunction = ctx.workbook.customFunctions.getItem(funcName);
			ctx.load(funcFound);
			await ctx.sync();
			Util.assertCompareValues(2, funcFound.parameters.length, "length");
			Util.assertCompareValues(func.parameters.length, funcFound.parameters.length, "length/length");
			for (var i = 0; i < 2; i++) {
				let param: Excel.CustomFunctionParameter = func.parameters[i];
				let paramFound: Excel.CustomFunctionParameter = funcFound.parameters[i];
				Util.assertCompareValues(param.name, paramFound.name, "name");
				Util.assertCompareValues(param.description, paramFound.description, "description");
				Util.assertCompareValues(param.valueType, paramFound.valueType, "valueType");
			}
		});
	}
	export async function test_CustomFunctions_ZeroParamters_cvt_JScript_V11CustomFunctions() {
		const funcName: string = "Microsoft.Office.Test.NoParamsTest";
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.deleteAll();
			let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(funcName);
			ctx.load(func);
			let funcFound: Excel.CustomFunction = ctx.workbook.customFunctions.getItem(funcName);
			ctx.load(funcFound);
			await ctx.sync();
			Util.assertCompareValues(0, func.parameters.length, "func.parameters.length");
			Util.assertCompareValues(0, funcFound.parameters.length, "funcFound.parameters.length");
			Util.assertCompareValues(funcName, func.name, "func.name");
			Util.assertCompareValues(funcName, funcFound.name, "funcFound.name");
		});
	}
	export async function test_CustomFunctions_Serialize_cvt_JScript_V11CustomFunctions() {
		const funcName: string = "Microsoft.Office.Test.addThreeNumbers";
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.deleteAll();
			ctx.workbook.customFunctions.add(funcName);
			let testApi: Excel.InternalTest = ctx.workbook.internalTest;
			let serializedStr: any = testApi.serializeCustomFunctions();
			await ctx.sync();
			let objects: any = JSON.parse(serializedStr.value);
			Util.assertCompareValues(1, objects.value.length, "one serialized object found");
			let serializedFunc: object = objects.value[0];
			let nameSplit: Excel.CustomFunctionNameSplit = Excel.CustomFunctionProxy.splitName(funcName);
			let expectedFunc: Excel.CustomFunctionDefinition = Excel.Script.CustomFunctions[nameSplit.namespace][nameSplit.name];
			
			Util.assertCompareValues('Microsoft.ExcelServices.CustomFunction', serializedFunc['@odata.type']);
			Util.assertCompareValues(funcName, serializedFunc['id']);
			Util.assertCompareValues(funcName, serializedFunc['name']);
			Util.assertCompareValues(expectedFunc.description, serializedFunc['description']);
			Util.assertCompareValues(expectedFunc.result.resultType, serializedFunc['resultType']);
			Util.assertCompareValues(expectedFunc.result.resultDimensionality, serializedFunc['resultDimensionality']);
			Util.assertCompareValues(expectedFunc.options.stream, serializedFunc['streaming']);
			Util.assertCompareValues('Script', serializedFunc['type']);
			Util.assertCompareValues(expectedFunc.parameters.length, serializedFunc['parameters'].length);
			for (let i = 0; i < expectedFunc.parameters.length; i++) {
				Util.assertCompareValues(expectedFunc.parameters[i].name, serializedFunc['parameters'][i].name);
				Util.assertCompareValues(expectedFunc.parameters[i].description, serializedFunc['parameters'][i].description);
				Util.assertCompareValues(expectedFunc.parameters[i].valueType, serializedFunc['parameters'][i].valueType);
			}
		});
	}
	export async function test_CustomFunctions_Deserialize_cvt_JScript_V11CustomFunctions() {
		const funcName: string = "Microsoft.Office.Test.deserialize_test";
		const funcDescription: string = "deserialize_test func";
		const funcType: string = "Script";
		const funcParam1 = { name: "a", description: "First", valueType: "Number", valueDimensionality: "Scalar" };
		const funcParam2 = { name: "b", description: "Second", valueType: "Number", valueDimensionality: "Scalar" };
		const funcResult = { resultType: "Number", resultDimensionality: "Scalar" };
		const funcOptions = { batching: false, streaming: false, cancelable: false };
		await Excel.run(async (ctx) => {
			ctx.workbook.customFunctions.deleteAll();
			const function1 = {
				'@odata.id': '(%27' + funcName + '%27)',
				'@odata.type': 'Microsoft.ExcelServices.CustomFunction',
				'description': funcDescription,
				'id': funcName,
				'name': funcName,
				'parameters': [
					{ "@odata.type": "Microsoft.ExcelServices.CustomFunctionParameter", "description": funcParam1.description, "name": funcParam1.name, "valueType": funcParam1.valueType, "valueDimensionality": funcParam1.valueDimensionality },
					{ "@odata.type": "Microsoft.ExcelServices.CustomFunctionParameter", "description": funcParam2.description, "name": funcParam2.name, "valueType": funcParam2.valueType, "valueDimensionality": funcParam2.valueDimensionality }
				],
				"resultType": funcResult.resultType,
				"resultDimensionality": funcResult.resultDimensionality,
				"streaming": funcOptions.streaming,
				"batching": funcOptions.batching,
				"cancelable": funcOptions.cancelable,
				'type': funcType,
			};
			const collection = {
				'value': [
					function1
				]
			}
			let serializedStr: string = JSON.stringify(collection);
			let testApi: Excel.InternalTest = ctx.workbook.internalTest;
			testApi.deserializeCustomFunctions(serializedStr);
			let funcRetrieved: Excel.CustomFunction = ctx.workbook.customFunctions.getItem(funcName);
			ctx.load(funcRetrieved);
			await ctx.sync();
			
			Util.assert(funcRetrieved != null, "Deserialized object found");
			Util.assertCompareValues(funcName, funcRetrieved['id']);
			Util.assertCompareValues(funcName, funcRetrieved['name']);
			Util.assertCompareValues(funcDescription, funcRetrieved['description']);
			Util.assertCompareValues(funcResult.resultType, funcRetrieved['resultType']);
			Util.assertCompareValues(funcResult.resultDimensionality, funcRetrieved['resultDimensionality']);
			Util.assertCompareValues(funcOptions.streaming, funcRetrieved['streaming']);
			Util.assertCompareValues(funcOptions.batching, funcRetrieved['batching']);
			Util.assertCompareValues(funcOptions.cancelable, funcRetrieved['cancelable']);
			Util.assertCompareValues('Script', funcRetrieved['type']);
			Util.assertCompareValues(function1.parameters.length, funcRetrieved['parameters'].length);
			var param1 = funcRetrieved['parameters'][0];
			var param2 = funcRetrieved['parameters'][1];
			Util.assertCompareValues(funcParam1.name, param1.name);
			Util.assertCompareValues(funcParam1.description, param1.description);
			Util.assertCompareValues(funcParam1.valueType, param1.valueType);
			Util.assertCompareValues(funcParam2.name, param2.name);
			Util.assertCompareValues(funcParam2.description, param2.description);
			Util.assertCompareValues(funcParam2.valueType, param2.valueType);
		});
	}
	export async function test_CustomFunctions_Perf_cvt_JScript_V11CustomFunctions() {
		await Excel.run(async (ctx) => {
			await customFunctions_PerfHelper(ctx, 25, "Microsoft.Office.Test.addThreeNumbers", "(1,2,3)", expectedTimeoutMilliseconds);
		});
	}
	export async function customFunctions_Execute(ctx: any, arrayOfFormulas: any, expectedTimeout: number) {
		let testApi: Excel.InternalTest = ctx.workbook.internalTest;
		let endTimestamp: number;
		let beginTimestamp: number;
		let beginEventFired: boolean = false;
		let endEventFired: boolean = false;
		let numberOfFunctions: number = arrayOfFormulas.length;
		
		testApi.unregisterAllCustomFunctionExecutionEvents();	
		
		let entireSheet = ctx.workbook.worksheets.getItem('Sheet1').getRange(null);
		entireSheet.clear(null);
		await ctx.sync();
	
		return Util.promisify(async (callback) => {
			let beginEvent: OfficeExtension.EventHandlerResult<Excel.CustomFunctionEventArgs> = testApi.onCustomFunctionExecutionBeginEvent.add((eventArgs: Excel.CustomFunctionEventArgs) => {
				beginTimestamp = customFunctions_ConvertTicksToMicroseconds(eventArgs.higherTicks, eventArgs.lowerTicks);
				RichApiTest.log.comment("Begin event was triggered at " + beginTimestamp + " epoch microseconds");
				beginEvent.remove();
				beginEventFired = true;
				return ctx.sync();
			});
			let timeoutHandle: number;
			let endEvent: OfficeExtension.EventHandlerResult<Excel.CustomFunctionEventArgs> = testApi.onCustomFunctionExecutionEndEvent.add((eventArgs: Excel.CustomFunctionEventArgs) => {
				clearTimeout(timeoutHandle);
				endTimestamp = customFunctions_ConvertTicksToMicroseconds(eventArgs.higherTicks, eventArgs.lowerTicks);
				RichApiTest.log.comment("End event was triggered " + endTimestamp + " epoch microseconds");				
				endEvent.remove();
				endEventFired = true;
	
				if (beginEventFired) {
					var executionTimeMicroseconds =  endTimestamp - beginTimestamp;
					RichApiTest.log.comment("Avg time for '" + numberOfFunctions + "' functions = " + executionTimeMicroseconds/(numberOfFunctions*1000) + " ms");
				} else {
					RichApiTest.log.comment("Begin event was not received hence cannot compute the perf number");
				}
				callback( {status: 'succeeded', value: executionTimeMicroseconds} );
				return 	ctx.sync();
			});
			await ctx.sync();
			
			
			let range: Excel.Range = ctx.workbook.worksheets.getItem('Sheet1').getRange('A1:A'+ numberOfFunctions);
			range.formulas = arrayOfFormulas;
			
			timeoutHandle = setTimeout(async () => {
				if (!beginEventFired) {
					beginEvent.remove();
				}
				endEvent.remove();	
				await ctx.sync();
				callback( {status: 'failed', error: "Customfunction execution event(s) were not fired, CustomFunctionExecutionBeginEvent=" + beginEventFired +", CustomFunctionExecutionEndEvent=" + endEventFired} );
			}, expectedTimeout);
			await ctx.sync();
		});
	}
	export async function customFunctions_PerfHelper(ctx: any, numberOfFunctions: number, functionName: string, functionParameters: string, expectedTimeout: number) {
		var arrayOfFormulas = [];
		for (let i: number = 0; i < numberOfFunctions; i++){
			arrayOfFormulas.push(['=' + functionName + functionParameters]);
		}
		let func: Excel.CustomFunction = ctx.workbook.customFunctions.add(functionName);
		await ctx.sync();
		await customFunctions_Execute(ctx, arrayOfFormulas, expectedTimeout);
	}
	export function customFunctions_ConvertTicksToMicroseconds(higherTocks: number, lowerTicks: number) : number {
		
		let microseconds:number = Math.pow(2,31) * higherTocks + lowerTicks;
		return microseconds;
	}
}
module ExcelTest {
	export function test_CustomXmlParts_GetAll_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var parts: Excel.CustomXmlPartCollection = ctx.workbook.customXmlParts;
					ctx.load(parts);
					return ctx.sync()
						.then(() => CustomXmlPartsUtil.Common.Helper.validateResetCollection(parts.items));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_Add_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.add(CustomXmlPartsUtil.Xml.makeFragment(CustomXmlPartsUtil.Namespace.ns3));
					ctx.load(part);
					return ctx.sync()
						.then(() => Util.assertCompareValues(CustomXmlPartsUtil.Namespace.ns3, part.namespaceUri, "Namespace"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_Update_cvt_JScript_V15() {
		var xmlUpdated: string = CustomXmlPartsUtil.Xml.makeFragment(CustomXmlPartsUtil.Namespace.ns3);
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then((part: Excel.CustomXmlPart) => {
					part.setXml(xmlUpdated);
					ctx.load(part);
					return ctx.sync()
						.then(() => {
							Util.assertCompareValues(CustomXmlPartsUtil.Namespace.ns3, part.namespaceUri, "Namespace");
							var xmlResult: OfficeExtension.ClientResult<string> = part.getXml();
							ctx.sync()
								.then(() => {
									Util.assertCompareValues(xmlUpdated, xmlResult.value, "XML");
								});
						});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_Delete_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then((part: Excel.CustomXmlPart) => {
					part.delete();
					return ctx.sync()
						.then(() => ctx.load(part))
						.then(() => Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetByNamespace_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var parts: Excel.CustomXmlPartScopedCollection = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns2);
					ctx.load(parts);
					return ctx.sync()
						.then(() => CustomXmlPartsUtil.Common.Helper.validateCollectionNamespace(parts.items, 2 , CustomXmlPartsUtil.Namespace.ns2));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_CantGetByNamespace_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var parts: Excel.CustomXmlPartScopedCollection = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns3);
					ctx.load(parts);
					return ctx.sync()
						.then(() => CustomXmlPartsUtil.Common.Helper.validateCollection(parts.items, 0 ));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetByNamespaceById_cvt_JScript_V15() {
		var id: string;
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then((part: Excel.CustomXmlPart) => id = part.id)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns2).getItem(id);
					ctx.load(part);
					return ctx.sync()
						.then(() => Util.assertCompareValues(id, part.id, "ID"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_CantGetByNamespaceById_cvt_JScript_V15() {
		var id: string;
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then((part: Excel.CustomXmlPart) => id = part.id)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns1).getItem(id);
					ctx.load(part);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetItemOrNullObjectFromFullCollection_cvt_JScript_V15() {
		var id: string;
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then((part: Excel.CustomXmlPart) => id = part.id)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getItemOrNullObject(id);
					ctx.load(part);
					return ctx.sync()
						.then(() => Util.assertCompareValues(false, part.isNull, "Not Null"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_CantGetItemOrNullObjectFromFullCollection_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getItemOrNullObject(CustomXmlPartsUtil.Id.bad);
					ctx.load(part);
					return ctx.sync()
						.then(() => Util.assertCompareValues(true, part.isNull, "Null"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetItemOrNullObjectFromScopedCollection_cvt_JScript_V15() {
		var id: string;
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then((part: Excel.CustomXmlPart) => id = part.id)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns2).getItemOrNullObject(id);
					ctx.load(part);
					return ctx.sync()
						.then(() => Util.assertCompareValues(false, part.isNull, "Not Null"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_CantGetItemOrNullObjectFromScopedCollection_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns2).getItemOrNullObject(CustomXmlPartsUtil.Id.bad);
					ctx.load(part);
					return ctx.sync()
						.then(() => Util.assertCompareValues(true, part.isNull, "Null"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetOnlyItem0_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns3).getOnlyItem();
					ctx.load(part);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetOnlyItem1_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns1).getOnlyItem();
					ctx.load(part);
					return ctx.sync()
						.then(() => Util.assertCompareValues(CustomXmlPartsUtil.Namespace.ns1, part.namespaceUri, "Namespace"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetOnlyItem2_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns2).getOnlyItem();
					ctx.load(part);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetOnlyItemOrNullObject0_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns3).getOnlyItemOrNullObject();
					ctx.load(part);
					return ctx.sync()
						.then(() => Util.assertCompareValues(true, part.isNull, "Null"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetOnlyItemOrNullObject1_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns1).getOnlyItemOrNullObject();
					ctx.load(part);
					return ctx.sync()
						.then(() => Util.assertCompareValues(CustomXmlPartsUtil.Namespace.ns1, part.namespaceUri, "Namespace"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetOnlyItemOrNullObject2_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var part: Excel.CustomXmlPart = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns2).getOnlyItemOrNullObject();
					ctx.load(part);
					return ctx.sync()
						.then(() => Util.assertCompareValues(true, part.isNull, "Null"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetCountAll_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var countResult: OfficeExtension.ClientResult<number> = ctx.workbook.customXmlParts.getCount();
					return ctx.sync()
						.then(() => Util.assertCompareValues(3, countResult.value, "Count"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetCountScoped_cvt_JScript_V15() {
		Excel.run((ctx: Excel.RequestContext) => {
			return CustomXmlPartsUtil.JScript.Thenable.reset(ctx)
				.then(() => {
					var countResult: OfficeExtension.ClientResult<number> = ctx.workbook.customXmlParts.getByNamespace(CustomXmlPartsUtil.Namespace.ns2).getCount();
					return ctx.sync()
						.then(() => Util.assertCompareValues(2, countResult.value, "Count"));
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
}
module ExcelTest {
	export function test_DocumentProperties_SetAndGetBuiltInDocumentProperties_cvt_JScript_V17() {
		var titleValue = "TestAgave";
		var subjectValue = "Test";
		var authorValue = "Philip Rueker";
		var keywordsValue = "Agave Javascript Test";
		var commentsValue = "This is a Agave for Rich Api Test";
		var revisionnumberValue = 3;
		var categoryValue = "Agave";
		var managerValue = "Shaofeng Zhu";
		var companyValue = "Microsoft";
		Excel.run(function (ctx) {
			var propertiesToSet = ctx.workbook.properties;
			propertiesToSet.title = titleValue;
			propertiesToSet.subject = subjectValue;
			propertiesToSet.author = authorValue;
			propertiesToSet.keywords = keywordsValue;
			propertiesToSet.comments = commentsValue;
			propertiesToSet.revisionNumber = revisionnumberValue;
			propertiesToSet.category = categoryValue;
			propertiesToSet.manager = managerValue;
			propertiesToSet.company = companyValue;
			var propertiesToGet = ctx.workbook.properties;
			ctx.load(propertiesToGet);
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(titleValue, propertiesToGet.title, "Document Properties");
					ExcelTest.Util.assertCompareValues(subjectValue, propertiesToGet.subject, "Document Properties");
					ExcelTest.Util.assertCompareValues(authorValue, propertiesToGet.author, "Document Properties");
					ExcelTest.Util.assertCompareValues(keywordsValue, propertiesToGet.keywords, "Document Properties");
					ExcelTest.Util.assertCompareValues(commentsValue, propertiesToGet.comments, "Document Properties");
					ExcelTest.Util.assertCompareValues(revisionnumberValue, propertiesToGet.revisionNumber, "Document Properties");
					ExcelTest.Util.assertCompareValues(categoryValue, propertiesToGet.category, "Document Properties");
					ExcelTest.Util.assertCompareValues(managerValue, propertiesToGet.manager, "Document Properties");
					ExcelTest.Util.assertCompareValues(companyValue, propertiesToGet.company, "Document Properties");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_GetReadOnlyBuiltInDocumentProperties_cvt_JScript_V17() {
		Excel.run(function (ctx) {
			var propertiesToGet = ctx.workbook.properties;
			propertiesToGet.load("lastauthor, revisionnumber, creationdate");
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment("LastAuthor: " + propertiesToGet.lastAuthor);
					RichApiTest.log.comment("CreationDate: " + propertiesToGet.creationDate.toDateString());
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export async function test_DocumentProperties_SetInvalidRevisionNumber_cvt_JScript_V17() {
		var revisionnumberValue = 12.5;
		await Excel.run(async(ctx) => {
			var propertiesToSet = ctx.workbook.properties;
			propertiesToSet.revisionNumber = revisionnumberValue;
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export function test_DocumentProperties_AddCustomDocumentProperties_cvt_JScript_V17() {
		var textKey = "Text"
		var textValue = "TestAgave";
		var boolPositiveKey = "BoolPositive";
		var boolPositiveValue = true;
		var boolNegativeKey = "BoolNegative";
		var boolNegativeValue = false;
		var dateKey = "Date";
		var dateValue = new Date("2015-06-07");
		var integerKey = "Integer";
		var integerValue = 13;
		var floatKey = "Float";
		var floatValue = 28.8;
		Excel.run(function (ctx) {
			var propertiesToSet = ctx.workbook.properties.custom;
			var textProperty = propertiesToSet.add(textKey, textValue);
			ctx.load(textProperty);
			var boolPositiveProperty = propertiesToSet.add(boolPositiveKey, boolPositiveValue);
			ctx.load(boolPositiveProperty);
			var boolNegativeProperty = propertiesToSet.add(boolNegativeKey, boolNegativeValue);
			ctx.load(boolNegativeProperty);
			var dateProperty = propertiesToSet.add(dateKey, dateValue);
			ctx.load(dateProperty);
			var integerProperty = propertiesToSet.add(integerKey, integerValue);
			ctx.load(integerProperty);
			var floatProperty = propertiesToSet.add(floatKey, floatValue);
			ctx.load(floatProperty);
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(textKey, textProperty.key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(textValue, textProperty.value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.string, textProperty.type, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(boolPositiveKey, boolPositiveProperty.key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(boolPositiveValue, boolPositiveProperty.value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.boolean, boolPositiveProperty.type, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(boolNegativeKey, boolNegativeProperty.key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(boolNegativeValue, boolNegativeProperty.value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.boolean, boolNegativeProperty.type, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(dateKey, dateProperty.key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(dateValue.toISOString(), dateProperty.value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.date, dateProperty.type, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(integerKey, integerProperty.key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(integerValue, integerProperty.value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.number, integerProperty.type, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(floatKey, floatProperty.key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(floatValue, floatProperty.value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.float, floatProperty.type, "Custom Document Properties");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_GetCustomDocumentProperties_cvt_JScript_V17() {
		var textKey = "Text"
		var textValue = "TestAgave";
		var nonExistKey = "ThisKeyDoesNotExist";
		Excel.run(function (ctx) {
			var propertiesToSet = ctx.workbook.properties.custom;
			propertiesToSet.add(textKey, textValue);
			var textProperty = propertiesToSet.getItemOrNullObject(textKey);
			ctx.load(textProperty);
			var nonExistProperty = propertiesToSet.getItemOrNullObject(nonExistKey);
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(textKey, textProperty.key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(textValue, textProperty.value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.string, textProperty.type, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(true, nonExistProperty.isNullObject, "Custom Document Properties");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_DeleteCustomDocumentProperties_cvt_JScript_V17() {
		var ctx = new Excel.RequestContext();
		var textKey = "Text"
		var textValue = "TestAgave";
		var propertiesToSet = ctx.workbook.properties.custom;
		var textProperty = propertiesToSet.add(textKey, textValue);
		ctx.load(textProperty);
		ctx.sync()
			.then(function () {
				ExcelTest.Util.assertCompareValues(textKey, textProperty.key, "Custom Document Properties");
				ExcelTest.Util.assertCompareValues(textValue, textProperty.value, "Custom Document Properties");
				ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.string, textProperty.type, "Custom Document Properties");
				return ctx.sync()
					.then(function () {
						var propertyToDelete = propertiesToSet.getItemOrNullObject(textKey);
						propertyToDelete.delete();
						ctx.load(propertyToDelete);
						Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
					})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_ChangeCustomDocumentPropertiesValueWithSameType_cvt_JScript_V17() {
		var textKey = "Text"
		var textValue = "TestAgave";
		var newValue = "Hello World";
		Excel.run(function (ctx) {
			var propertiesToSet = ctx.workbook.properties.custom;
			var textProperty = propertiesToSet.add(textKey, textValue);
			textProperty.value = newValue;
			ctx.load(textProperty);
	
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(textKey, textProperty.key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(newValue, textProperty.value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.string, textProperty.type, "Custom Document Properties");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_ChangeCustomDocumentPropertiesValueWithDifferentType_cvt_JScript_V17() {
		var textKey = "Text"
		var textValue = "TestAgave";
		var newValue = 13;
		Excel.run(function (ctx) {
			var propertiesToSet = ctx.workbook.properties.custom;
			var textProperty = propertiesToSet.add(textKey, textValue);
			textProperty.value = newValue;
			ctx.load(textProperty);
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(textKey, textProperty.key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(newValue, textProperty.value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.number, textProperty.type, "Custom Document Properties");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_GetCountOfCustomDocumentProperties_cvt_JScript_V17() {
		var textKey = "Text"
		var textValue = "TestAgave";
		var integerKey = "Number";
		var integerValue = 13;
		var expectedCount = 2;
		Excel.run(function (ctx) {
			var propertiesToSet = ctx.workbook.properties.custom;
			propertiesToSet.deleteAll();
			var textProperty = propertiesToSet.add(textKey, textValue);
			var integerProperty = propertiesToSet.add(integerKey, integerValue);
			var count = propertiesToSet.getCount();
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(expectedCount, count.value, "Custom Document Properties");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_DeleteAllCustomDocumentProperties_cvt_JScript_V17() {
		var textKey = "Text"
		var textValue = "TestAgave";
		var integerKey = "Number";
		var integerValue = 13;
		
		Excel.run(function (ctx) {
			var propertiesToSet = ctx.workbook.properties.custom;
			var textProperty = propertiesToSet.add(textKey, textValue);
			var integerProperty = propertiesToSet.add(integerKey, integerValue);
			propertiesToSet.deleteAll();
			var count = propertiesToSet.getCount();
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(0, count.value, "Custom Document Properties");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_EnumOperationOfCustomDocumentProperties_cvt_JScript_V17() {
		var textKey = "Text"
		var textValue = "TestAgave";
		var integerKey = "Number";
		var integerValue = 13;
		Excel.run(function (ctx) {
			var propertiesToSet = ctx.workbook.properties.custom;
			propertiesToSet.deleteAll()
			var textProperty = propertiesToSet.add(textKey, textValue);
			var integerProperty = propertiesToSet.add(integerKey, integerValue);
			propertiesToSet.load();
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(textKey, propertiesToSet.items[0].key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(textValue, propertiesToSet.items[0].value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.string, propertiesToSet.items[0].type, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(integerKey, propertiesToSet.items[1].key, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(integerValue, propertiesToSet.items[1].value, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(Excel.DocumentPropertyType.number, propertiesToSet.items[1].type, "Custom Document Properties");
					ExcelTest.Util.assertCompareValues(2, propertiesToSet.items.length, "Custom Document Properties");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	const sheetName = "SheetDVAdd";
	export async function test_DataValidation_SetWholeNumberDV_cvt_JScript_V17() {
		const rangeAddress = "A1";
		await Excel.run(async(ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 5,
					formula2: 10
				}
			};
			let dataValidationLoaded = worksheet.getRange(rangeAddress).dataValidation.load("type, rule");
			await ctx.sync();
			
			Util.assertCompareValues(Excel.DataValidationType.wholeNumber, dataValidationLoaded.type);
			Util.assertCompareValues("5", dataValidationLoaded.rule.wholeNumber.formula1, "DataValidation formula1");
			Util.assertCompareValues("10", dataValidationLoaded.rule.wholeNumber.formula2, "DataValidation formula2");
		});	
	}
	export async function test_DataValidation_SetWholeNumberDVInvalidMinMax$Fail_cvt_JScript_V17() {
		const rangeAddress = "A2";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 10,
					formula2: 5
				}
			};
			worksheet.getRange(rangeAddress).dataValidation.load("type, rule");
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export async function test_DataValidation_SetWholeNumberDVInvalidDataType$Fail_cvt_JScript_V17() {
		const rangeAddress = "A3";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 10.5,
					formula2: 5.5
				}
			};
			worksheet.getRange(rangeAddress).dataValidation.load("type, rule");
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
    export async function test_DataValidation_SetDataValidationToTwoRulesSimultaneously$Fail_cvt_JScript_V17() {
		const rangeAddress = "A3";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 1,
					formula2: 2
				},
				decimal: {
					operator: 'between',
					formula1: 5.5,
					formula2: 10.5
				}
			};
			worksheet.getRange(rangeAddress).dataValidation.load("type, rule");
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export async function test_DataValidation_SetDVWithRelativeRefFormula_cvt_JScript_V17() {
		const rangeAddress = "A4:A5";
		const rangeSubAddress = "A5";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: '=H1',
					formula2: '=H2',
				}
			};
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type, rule");
			
            
            
            
            let dataValidationSubCell = worksheet.getRange(rangeSubAddress).dataValidation.load("type, rule");
            await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.wholeNumber, dataValidation.type);
			Util.assertCompareValues("=H1", dataValidation.rule.wholeNumber.formula1, "DataValidation formula1 is H1");
			Util.assertCompareValues("=H2", dataValidation.rule.wholeNumber.formula2, "DataValidation formula1 is H2");
			Util.assertCompareValues(Excel.DataValidationType.wholeNumber, dataValidation.type);
            Util.assertCompareValues("=H2", dataValidationSubCell.rule.wholeNumber.formula1, "DataValidation formula1 is shifted to H2 for cell A5");
            Util.assertCompareValues("=H3", dataValidationSubCell.rule.wholeNumber.formula2, "DataValidation formula2 is shifted to H3 for cell A5");
		});
	}
    export async function test_DataValidation_SetDVWithAbosoluteRefFormula_cvt_JScript_V17() {
        const rangeAddress = "A6:A7";
        const rangeSubAddress = "A7";
        await Excel.run(async (ctx) => {
            let worksheet = ctx.workbook.worksheets.getItem(sheetName);
            worksheet.getRange(rangeAddress).dataValidation.rule = {
                wholeNumber: {
                    operator: Excel.DataValidationOperator.between,
                    formula1: '=$E$1',
                    formula2: '=$E$2',
                }
            };
            let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
            let dataValidationSubCell = worksheet.getRange(rangeSubAddress).dataValidation.load("type,rule");
            await ctx.sync();
            Util.assertCompareValues(Excel.DataValidationType.wholeNumber, dataValidation.type);
            Util.assertCompareValues("=$E$1", dataValidation.rule.wholeNumber.formula1, "DataValidation formula1");
            Util.assertCompareValues("=$E$2", dataValidation.rule.wholeNumber.formula2, "DataValidation formula2");
            
            
            Util.assertCompareValues("=$E$1", dataValidationSubCell.rule.wholeNumber.formula1, "DataValidation formula1");
            Util.assertCompareValues("=$E$2", dataValidationSubCell.rule.wholeNumber.formula2, "DataValidation formula2");
        });
    }
	export async function test_DataValidation_SetDVInRangeContainMultipleDVs$Fail_cvt_JScript_V17() {
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			
			worksheet.getRange("A1").dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 1,
					formula2: 5
				}
			};
			worksheet.getRange("A2").dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 10,
					formula2: 20
				}
			};
			await ctx.sync();
			
			worksheet.getRange("A1:A2").dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 1,
					formula2: 20
				}
			};
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
			
			worksheet.getRange("A1:A2").dataValidation.clear();
			
			worksheet.getRange("A1:A2").dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 1,
					formula2: 20
				}
			};
			let dataValidation = worksheet.getRange("A1:A2").dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.wholeNumber, dataValidation.type);
			Util.assertCompareValues("1", dataValidation.rule.wholeNumber.formula1, "DataValidation formula1");
			Util.assertCompareValues("20", dataValidation.rule.wholeNumber.formula2, "DataValidation formula2");
		});
	}
	export async function test_DataValidation_SetDecimalDV_cvt_JScript_V17() {
		const rangeAddress = "A8";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				decimal: {
					operator: 'between',
					formula1: 5.5,
					formula2: 10.5
				}
			};
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.decimal, dataValidation.type);
			Util.assertCompareValues("5.5", dataValidation.rule.decimal.formula1, "DataValidation formula1");
			Util.assertCompareValues("10.5", dataValidation.rule.decimal.formula2, "DataValidation formula2");
		})
	}
	export async function test_DataValidation_SetDVWithAlertPromt_cvt_JScript_V17() {
		const rangeAddress = "A9";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation;
			let rule = {
				textLength: {
					operator: Excel.DataValidationOperator.lessThanOrEqualTo,
					formula1: 15,
				}
			};
			var errorAlert = {
				style: Excel.DataValidationAlertStyle.warning,
				title: 'Text length alert',
				message: 'Text length should be less than 15',
				showAlert: true,
			};
			dataValidation.rule = rule;
			dataValidation.errorAlert = errorAlert;
			dataValidation.ignoreBlanks = false;
			dataValidation.prompt = {
				message: 'Please enter texts with less 15 characters.',
				title: 'Text Length Max 15',
				showPrompt: false, 
			};
			let dataValidaitonRefresh = worksheet.getRange(rangeAddress).dataValidation.load();
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.textLength, dataValidaitonRefresh.type);
			Util.assertCompareValues("15", dataValidaitonRefresh.rule.textLength.formula1, "Validate the value of dataValidation.rule.textLength.formula1.");
			Util.assertCompareValues(Excel.DataValidationOperator.lessThanOrEqualTo, dataValidaitonRefresh.rule.textLength.operator, "Validate the value of dataValidation.rule.textLength.operator.");
			Util.assertCompareValues(false, dataValidaitonRefresh.ignoreBlanks, "dataValidation.ignoreBlanks");
			Util.assertCompareValues(true, dataValidaitonRefresh.errorAlert.showAlert, "errorAlert.showAlert");
			Util.assertCompareValues("Warning", dataValidaitonRefresh.errorAlert.style, "errorAlert.style");
			Util.assertCompareValues("Text length alert", dataValidaitonRefresh.errorAlert.title, "errorAlert.title");
			Util.assertCompareValues("Text length should be less than 15", dataValidaitonRefresh.errorAlert.message, "errorAlert.message");
			Util.assertCompareValues(false, dataValidaitonRefresh.prompt.showPrompt, "prompt.showPrompt");
			Util.assertCompareValues('Text Length Max 15', dataValidaitonRefresh.prompt.title, "prompt.title");
            Util.assertCompareValues('Please enter texts with less 15 characters.', dataValidaitonRefresh.prompt.message, "prompt.message");
            let dataValidaitonToUpdate = worksheet.getRange(rangeAddress).dataValidation.load();
            dataValidaitonToUpdate.ignoreBlanks = true;
            dataValidaitonToUpdate.errorAlert = {  
                style: Excel.DataValidationAlertStyle.warning,
                title: 'Text length alert',
                message: 'Text length should be less than 15',
                showAlert: false,
            };
            dataValidation = worksheet.getRange(rangeAddress).dataValidation.load();
            dataValidation = dataValidaitonToUpdate; 
            dataValidaitonRefresh = worksheet.getRange(rangeAddress).dataValidation.load(); 
            await ctx.sync();
            Util.assertCompareValues(true, dataValidaitonRefresh.ignoreBlanks, "dataValidation.ignoreBlanks");
            Util.assertCompareValues(false, dataValidaitonRefresh.errorAlert.showAlert, "errorAlert.showAlert");
            
		});
	}
	export async function test_DataValidation_SetDateDV_cvt_JScript_V17() {
		const rangeAddress = "A10";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				date: {
					operator: Excel.DataValidationOperator.greaterThanOrEqualTo,
					formula1: '1/17/2017',
				}
			};
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.date, dataValidation.type);
			Util.assertCompareValues("1/17/2017", dataValidation.rule.date.formula1, "Validate the value of dataValidation.rule.date.formula1.");
			Util.assertCompareValues(Excel.DataValidationOperator.greaterThanOrEqualTo, dataValidation.rule.date.operator, "DataValidation operator is GreaterThanOrEqualTo");
		});
	}
	export async function test_DataValidation_SetDateRef_cvt_JScript_V17() {
		const rangeAddress = "A10";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				date: {
					operator: Excel.DataValidationOperator.greaterThanOrEqualTo,
					formula1: '=H1',
				}
			};
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.date, dataValidation.type);
			Util.assertCompareValues("=H1", dataValidation.rule.date.formula1, "Validate the value of dataValidation.rule.date.formula1.");
			Util.assertCompareValues(Excel.DataValidationOperator.greaterThanOrEqualTo, dataValidation.rule.date.operator, "DataValidation operator is GreaterThanOrEqualTo");
		});
	}
	export async function test_DataValidation_SetDateDVInvalidDate$Fail_cvt_JScript_V17() {
		const rangeAddress = "A10";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				date: {
					operator: Excel.DataValidationOperator.greaterThanOrEqualTo,
					formula1: 'abc',
				}
			};
			worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		});
	}
	export async function test_DataValidation_SetTimeDV_cvt_JScript_V17() {
		const rangeAddress = "A11";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				time: {
					operator: Excel.DataValidationOperator.greaterThanOrEqualTo,
					formula1: '1:00:00 PM',
				}
			};
			var dataValidationRefresh = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.time, dataValidationRefresh.type);
			Util.assertCompareValues("1:00:00 PM", dataValidationRefresh.rule.time.formula1, "Validate the value of rule.time.formula1.");
			Util.assertCompareValues(Excel.DataValidationOperator.greaterThanOrEqualTo, dataValidationRefresh.rule.time.operator, "DataValidation operator is GreaterThanOrEqualTo");
		});
	}
	export async function test_DataValidation_SetListDV_cvt_JScript_V17() {
		const rangeAddress = "A12";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				list: {
					inCellDropDown: true,
					source: 'yes,no,maybe',
				}
			};
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.list, dataValidation.type);
			Util.assertCompareValues("yes,no,maybe", dataValidation.rule.list.source, "Validate the value of rule.list.source.");
			Util.assertCompareValues(true, dataValidation.rule.list.inCellDropDown, "Verify list.inCellDropDown.");
		});
	}
	export async function test_DataValidation_SetListDVSourceCellAbosolute_cvt_JScript_V17() {
		const rangeAddress = "A13:A14";
		const rangeSubAddress = "A14";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				list: {
					inCellDropDown: true,
					source: '=$H$1:$H$4',
				}
			};
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			var dataValidationShift = worksheet.getRange(rangeSubAddress).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.list, dataValidation.type);
			Util.assertCompareValues("=$H$1:$H$4", dataValidation.rule.list.source, "Validate the value of rule.list.source.");
			Util.assertCompareValues(true, dataValidation.rule.list.inCellDropDown, "Verify list.inCellDropDown.");
			Util.assertCompareValues("=$H$1:$H$4", dataValidationShift.rule.list.source, "Validate the value of rule.list.source.");
		});
	}
	export async function test_DataValidation_SetListDVRangeSourceRelative_cvt_JScript_V17() {
		const rangeAddress = "A13:A14";
		const rangeSubAddress = "A14";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				list: {
					inCellDropDown: true,
					source: '=H1:H4',
				}
			};
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			var dataValidationShift = worksheet.getRange(rangeSubAddress).dataValidation.load("rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.list, dataValidation.type);
			Util.assertCompareValues("=H1:H4", dataValidation.rule.list.source, "Validate the value of rule.list.source.");
			Util.assertCompareValues(true, dataValidation.rule.list.inCellDropDown, "Verify list.inCellDropDown.");
			Util.assertCompareValues("=H2:H5", dataValidationShift.rule.list.source, "Validate the value of rule.list.source.");
		});
	}
	export async function test_DataValidation_SetListSourceNamedRange_cvt_JScript_V17() {
		const rangeAddress = "A15";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				list: {
					inCellDropDown: true,
					source: '=RangeForDVA1A4',
				}
			};
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.list, dataValidation.type);
			Util.assertCompareValues("=RangeForDVA1A4", dataValidation.rule.list.source, "Validate the value of rule.list.source.");
			Util.assertCompareValues(true, dataValidation.rule.list.inCellDropDown, "Verify list.inCellDropDown.");
		});
	}
	export async function test_DataValidation_SetCustomDV_cvt_JScript_V17() {
		const rangeAddress = "A16";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				custom: {
					formula: '=AND(ISNUMBER(A16),LEN(A16)=2)'
				}
			};
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.custom, dataValidation.type);
			Util.assertCompareValues("=AND(ISNUMBER(A16),LEN(A16)=2)", dataValidation.rule.custom.formula, "Verify custom.formula");
		});
	}
    export async function test_DataValidation_SetDVAndClear_cvt_JScript_V17() {
		const rangeAddress = "A17";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				custom: {
					formula: '=AND(ISNUMBER(A17),LEN(A17)=2)'
				}
			};
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.custom, dataValidation.type);
			Util.assertCompareValues("=AND(ISNUMBER(A17),LEN(A17)=2)", dataValidation.rule.custom.formula, "Verify custom.formula");
			dataValidation.clear();
			let dataValidationRefresh = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.none, dataValidationRefresh.type, "No data validation in this range.");
			Util.assertCompareValues(null, dataValidationRefresh.rule.custom, "No custom data validation in this range after clear.");
		});
    }
	export async function test_DataValidation_AddWholeNumberDVEditPartial_cvt_JScript_V17() {
		const rangeAddress = "A18:A19";
		var partialRangeToEdit = "A18";
		var partialRangeNoEdit = "A19";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var dataValidationEdit = worksheet.getRange(partialRangeToEdit).dataValidation;
			dataValidationEdit.clear();  
			var dataValNoEdit = worksheet.getRange(partialRangeNoEdit).dataValidation;
			dataValNoEdit.clear(); 
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 5,
					formula2: 10
				}
			};
			await ctx.sync();
			dataValidationEdit.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 15,
					formula2: 30
				}
			};
			dataValidationEdit = worksheet.getRange(partialRangeToEdit).dataValidation.load("type,rule");
			dataValNoEdit = worksheet.getRange(partialRangeNoEdit).dataValidation.load("type,rule");
			await ctx.sync();
			Util.assertCompareValues(Excel.DataValidationType.wholeNumber, dataValNoEdit.type, "rangePartialNoEdit.dataValidation.type");
			Util.assertCompareValues("5", dataValNoEdit.rule.wholeNumber.formula1, "rangePartialNoEdit.DataValidation formula1");
			Util.assertCompareValues("10", dataValNoEdit.rule.wholeNumber.formula2, "DataValidation formula2");
			Util.assertCompareValues(Excel.DataValidationType.wholeNumber, dataValidationEdit.type);
			Util.assertCompareValues("15", dataValidationEdit.rule.wholeNumber.formula1, "DataValidation formula1");
			Util.assertCompareValues("30", dataValidationEdit.rule.wholeNumber.formula2, "DataValidation formula2");
		});
	}
	export async function test_DataValidation_EditPartiatDVParams_cvt_JScript_V17() {
		const rangeAddress = "A20";
		await Excel.run(async (ctx) => {
			let worksheet = ctx.workbook.worksheets.getItem(sheetName);
			worksheet.getRange(rangeAddress).dataValidation.rule = {
				wholeNumber: {
					operator: 'between',
					formula1: 5,
					formula2: 10
				}
			};
			await ctx.sync();
			worksheet.getRange(rangeAddress).dataValidation.ignoreBlanks = false;
			let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule,ignoreBlanks");
			await ctx.sync();
			Util.assertCompareValues(false, dataValidation.ignoreBlanks, "DataValidation.ignoreBlanks");
			Util.assertCompareValues(Excel.DataValidationType.wholeNumber, dataValidation.type, "rangePartialNoEdit.dataValidation.type");
			Util.assertCompareValues("5", dataValidation.rule.wholeNumber.formula1, "DataValidation formula1");
			Util.assertCompareValues("10", dataValidation.rule.wholeNumber.formula2, "DataValidation formula2");
		});
    }
    export async function test_DataValidation_DVDefaultValueTest_cvt_JScript_V17() {
        const rangeAddress = "A17";
        await Excel.run(async (ctx) => {
            let worksheet = ctx.workbook.worksheets.getItem(sheetName);
            worksheet.getRange(rangeAddress).dataValidation.rule = {
                custom: {
                    formula: '=AND(ISNUMBER(A1),LEN(A1)=9)'
                }
            };
            let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load();
            await ctx.sync();
            Util.assertCompareValues(Excel.DataValidationType.custom, dataValidation.type);
            Util.assertCompareValues("=AND(ISNUMBER(A1),LEN(A1)=9)", dataValidation.rule.custom.formula, "Verify custom.formula");
            Util.assertCompareValues(Excel.DataValidationType.custom, dataValidation.type, "dataValidation.type");
            Util.assertCompareValues(true, dataValidation.ignoreBlanks, "dataValidation.ignoreBlanks by default should be true");
            Util.assertCompareValues(true, dataValidation.errorAlert.showAlert, "dataValidation.errorAlert.showAlert by default should be true");
            Util.assertCompareValues(Excel.DataValidationAlertStyle.stop, dataValidation.errorAlert.style, "dataValidation.errorAlert.style defaults to Stop.");
            Util.assertCompareValues(true, dataValidation.prompt.showPrompt, "dataValidation.prompt.showPrompt by default should be true.");
            Util.assertCompareValues(null, dataValidation.prompt.message, "dataValidation.prompt.message by default is null.");
        });
    }
    export async function test_DataValidation_SetWriteEmptyDataValidation_cvt_JScript_V17() {
        const rangeAddress = "A18";
        await Excel.run(async (ctx) => {
            let worksheet = ctx.workbook.worksheets.getItem(sheetName);
            worksheet.getRange(rangeAddress).dataValidation.rule = {
                custom: {
                    formula: '=AND(ISNUMBER(A1),LEN(A1)=9)'
                }
            };
            let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
            await ctx.sync();
            Util.assertCompareValues(Excel.DataValidationType.custom, dataValidation.type);
            Util.assertCompareValues("=AND(ISNUMBER(A1),LEN(A1)=9)", dataValidation.rule.custom.formula, "Verify custom.formula");
            dataValidation.clear();
            let dataValidationEmpty = worksheet.getRange(rangeAddress).dataValidation.load();
            
            dataValidation = dataValidationEmpty;
            let dataValidationRefresh = worksheet.getRange(rangeAddress).dataValidation.load();
            await ctx.sync();
            Util.assertCompareValues(Excel.DataValidationType.none, dataValidationRefresh.type, "No data validation in this range.");
            Util.assertCompareValues(null, dataValidationRefresh.rule.custom, "No custom data validation in this range after clear.");
        });
    }
    export async function test_DataValidation_SetDVNullTest_cvt_JScript_V17() {
        const rangeAddress = "A19";
        await Excel.run(async (ctx) => {
            let worksheet = ctx.workbook.worksheets.getItem(sheetName);
            let dataValidation = worksheet.getRange(rangeAddress).dataValidation;
            let rule = {
                textLength: {
                    operator: Excel.DataValidationOperator.lessThanOrEqualTo,
                    formula1: 15,
                }
            };
            var errorAlert = {
                style: Excel.DataValidationAlertStyle.warning,
                title: 'Text length alert',
                message: 'Text length should be less than 15',
                showAlert: false,
            };
            dataValidation.rule = rule;
            dataValidation.errorAlert = errorAlert;
            dataValidation.ignoreBlanks = false;
            dataValidation.prompt = {
                message: 'Please enter texts with less than 15 characters.',
                title: 'Text Length Max 15',
                showPrompt: false, 
            };
            let dataValidaitonRefresh = worksheet.getRange(rangeAddress).dataValidation.load();
            await ctx.sync();
            
            dataValidation.prompt = {
                message: null,
                showPrompt: true,
                title: null
            };
            dataValidaitonRefresh.prompt = null;
            
            dataValidation.errorAlert = null;
            dataValidaitonRefresh.errorAlert = {
                message: null,
                showAlert: true,
                style: Excel.DataValidationAlertStyle.stop,
                title: null
            };
            dataValidaitonRefresh.rule.textLength = {
                formula1: null,
                formula2: null,
                operator: Excel.DataValidationOperator.lessThanOrEqualTo
            };
            dataValidaitonRefresh.load();
            await ctx.sync();
            
            Util.assertCompareValues('15', dataValidaitonRefresh.rule.textLength.formula1, "rule.textLength.formula1");
            Util.assertCompareValues(null, dataValidaitonRefresh.rule.textLength.formula2, "rule.textLength.formula2");
            Util.assertCompareValues(Excel.DataValidationOperator.lessThanOrEqualTo, dataValidaitonRefresh.rule.textLength.operator, "rule.textLength.operator");
            Util.assertCompareValues(true, dataValidaitonRefresh.errorAlert.showAlert, "dataValidation.errorAlert.showAlert");
            Util.assertCompareValues("Text Length Max 15", dataValidaitonRefresh.prompt.title, "dataValidaitonRefresh.prompt.title should stay since null value is no op");
            Util.assertCompareValues("Please enter texts with less than 15 characters.", dataValidaitonRefresh.prompt.message, "dataValidaitonRefresh.prompt.message should stay since null value is no op");
            Util.assertCompareValues("Text length alert", dataValidaitonRefresh.errorAlert.title, "dataValidation.errorAlert.Title");
            Util.assertCompareValues("Text length should be less than 15", dataValidaitonRefresh.errorAlert.message, "dataValidation.errorAlert.message"); 
            Util.assertCompareValues(Excel.DataValidationAlertStyle.stop, dataValidaitonRefresh.errorAlert.style, "dataValidation.errorAlert.style");
            Util.assertCompareValues(true, dataValidaitonRefresh.prompt.showPrompt, "dataValidation.prompt.showPrompt");
        });
    }
    export async function test_DataValidation_SetRuleToNullToDeleteDV_cvt_JScript_V17() {
        const rangeAddress = "A20";
        await Excel.run(async (ctx) => {
            let worksheet = ctx.workbook.worksheets.getItem(sheetName);
            worksheet.getRange(rangeAddress).dataValidation.rule = {
                custom: {
                    formula: '=AND(ISNUMBER(A1),LEN(A1)=9)'
                }
            };
            let dataValidation = worksheet.getRange(rangeAddress).dataValidation.load("type,rule");
            await ctx.sync();
            Util.assertCompareValues(Excel.DataValidationType.custom, dataValidation.type);
            Util.assertCompareValues("=AND(ISNUMBER(A1),LEN(A1)=9)", dataValidation.rule.custom.formula, "Verify custom.formula");
            dataValidation.rule = null; 
            let dataValidationRefresh = worksheet.getRange(rangeAddress).dataValidation.load();
            await ctx.sync();
            Util.assertCompareValues(Excel.DataValidationType.custom, dataValidationRefresh.type, "No data validation in this range.");
            Util.assertCompareValues("=AND(ISNUMBER(A1),LEN(A1)=9)", dataValidationRefresh.rule.custom.formula, "Set rule to null should be no op");
        });
    }
}?module ExcelTest {
	
	
	
	export module FunctionsHelper {
		
		export function validateAgainstExcelFormula(
			formula: string,
			action: (ctx: Excel.RequestContext) => Excel.FunctionResult<any>,
			optionals?: { expectedResult?: any; allowableMarginOfError?: number });
		
		export function validateAgainstExcelFormula(
			setupAction: (ctx: Excel.RequestContext) => void,
			formula: string,
			action: (ctx: Excel.RequestContext) => Excel.FunctionResult<any> | OfficeExtension.IPromise<Excel.FunctionResult<any>>,
			optionals?: { expectedResult?: any; allowableMarginOfError?: number });
		
		export function validateAgainstExcelFormula() {
			var setupAction: (ctx: Excel.RequestContext) => void;
			
			var argumentIndexForFormula = 0;
			if (typeof arguments[0] === "function") {
				setupAction = arguments[0];
				argumentIndexForFormula++;
			}
			var formula: string = arguments[argumentIndexForFormula];
			var action: (ctx: Excel.RequestContext) => Excel.FunctionResult<any> | OfficeExtension.IPromise<Excel.FunctionResult<any>> =
				arguments[argumentIndexForFormula + 1];
			var optionals: { expectedResult?: any; allowableMarginOfError?: number } = arguments[argumentIndexForFormula + 2];
			Excel.run(function (ctx) {
				if (setupAction) {
					setupAction(ctx);
				}
				
				
				var functionResultOrPromiseThereof = action(ctx);
				if (functionResultOrPromiseThereof instanceof Excel.FunctionResult) {
					return performActualComparison(functionResultOrPromiseThereof);
				} else if ((<any>functionResultOrPromiseThereof).then) {
					return (<OfficeExtension.IPromise<Excel.FunctionResult<any>>>functionResultOrPromiseThereof).then(function (functionResult) {
						return performActualComparison(functionResult);
					});
				} else {
					throw new Error("Expecting action to either be a FunctionResult or a Promise for one");
				}
				function performActualComparison(functionResult: Excel.FunctionResult<any>): OfficeExtension.IPromise<any> {
					functionResult.load();
					
					var cell = ctx.workbook.worksheets.getItem("Sheet2").getRange("A1");
					cell.formulas = [[formula]];
					cell.load("values, valueTypes");
					return ctx.sync()
						.then(function () {
							if (cell.valueTypes[0][0] === Excel.RangeValueType.error) {
								Util.assertCompareValues(cell.values[0][0], functionResult.error,
									"For cell with error value, functionResult.error should match the text value of the cell's .value (which is where we report the error)");
								Util.assertCompareValues(null, functionResult.value, "If cell is error type, functionResult.value should be null");
								checkAgainstDevSpecifiedExpectedTestResult(functionResult.error);
							} else {
								Util.assertCompareValues(null, functionResult.error, "If cell is non-error type, functionResult.error should be null");
								if (typeof optionals != 'undefined' && !isNaN(optionals.allowableMarginOfError)) {
									Util.assertCompareNumeric(cell.values[0][0], functionResult.value, optionals.allowableMarginOfError, "Cell value should be within allowable margin of error from functionResult.value");
								} else {
									Util.assertCompareValues(cell.values[0][0], functionResult.value, "Cell value should match functionResult.value");
								}
								checkAgainstDevSpecifiedExpectedTestResult(functionResult.value);
							}
							function checkAgainstDevSpecifiedExpectedTestResult(actual: any) {
								if (typeof optionals != 'undefined' && typeof optionals.expectedResult != 'undefined') {
									Util.assertCompareValues(optionals.expectedResult, actual);
								}
							}
						});
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		}
	}
	
	
	
	export function test_Functions_BasicNumberArrayTest_bvt_JScript_V12() {
		Excel.run(function (ctx) {
			var result = ctx.workbook.functions.sum(1, 2, 3.5, 10.333);
			result.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(16.833, result.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_StringAndRangeAndBoolArguments_bvt_JScript_V12() {
		Excel.run(function (ctx) {
			var range = ctx.workbook.worksheets.getItem("Charts").getRange("E2:H5");
			var result = ctx.workbook.functions.vlookup("Wrench", range, 3, false);
			result.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(11, result.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_WillExtractValueFromRangeIfNeeded_bvt_JScript_V12() {
		Excel.run(function (ctx) {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1:b1");
			range.formulas = [["=5/5", "=5/InvalidRangeThatDoesntExist"]];
			var isNotError = ctx.workbook.functions.isError(<any>range.getCell(0, 0)).load();
			var isError = ctx.workbook.functions.isError(<any>range.getCell(0, 1)).load();
			return ctx.sync()
				.then(function () {
					
					Util.assertCompareValues(null, isNotError.error);
					Util.assertCompareValues(null, isError.error);
	
					
					Util.assertCompareValues(false, isNotError.value);
					Util.assertCompareValues(true, isError.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_AllowRangeObjectsAsPartOfArrayTest_cvt_JScript_V12() {
		
		Excel.run(function (ctx) {
			var result = ctx.workbook.functions.sum(
				20,
				ctx.workbook.worksheets.getItem("Charts").getRange("F3:F5"),
				ctx.workbook.worksheets.getItem("Charts").getRange("H3:H5")
			).load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(110, result.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_Coercion_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var shouldFail1 = ctx.workbook.functions.sum(1, 2, 3, <any>"A string").load();
			var shouldFail2 = ctx.workbook.functions.sum(1, 2, 3, <any>"10").load();
			return ctx.sync()
				.then(function () {
					[shouldFail1, shouldFail2].forEach(function (result) {
						Util.assertCompareValues("#VALUE!", result.error);
						Util.assertCompareValues(null, result.value);
					});
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_FailOnMoreThan255Arguments_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var args = [];
			for (var i = 0; i < 255; i++) {
				args.push(i);
			}
			var functions = ctx.workbook.functions;
			
			var result = functions.sum.apply(functions, args);
			result.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues((0 + 254) / 2 * 255, result.value);
					
					args.push(255);
					result = functions.sum.apply(functions, args);
					result.load();
					return ctx.sync().then(function () {
						throw new Error("Expected to fail");
					}).catch(function (error) {
						RichApiTest.log.comment("Catching expected error");
						var expected = (error instanceof OfficeExtension.Error) && ((<OfficeExtension.Error>error).code == Excel.ErrorCodes.invalidArgument);
						if (!expected) {
							throw new Error("Expected to fail with invalidArgument, but failed with another error, instead");
						}
					})
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_AllowOptionalParams_cvt_JScript_V12() {
		
		Excel.run(function (ctx) {
			var range = ctx.workbook.worksheets.getItem("Charts").getRange("E2:H5");
			var result = ctx.workbook.functions.vlookup("Wrench", range, 3);
			result.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(11, result.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_ChainingResults_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var range = ctx.workbook.worksheets.getItem("Charts").getRange("E2:H5");
			var sumOfTwoLookups = ctx.workbook.functions.sum(
				ctx.workbook.functions.vlookup("Wrench", range, 2, false),
				ctx.workbook.functions.vlookup("Wrench", range, 3, false)
				);
			sumOfTwoLookups.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(12 + 11, sumOfTwoLookups.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_CanUseResultValuesAcrossRequests_cvt_JScript_V12() {
		Excel.run((ctx) => {
			var range = ctx.workbook.worksheets.getItem("Charts").getRange("E2:H5");
			var wrenchNov = ctx.workbook.functions.vlookup("Wrench", range, 2, false);
			var wrenchDec = ctx.workbook.functions.vlookup("Wrench", range, 3, false);
			ctx.load(wrenchNov);
			ctx.load(wrenchDec);
		
			return ctx.sync()
				.then(() => {
					var sumOfTwoLookups = ctx.workbook.functions.sum(
						<number>wrenchNov.value,
						<number>wrenchDec.value
					);
					sumOfTwoLookups.load();
					return sumOfTwoLookups;
				})
				.then(ctx.sync)
				.then((sumOfTwoLookups) => {
					Util.assertCompareValues(12 + 11, sumOfTwoLookups.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_CannotUseResultObjectsAcrossRequests_cvt_JScript_V12() {
		
		
		Excel.run((ctx) => {
			var range = ctx.workbook.worksheets.getItem("Charts").getRange("E2:H5");
			var wrenchNov = ctx.workbook.functions.vlookup("Wrench", range, 2, false);
			var wrenchDec = ctx.workbook.functions.vlookup("Wrench", range, 3, false);
			return ctx.sync()
				.then(() => {
					try {
						var sumOfTwoLookups = ctx.workbook.functions.sum(
							wrenchNov,
							wrenchDec
						);
						throw new Error("Should have failed with invalid object path");
					} catch (ex) {
						if (ex instanceof OfficeExtension.Error && (<OfficeExtension.Error>ex).code == "InvalidObjectPath") {
							RichApiTest.log.comment("Caught expected exception " + ex);
						} else {
							throw new Error("Caught exception, but not the expected one!" + ex);
						}
					}
				})
				.then(ctx.sync)
				.catch((e) => {
					
					
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_FailOnInsufficientParameterCount_cvt_JScript_V12() {
		
		Excel.run(function (ctx) {
			var result = (<any>ctx.workbook.functions.vlookup)("Wrench");
			result.load();
			return ctx.sync()
				.then(function () {
					throw Error("Should have failed with invalid args");
				})
				.catch(function (error) {
					RichApiTest.log.comment("Catching expected error");
					var expected = (error instanceof OfficeExtension.Error) && ((<OfficeExtension.Error>error).code == Excel.ErrorCodes.invalidArgument);
					if (!expected) {
						throw new Error("Expected to fail with invalidArgument, but failed with another error, instead");
					}
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_AllowNullAsPartOfArgument_cvt_JScript_V12() {
		
		Excel.run(function (ctx) {
			var result = ctx.workbook.functions.sum(1, null, 2, null, 3, 4, 5, null, null, null)
			result.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(15, result.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_ErrorsAreSurfaced_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1");
			range.formulas = [["=5/InvalidRangeThatDoesntExist"]];
			var result = ctx.workbook.functions.sum(15, range).load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("#NAME?", result.error);
					Util.assertCompareValues(null, result.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_ErrorsCanBeChained1_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1:b1");
			range.formulas = [["=5", "=A1/InvalidRangeThatDoesntExist"]];
		
			var cell1PlusTwenty = ctx.workbook.functions.isError(
				ctx.workbook.functions.sum(range.getCell(0, 0), 20)
			);
			cell1PlusTwenty.load();
			var cell2PlusTwenty = ctx.workbook.functions.isError(
				ctx.workbook.functions.sum(range.getCell(0, 1), 20)
			);
			cell2PlusTwenty.load();
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment("First cell is NOT an error");
					Util.assertCompareValues(false , cell1PlusTwenty.value);
					Util.assertCompareValues(null, cell1PlusTwenty.error);
					RichApiTest.log.comment("Second cell IS an error");
					Util.assertCompareValues(true , cell2PlusTwenty.value);
					Util.assertCompareValues(null, cell2PlusTwenty.error);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_ErrorsCanBeChained2_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1");
			range.formulas = [["=5/InvalidRangeThatDoesntExist"]]
			var result = ctx.workbook.functions.sum(
				ctx.workbook.functions.sum(15, range),
				10
			).load();
			return ctx.sync()
				.then(function () {
					
					Util.assertCompareValues("#NAME?", result.error);
					Util.assertCompareValues(null, result.value);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_ValueExtractionOnlyForSingleCell_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1:b1");
			range.formulas = [["=5/5", "=5/InvalidRangeThatDoesntExist"]];
			var shouldFail = ctx.workbook.functions.isError(<any>range).load();
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_CanUseComplexTypeInJavascriptToo_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var result = ctx.workbook.functions.sum(
				{ address: 'Table5[[#Totals],[Column2]:[Column4]]' }
			).load();
			return ctx.sync().then(function () {
				Util.assertCompareValues(null, result.error);
				Util.assertCompareValues(40.5, result.value);
			})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_$Count_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var columnsAC = ctx.workbook.worksheets.getItem("Sheet1").getRange("a:c");
			columnsAC.clear();
			columnsAC.getCell(3, 0).values = [[5]];
			columnsAC.getCell(8, 0).values = [[10]];
			columnsAC.getCell(9, 0).values = [["some text"]];
			columnsAC.getCell(0, 2).values = [[8]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=COUNT(Sheet1!A:A, Sheet1!C:C)',
			function (ctx) {
				var sheet = ctx.workbook.worksheets.getItem("Sheet1");
				return ctx.workbook.functions.count(
					sheet.getRange("a:a"),
					sheet.getRange("c:c"))
			}
		);
	}
	export function test_Functions_$If_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IF(true, "greater than 5", "not")',
			function (ctx) {
				return ctx.workbook.functions.if(true, "greater than 5", "not");
			}
		);
	}
	export function test_Functions_$If$ChainedResult_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
			cellA5.values = [[10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=IF(IsOdd(Sheet1!A5), "is blank", "is not odd")',
			function (ctx) {
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
				return ctx.workbook.functions.if((ctx.workbook.functions.isOdd(cellA5)), "is blank", "is not odd");
			},
			{ expectedResult: "is not odd" }
		);
	}
	export function test_Functions_$If$Only2ArgsTrueCase_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IF(true, "greater than 5")',
			function (ctx) {
				return ctx.workbook.functions.if(true, "greater than 5");
			}
		);
	}
	export function test_Functions_$If$Only2ArgsFalseCase_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IF(false, "greater than 5")',
			function (ctx) {
				return ctx.workbook.functions.if(false, "greater than 5");
			},
			{ expectedResult: false  }
		);
	}
	export function test_Functions_$If$MissedArgumentForTrue_cvt_JScript_V12() {
	
	
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			"not", 
			function (ctx) {
				return ctx.workbook.functions.if(false, null, "not");
			}
		);
	}
	export function test_Functions_$IsNA$false_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
			cellA5.values = [[10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=ISNA(Sheet1!A5)',
			function (ctx) {
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
				return ctx.workbook.functions.isNA(cellA5);
			},
			{ expectedResult: false }
		);
	}
	export function test_Functions_$IsNA$true_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
			cellA5.formulas = [['=vlookup("NonexistantItem", Charts!E2:H5, 2, false)']];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=ISNA(Sheet1!A5)',
			function (ctx) {
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
				return ctx.workbook.functions.isNA(cellA5);
			},
			{ expectedResult: true }
		);
	}
	export function test_Functions_$IsError$false_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
			cellA5.values = [[10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=ISERROR(Sheet1!A5)',
			function (ctx) {
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
				return ctx.workbook.functions.isError(cellA5);
			},
			{ expectedResult: false }
		);
	}
	export function test_Functions_$IsError$true$NA_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
			cellA5.formulas = [['=vlookup("NonexistantItem", Charts!E2:H5, 2, false)']];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=ISERROR(Sheet1!A5)',
			function (ctx) {
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
				return ctx.workbook.functions.isError(cellA5);
			},
			{ expectedResult: true }
		);
	}
	export function test_Functions_$IsError$true$DIV0_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
			cellA5.formulas = [['=1/0']];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=ISERROR(Sheet1!A5)',
			function (ctx) {
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a5");
				return ctx.workbook.functions.isError(cellA5);
			},
			{ expectedResult: true }
		);
	}
	export function test_Functions_$Sum_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var columnA = ctx.workbook.worksheets.getItem("Sheet1").getRange("A:A");
			columnA.clear();
			columnA.getCell(3, 0).values = [[5]];
			columnA.getCell(8, 0).values = [[10]];
			columnA.getCell(9, 0).values = [["some text"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=SUM(Sheet1!A:A, 1, 2, 3.5, 10.333)',
			function (ctx) {
				var columnA = ctx.workbook.worksheets.getItem("Sheet1").getRange("A:A");
				return ctx.workbook.functions.sum(columnA, 1, 2, 3.5, 10.333);
			},
			{
				expectedResult: (5 + 10)  + (1 + 2 + 3.5 + 10.333) 
			}
		);
	}
	export function test_Functions_$Average_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var columnA = ctx.workbook.worksheets.getItem("Sheet1").getRange("A:A");
			columnA.clear();
			columnA.getCell(3, 0).values = [[5]];
			columnA.getCell(8, 0).values = [[10]];
			columnA.getCell(9, 0).values = [["some text"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=AVERAGE(Sheet1!A:A, 12, 15)',
			function (ctx) {
				var columnA = ctx.workbook.worksheets.getItem("Sheet1").getRange("A:A");
				return ctx.workbook.functions.average(columnA, 12, 15);
			},
			{ expectedResult: (5 + 10 + 12 + 15) / 4 }
		);
	}
	export function test_Functions_$Min_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A9");
			range.values = [5, 10, "", "text", 2, "", true, "'1", ""].map((value) => [value]);
			
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=MIN(Sheet1!A1:A9)',
			function (ctx) {
				var columnA = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A9");
				return ctx.workbook.functions.min(columnA);
			},
			{ expectedResult: 2 }
		);
	}
	export function test_Functions_$Max_cvt_JScript_V12() {
		var setupAction = function (ctx) {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A9");
			range.values = [5, 10, "", "text", 2, "", true, "'20", ""].map(function (value) { return [value]; });
			
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(setupAction,
			'=MAX(Sheet1!A1:A9)',
			function (ctx) {
				var columnA = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A9");
				return ctx.workbook.functions.max(columnA);
			},
			{ expectedResult: 10 }
		);
	}
	export function test_Functions_$Na_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NA()',
			function (ctx) {
				return ctx.workbook.functions.na();
			}
		);
	}
	export function test_Functions_$Npv_cvt_JScript_V12() {
		
		
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SUM(NPV(0.08, 8000, 9200, 10000, 12000, 14500, -9000), -40000)',
			function (ctx) {
				return ctx.workbook.functions.sum(
					ctx.workbook.functions.npv(0.08, 8000, 9200, 10000, 12000, 14500, -9000),
					-40000
					);
			}
		);
	}
	export function test_Functions_$Dollar_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DOLLAR(43, 5)',
			function (ctx) {
				return ctx.workbook.functions.dollar(43, 5);
			},
			{ expectedResult: '$43.00000' }
		);
	}
	export function test_Functions_$Fixed_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FIXED(123456, 4)',
			function (ctx) {
				return ctx.workbook.functions.fixed(123456, 4);
			},
			{ expectedResult: "123,456.0000" }
		);
	}
	export function test_Functions_$Fixed$NoCommas$True_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FIXED(123456, 4, true)',
			function (ctx) {
				return ctx.workbook.functions.fixed(123456, 4, true);
			},
			{ expectedResult: "123456.0000" }
		);
	}
	export function test_Functions_$Fixed$NoCommas$False_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FIXED(123456, 4, false)',
			function (ctx) {
				return ctx.workbook.functions.fixed(123456, 4, false);
			},
			{ expectedResult: "123,456.0000" }
		);
	}
	export function test_Functions_$Fixed$SkipMiddleArgument$False_cvt_JScript_V12() {
		
		
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FIXED(123456, ,True)',
			function (ctx) {
				return ctx.workbook.functions.fixed(123456, null, true);
			},
			{ expectedResult: "123456.00" }
		);
	}
	export function test_Functions_$Fixed$WillFailOnWrongArgumentTypePassed$InNotANumber_cvt_JScript_V12() {
		Excel.run(function(ctx) {
			var result = ctx.workbook.functions.fixed(123456, <any>"not a number").load();
			return ctx.sync()
				.then(function() {
					Util.assertCompareValues("#VALUE!", result.error);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_$Fixed$WillFailOnWrongArgumentTypePassed$NumberAsString_cvt_JScript_V12() {
		Excel.run(function(ctx) {
			var result = ctx.workbook.functions.fixed(123456, <any>"4").load();
			return ctx.sync()
				.then(function() {
					Util.assertCompareValues("#VALUE!", result.error);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_$Sin_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SIN(PI()/4)',
			function (ctx) {
				return ctx.workbook.functions.sin(ctx.workbook.functions.product(ctx.workbook.functions.pi(), .25));
			}
		);
	}
	export function test_Functions_$Cos_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COS(.6)',
			function (ctx) {
				return ctx.workbook.functions.cos(.6);
			}
		);
	}
	export function test_Functions_$Tan_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=TAN(1/2)',
			function (ctx) {
				return ctx.workbook.functions.tan(1/2);
			}
		);
	}
	export function test_Functions_$Atan_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ATAN(0.54630249)',
			function (ctx) {
				return ctx.workbook.functions.atan(0.54630249);
			}
		);
	}
	export function test_Functions_$Pi_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=PI()',
			function (ctx) {
				return ctx.workbook.functions.pi();
			}
		);
	}
	export function test_Functions_$Sqrt_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SQRT(8)',
			function (ctx) {
				return ctx.workbook.functions.sqrt(8);
			}
		);
	}
	export function test_Functions_$Exp_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=EXP(3.5)',
			function (ctx) {
				return ctx.workbook.functions.exp(3.5)
			}
		);
	}
	export function test_Functions_$Ln_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LN(45)',
			function (ctx) {
				return ctx.workbook.functions.ln(45);
			}
		);
	}
	export function test_Functions_$Log10_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LOG10(99)',
			function (ctx) {
				return ctx.workbook.functions.log10(99);
			}
		);
	}
	export function test_Functions_$Abs_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ABS(-20)',
			function (ctx) {
				return ctx.workbook.functions.abs(-20)
			},
			{ expectedResult: 20 }
		);
	}
	export function test_Functions_$Int_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=INT(4.55)',
			function (ctx) {
				return ctx.workbook.functions.int(4.55);
			}
		);
	}
	export function test_Functions_$Int$WillRequireNumber_cvt_JScript_V12() {
		Excel.run(function(ctx) {
			var result = ctx.workbook.functions.int(<any>"45.67").load();
			return ctx.sync()
				.then(function() {
					Util.assertCompareValues("#VALUE!", result.error);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	
	export function test_Functions_$Sign_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SIGN(-5)',
			function (ctx) {
				return ctx.workbook.functions.sign(-5);
			},
			{ expectedResult: -1 }
		);
	}
	export function test_Functions_$Round_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ROUND(1.123456, 3)',
			function (ctx) {
				return ctx.workbook.functions.round(1.123456, 3);
			}
		);
	}
	export function test_Functions_$Lookup_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1:b3");
			range.clear();
			range.values = [
				["a", 23],
				["b", 12],
				["c", 5]
			];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=LOOKUP("b", Sheet1!A1:A3, Sheet1!B1:B3)',
			function (ctx) {
				var sheet = ctx.workbook.worksheets.getItem("Sheet1");
				return ctx.workbook.functions.lookup("b", sheet.getRange("A1:A3"), sheet.getRange("B1:B3"));
			},
			{ expectedResult: 12 }
		);
	}
	export function test_Functions_$Rept_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=REPT("hello", 5)',
			function (ctx) {
				return ctx.workbook.functions.rept("hello", 5);
			},
			{ expectedResult: "hellohellohellohellohello" }
		);
	}
	export function test_Functions_$Rept$NegativeIndex_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=REPT("hello", -1)',
			function (ctx) {
				return ctx.workbook.functions.rept("hello", -1);
			},
			{ expectedResult: "#VALUE!" }
		);
	}
	export function test_Functions_$Mid_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=MID("hello", 1, 2)',
			function (ctx) {
				return ctx.workbook.functions.mid("hello", 1, 2);
			},
			{ expectedResult: "he"  }
		);
	}
	export function test_Functions_$Mid$NegativeIndex_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=MID("hello", -1, 2)',
			function (ctx) {
				return ctx.workbook.functions.mid("hello", -1, 2);
			},
			{ expectedResult: "#VALUE!" }
		);
	}
	export function test_Functions_$Len_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LEN("Hello")',
			function (ctx) {
				return ctx.workbook.functions.len("Hello");
			},
			{ expectedResult: 5 }
		);
	}
	export function test_Functions_$Len$BlankCell_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1");
			range.clear();
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=Len(Sheet1!A1)',
			function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1");
				return ctx.workbook.functions.len(range);
			}
		);
	}
	export function test_Functions_$Value_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=VALUE("4.5")',
			function (ctx) {
				return ctx.workbook.functions.value(4.5);
			}
		);
	}
	export function test_Functions_$Value$WrongInput_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=VALUE(TRUE())',
			function (ctx) {
				return ctx.workbook.functions.value(true);
			}
		);
	}
	export function test_Functions_$Value$FromBlankCell_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1");
			range.clear();
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=VALUE(Sheet1!A1)',
			function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1");
				return ctx.workbook.functions.value(range);
			}
		);
	}
	export function test_Functions_$True_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=TRUE()',
			function (ctx) {
				return ctx.workbook.functions.true();
			}
		);
	}
	export function test_Functions_$False_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FALSE()',
			function (ctx) {
				return ctx.workbook.functions.false();
			}
		);
	}
	export function test_Functions_$And_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var a1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1");
			a1.values = [[5]];
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:A3");
			range.clear();
			range.formulas = [["=Sheet1!A1 > 5"], ["=Sheet1!A1 > 2"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=AND(Sheet1!A2:A3)',
			function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:A3");
				return ctx.workbook.functions.and(range);
			},
			{ expectedResult: false }
		);
	}
	export function test_Functions_$Or_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var a1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1");
			a1.values = [[5]];
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:A3");
			range.clear();
			range.formulas = [["=Sheet1!A1 > 5"], ["=Sheet1!A1 > 2"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=OR(Sheet1!A2:A3)',
			function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:A3");
				return ctx.workbook.functions.or(range);
			},
			{ expectedResult: true }
		);
	}
	export function test_Functions_$Not_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var a1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1");
			a1.values = [[5]];
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
			range.clear();
			range.formulas = [["=Sheet1!A1 > 5"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=NOT(Sheet1!A2)',
			function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				return ctx.workbook.functions.not(range);
			},
			{ expectedResult: true  }
		);
	}
	export function test_Functions_$Not$PureValue_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NOT(FALSE())',
			function (ctx) {
				return ctx.workbook.functions.not(false);
			},
			{ expectedResult: true  }
		);
	}
	export function test_Functions_$Not$FailsOnMultiAreaRange_cvt_JScript_V12() {
		Excel.run(function(ctx) {
			var a1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("a1");
			a1.values = [[5]];
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:A3");
			range.clear();
			range.formulas = [["=Sheet1!A1 > 5"], ["=Sheet1!A1 > 2"]];
			var result = ctx.workbook.functions.not(range).load();
			
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
		.catch(ExcelTest.reportError)
		.then(ExcelTest.pass);
	}
	export function test_Functions_$Mod_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=MOD(7, 5)',
			function (ctx) {
				return ctx.workbook.functions.mod(7, 5);
			},
			{ expectedResult: 2 }
		);
	}
	export function test_Functions_$DCount_cvt_JScript_V12() {
        var setupAction = function (ctx: Excel.RequestContext) {
            var cellA24A26 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26");
            cellA24A26.values = [["Tree"], ["Apple"], ["Pear"]];
            var cellA27E30 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A27:E30");
            cellA27E30.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 14, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"]];
        };
        ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
            setupAction,
            '=DCOUNT(Sheet1!A27:E30, "Yield", Sheet1!A24:A26)',
            function (ctx) {
                return ctx.workbook.functions.dcount(
                    ctx.workbook.worksheets.getItem("Sheet1").getRange("A27:E30"),
                    "Profit",
                    ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26")
                );
            },
            { expectedResult: 2 }
        );
	}
	export function test_Functions_$DSum_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1F3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:F3");
			cellA1F3.values = [["Tree", "Height", "Age", "Yield", "Profit", "Height"], ["Apple", ">10", "", "", "", "<16"], ["Pear", "", "", "", "", ""]];
			var cellA5E11 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11");
			cellA5E11.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 15, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"], ["Apple", 14, 15, 10, "$75", ], ["Pear", 9, 8, 8, "$77"], ["Apple", 8, 9, 6, "$45"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=DSUM(Sheet1!A5:E11,"Profit",Sheet1!A1:A2)',
			function (ctx) {
				return ctx.workbook.functions.dsum(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11"),
					"Profit",
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A2")
					);
			},
			{ expectedResult: 225 }
		);
	}
	export function test_Functions_$DAverage_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1F3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:F3");
			cellA1F3.values = [["Tree", "Height", "Age", "Yield", "Profit", "Height"], ["Apple", ">10", "", "", "", "<16"], ["Pear", "", "", "", "", ""]];
			var cellA5E11 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11");
			cellA5E11.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 15, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"], ["Apple", 14, 15, 10, "$75", ], ["Pear", 9, 8, 8, "$77"], ["Apple", 8, 9, 6, "$45"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=DAVERAGE(Sheet1!A5:E11, "Yield", Sheet1!A1:B2)',
			function (ctx) {
				return ctx.workbook.functions.daverage(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11"),
					"Yield",
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B2")
					);
			},
			{ expectedResult: 12.5 }
		);
	}
	export function test_Functions_$DMin_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1F3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:F3");
			cellA1F3.values = [["Tree", "Height", "Age", "Yield", "Profit", "Height"], ["Apple", ">10", "", "", "", "<16"], ["Pear", "", "", "", "", ""]];
			var cellA5E11 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11");
			cellA5E11.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 15, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"], ["Apple", 14, 15, 10, "$75", ], ["Pear", 9, 8, 8, "$77"], ["Apple", 8, 9, 6, "$45"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=DMIN(Sheet1!A5:E11, "Yield", Sheet1!A1:B2)',
			function (ctx) {
				return ctx.workbook.functions.dmin(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11"),
					"Yield",
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B2")
					);
			},
			{ expectedResult: 10 }
		);
	}
	export function test_Functions_$DMax_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1F3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:F3");
			cellA1F3.values = [["Tree", "Height", "Age", "Yield", "Profit", "Height"], ["Apple", ">10", "", "", "", "<16"], ["Pear", "", "", "", "", ""]];
			var cellA5E11 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11");
			cellA5E11.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 15, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"], ["Apple", 14, 15, 10, "$75", ], ["Pear", 9, 8, 8, "$77"], ["Apple", 8, 9, 6, "$45"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=DMAX(Sheet1!A5:E11, "Yield", Sheet1!A1:B2)',
			function (ctx) {
				return ctx.workbook.functions.dmax(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11"),
					"Yield",
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B2")
					);
			},
			{ expectedResult: 15 }
		);
	}
	export function test_Functions_$DStDev_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1F3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:F3");
			cellA1F3.values = [["Tree", "Height", "Age", "Yield", "Profit", "Height"], ["Apple", ">10", "", "", "", "<16"], ["Pear", "", "", "", "", ""]];
			var cellA5E11 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11");
			cellA5E11.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 15, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"], ["Apple", 14, 15, 10, "$75", ], ["Pear", 9, 8, 8, "$77"], ["Apple", 8, 9, 6, "$45"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=DSTDEV(Sheet1!A5:E11, "Yield", Sheet1!A1:A3)',
			function (ctx) {
				return ctx.workbook.functions.dstDev(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11"),
					"Yield",
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A3")
					);
			},
			{ expectedResult: 3.3466401061363 }
		);
	}
	export function test_Functions_$DVar_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1F3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:F3");
			cellA1F3.values = [["Tree", "Height", "Age", "Yield", "Profit", "Height"], ["Apple", ">10", "", "", "", "<16"], ["Pear", "", "", "", "", ""]];
			var cellA5E11 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11");
			cellA5E11.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 15, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"], ["Apple", 14, 15, 10, "$75", ], ["Pear", 9, 8, 8, "$77"], ["Apple", 8, 9, 6, "$45"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=DVAR(Sheet1!A5:E11, "Yield", Sheet1!A1:A3)',
			function (ctx) {
				return ctx.workbook.functions.dvar(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11"),
					"Yield",
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A3")
					);
			},
			{ expectedResult: 11.2 }
		);
	}
	export function test_Functions_$Text_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24");
			cellA24.values = [[10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=TEXT(Sheet1!A24,"$0.00")',
			function (ctx) {
				return ctx.workbook.functions.text(ctx.workbook.worksheets.getItem("Sheet1").getRange("A24"), "$0.00");
			},
			{ expectedResult: "$10.00" }
		);
	}
	export function test_Functions_$Pv_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A26 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26");
			cellA24A26.values = [['$500'], ['8%'], [20]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=PV(Sheet1!A25, Sheet1!A26, Sheet1!A24, ,0)',
			function (ctx) {
				return ctx.workbook.functions.pv(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A25"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A26"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24"),
					null,
					0);
			},
			{ expectedResult: -4909.07370372465 }
		);
	}
	export function test_Functions_$Fv_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A26 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26");
			cellA24A26.values = [['$500'], ['8%'], [20]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=FV(Sheet1!A25, Sheet1!A26, Sheet1!A24, ,0)',
			function (ctx) {
				return ctx.workbook.functions.fv(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A25"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A26"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24"),
					null,
					0);
			},
			{ expectedResult: -22880.9821490582 }
		);
	}
	export function test_Functions_$NPer_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A26 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26");
			cellA24A26.values = [['$500'], ['8%'], [20]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=NPER(Sheet1!A25, Sheet1!A26, Sheet1!A24, ,0)',
			function (ctx) {
				return ctx.workbook.functions.nper(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A25"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A26"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24"),
					null,
					0);
			},
			{ expectedResult: -14.2749145860032 }
		);
	}
	export function test_Functions_$Pmt_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A26 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26");
			cellA24A26.values = [['$500'], ['8%'], [20]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=PMT(Sheet1!A25, Sheet1!A26, Sheet1!A24, 0,0)',
			function (ctx) {
				return ctx.workbook.functions.pmt(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A25"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A26"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24"),
					0,
					0);
			},
			{ expectedResult: -50.9261044115753 }
		);
	}
	export function test_Functions_$Rate_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A26 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26");
			cellA24A26.values = [[60], [-200], [8000]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=RATE(Sheet1!A24, Sheet1!A25, Sheet1!A26)',
			function (ctx) {
				var p = ctx.workbook.functions.rate(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A25"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A26"));
				return p;
			},
			{ expectedResult: 0.0143947810009141 }
		);
	}
	export function test_Functions_$MIrr_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A31 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A31");
			cellA24A31.values = [[-120000], [39000], [30000], [21000], [37000], [46000], [0.1], [0.2]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=MIRR(Sheet1!A24:A29, Sheet1!A30, Sheet1!A31)',
			function (ctx) {
				return ctx.workbook.functions.mirr(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A29"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A30"),
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A31"));
			},
			{ expectedResult: 0.16120278738044 }
		);
	}
	export function test_Functions_$Irr_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A28 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A29");
			cellA24A28.values = [[-70000], [12000], [15000], [18000], [21000], [26000]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=IRR(Sheet1!A24:A28)',
			function (ctx) {
				return ctx.workbook.functions.irr(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A28"),
					null
				);
			},
			{ expectedResult: -0.0212448482734109 }
		);
	}
	export function test_Functions_$Rand_cvt_JScript_V12() {
		
		
		Excel.run(function (ctx) {
			var result = ctx.workbook.functions.product(ctx.workbook.functions.rand(), 10);
			result.load();
			return ctx.sync()
				.then(function () {
					Util.assert(() => !isNaN(result.value))
					Util.assert(() => result.value >= 0 && result.value < 10);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_$Match_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A28 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:B27");
			cellA24A28.values = [["Bananas", 25], ["Oranges", 38], ["Apples", 40], ["Pears", 41]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=MATCH(39, Sheet1!B24:B27,1)',
			function (ctx) {
				return ctx.workbook.functions.match(
					39,
					ctx.workbook.worksheets.getItem("Sheet1").getRange("B24:B27"),
					1);
			},
			{ expectedResult: 2 }
		);
	}
	export function test_Functions_$Date_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DATE(2015, 12, 15)',
			function (ctx) {
				return ctx.workbook.functions.date(2015, 12, 15);
			}
		);
	}
	
	export function test_Functions_$Time_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula('=time(5,6,7)', function (ctx) {
			return ctx.workbook.functions.time(5, 6, 7);
		});
	}
	export function test_Functions_$Day_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DAY(DATE(2015,12,14))',
			function (ctx) {
				return ctx.workbook.functions.day(
					ctx.workbook.functions.date(2015, 12, 14)
				);
			},
			{ expectedResult: 14 }
		);
	}
	export function test_Functions_$Month_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=MONTH(DATE(2015,12,14))',
			function (ctx) {
				return ctx.workbook.functions.month(
					ctx.workbook.functions.date(2015, 12, 14)
				);
			},
			{ expectedResult: 12 }
		);
	}
	export function test_Functions_$Year_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=YEAR(DATE(2015,12,14))',
			function (ctx) {
				return ctx.workbook.functions.year(
					ctx.workbook.functions.date(2015, 12, 14)
				);
			},
			{ expectedResult: 2015 }
		);
	}
	export function test_Functions_$Weekday_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=WEEKDAY(DATE(2015,12,14))',
			function (ctx) {
				return ctx.workbook.functions.weekday(
					ctx.workbook.functions.date(2015, 12, 14)
				);
			},
			{ expectedResult: 2 }
		);
	}
	export function test_Functions_$Hour_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=HOUR(TIME(14,33,51))',
			function (ctx) {
				return ctx.workbook.functions.hour(
					ctx.workbook.functions.time(14, 33, 51)
				);
			},
			{ expectedResult: 14 }
		);
	}
	export function test_Functions_$Minute_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=MINUTE(TIME(14,33,51))',
			function (ctx) {
				return ctx.workbook.functions.minute(
					ctx.workbook.functions.time(14, 33, 51)
				);
			},
			{ expectedResult: 33 }
		);
	}
	export function test_Functions_$Second_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SECOND(TIME(14,15,51))',
			function (ctx) {
				return ctx.workbook.functions.second(
					ctx.workbook.functions.time(14, 15, 51)
				);
			},
			{ expectedResult: 51 }
		);
	}
	export function test_Functions_$Now_cvt_JScript_V12() {
		var fiveSecondsExpressedAsFractionOfDay = 1 / 24 / 60 / 60 * 5;
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NOW()',
			function (ctx) {
				return ctx.workbook.functions.now();
			},
			{
				allowableMarginOfError: fiveSecondsExpressedAsFractionOfDay
			}
		);
	}
	export function test_Functions_$Areas_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=AREAS(Sheet1!A24:C27)',
			function (ctx) {
				return ctx.workbook.functions.areas(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:C27")
				);
			},
			{ expectedResult : 1 }
		);
	}
	export function test_Functions_$Rows_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ROWS(Sheet1!A24:C27)',
			function (ctx) {
				return ctx.workbook.functions.rows(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:C27")
				);
			},
			{ expectedResult: 4 }
		);
	}
	export function test_Functions_$Columns_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COLUMNS(Sheet1!A24:C27)',
			function (ctx) {
				return ctx.workbook.functions.columns(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:C27")
				);
			},
			{ expectedResult: 3 }
		);
	}
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$Type_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24");
			cellA24.values = [[true]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=TYPE(Sheet1!A24)',
			function (ctx) {
				return ctx.workbook.functions.type(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24")
				);
			},
			{ expectedResult: 4 }
		);
	}
	export function test_Functions_$Atan2_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ATAN2(1,1)',
			function (ctx) {
				return ctx.workbook.functions.atan2(1, 1);
			},
			{ expectedResult: 0.785398163397448 }
		);
	}
	export function test_Functions_$Asin_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ASIN(-0.5)',
			function (ctx) {
				return ctx.workbook.functions.asin(-0.5);
			},
			{ expectedResult: -0.523598775598299 }
		);
	}
	export function test_Functions_$Acos_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ACOS(-0.5)',
			function (ctx) {
				return ctx.workbook.functions.acos(-0.5);
			},
			{ expectedResult: 2.0943951023932 }
		);
	}
	export function test_Functions_$Choose_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CHOOSE(2, 100, 150, 200)',
			function (ctx) {
				return ctx.workbook.functions.choose(2, 100, 150, 200);
			},
			{ expectedResult: 150 }
		);
	}
	export function test_Functions_$HLookup_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24C27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:C27");
			cellA24C27.values = [["Axles", "Bearings", "Bolts"], [4, 4, 9], [5, 7, 10], [6, 8, 11]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=HLOOKUP("Axles", Sheet1!A24:C27, 2, TRUE)',
			function (ctx) {
				var cellA24C27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:C27");
				return ctx.workbook.functions.hlookup("Axles", cellA24C27, 2, true);
			},
			{ expectedResult: 4 }
		);
	}
	export function test_Functions_$VLookup_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24C27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:C27");
			cellA24C27.values = [["Axles", "Bearings", "Bolts"], [4, 4, 9], [5, 7, 10], [6, 8, 11]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=VLOOKUP("Axles", Sheet1!A24:C27, 2, TRUE)',
			function (ctx) {
				var cellA24C27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:C27");
				return ctx.workbook.functions.vlookup("Axles", cellA24C27, 2, true);
			},
			{ expectedResult: "Bearings" }
		);
	}
	export function test_Functions_$Isref_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ISREF(Sheet1!A24)',
			function (ctx) {
				return ctx.workbook.functions.isref(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24")
				);
			},
			{ expectedResult: true }
		);
	}
	export function test_Functions_$Log_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LOG(8, 2)',
			function (ctx) {
				return ctx.workbook.functions.log(8, 2);
			},
			{ expectedResult: 3 }
		);
	}
	export function test_Functions_$Char_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CHAR(69)',
			function (ctx) {
				return ctx.workbook.functions.char(69);
			},
			{ expectedResult: 'E' }
		);
	}
	export function test_Functions_$Lower_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LOWER("UPPERCASE to LOWERCASE STRING !!!")',
			function (ctx) {
				return ctx.workbook.functions.lower("UPPERCASE to LOWERCASE STRING !!!");
			},
			{ expectedResult: "uppercase to lowercase string !!!" }
		);
	}
	export function test_Functions_$Upper_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=UPPER("lowercase To Uppercase string !!!")',
			function (ctx) {
				return ctx.workbook.functions.upper("lowercase To Uppercase string !!!");                
			},
			{ expectedResult: "LOWERCASE TO UPPERCASE STRING !!!" }
		);
	}
	export function test_Functions_$Proper_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=PROPER("this is a TITLE")',
			function (ctx) {
				return ctx.workbook.functions.proper("this is a TITLE");
			},
			{ expectedResult: "This Is A Title" }
		);
	}
	export function test_Functions_$Left_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LEFT("Javascript tests", 4)',
			function (ctx) {
				return ctx.workbook.functions.left("Javascript tests", 4);
			},
			{ expectedResult: "Java" }
		);
	}
	export function test_Functions_$Right_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=RIGHT("Javascript tests", 5)',
			function (ctx) {
				return ctx.workbook.functions.right("Javascript tests", 5);
			},
			{ expectedResult: "tests" }
		);
	}
	export function test_Functions_$Exact_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=EXACT("string Should exact match", "string Should exact match")',
			function (ctx) {
				return ctx.workbook.functions.exact("string Should exact match", "string Should exact match");
			},
			{ expectedResult: true }
		);
	}
	export function test_Functions_$Trim_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=TRIM("       trimmed string       ")',
			function (ctx) {
				return ctx.workbook.functions.trim("       trimmed string       ");
			},
			{ expectedResult: "trimmed string" }
		);
	}
	export function test_Functions_$Replace_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=REPLACE("Amaxing APIs", 4, 1,"z")',
			function (ctx) {
				return ctx.workbook.functions.replace("Amaxing APIs", 4, 1, "z");
			},
			{ expectedResult: "Amazing APIs" }
		);
	}
	export function test_Functions_$Substitute_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SUBSTITUTE("Betty Botter bought some butter, But she said the butters bitter", "butter", "jam")',
			function (ctx) {
				return ctx.workbook.functions.substitute("Betty Botter bought some butter, But she said the butters bitter",
					"butter",
					"jam",          
					null);
			},
			{ expectedResult: "Betty Botter bought some jam, But she said the jams bitter" }
		);
	}
	export function test_Functions_$Code_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CODE("A")',
			function (ctx) {
				return ctx.workbook.functions.code("A");
			},
			{ expectedResult: 65 }
		);
	}
	export function test_Functions_$Find_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FIND("N", "MONDAY")',
			function (ctx) {
				return ctx.workbook.functions.find("N", "MONDAY");
			},
			{ expectedResult: 3 }
		);
	}
	export function test_Functions_$IsErr_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24");
			cellA24.values = [[300]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=ISERR(Sheet1!A24)',
			function (ctx) {
				return ctx.workbook.functions.isErr(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24")
				);
			},
			{ expectedResult: false }
		);
	}
	export function test_Functions_$IsText_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24");
			cellA24.values = [["this is some text"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=ISTEXT(Sheet1!A24)',
			function (ctx) {
				return ctx.workbook.functions.isText(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24")
				);
			},
			{ expectedResult: true }
		);
	}
	export function test_Functions_$IsNumber_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24");
			cellA24.values = [[100]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=ISNUMBER(Sheet1!A24)',
			function (ctx) {
				return ctx.workbook.functions.isNumber(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24")
				);
			},
			{ expectedResult: true }
		);
	}
    
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$T_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24");
			cellA24.values = [["butter"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=T(Sheet1!A24)',
			function (ctx) {
				return ctx.workbook.functions.t(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24")
				);
			},
			{ expectedResult: "butter" }
		);
	}
	export function test_Functions_$N_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24");
			cellA24.values = [[100]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=N(Sheet1!A24)',
			function (ctx) {
				return ctx.workbook.functions.n(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24")
				);
			},
			{ expectedResult: 100 }
		);
	}
	export function test_Functions_$Datevalue_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DATEVALUE("12/14/2015")',
			function (ctx) {
				return ctx.workbook.functions.datevalue("12/14/2015");
			},
			{ expectedResult: 42352 }
		);
	}
	export function test_Functions_$Timevalue_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=TIMEVALUE("6:45 PM")',
			function (ctx) {
				return ctx.workbook.functions.timevalue("6:45 PM");
			},
			{ expectedResult: 0.78125 }
		); 
	}
	export function test_Functions_$Sln_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SLN(30000, 7500, 10)',
			function (ctx) {
				return ctx.workbook.functions.sln(30000, 7500, 10);
			},
			{ expectedResult: 2250 }
		);
	}
	export function test_Functions_$Syd_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SYD(30000, 7500, 10, 1)',
			function (ctx) {
				return ctx.workbook.functions.syd(30000, 7500, 10, 1);
			},
			{ expectedResult: 4090.90909090909 }
		);
	}
	export function test_Functions_$Ddb_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DDB(2400,300,3650,1)',
			function (ctx) {
				return ctx.workbook.functions.ddb(2400, 300, 3650, 1);
			},
			{ expectedResult: 1.31506849315068 }
		);
	}
	export function test_Functions_$Clean_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24");
			cellA24.values = [["=CHAR(12) & \"10\""]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=CLEAN(Sheet1!A24)',
			function (ctx) {
				return ctx.workbook.functions.clean(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24")
				);
			},
			{ expectedResult: "10" }
		);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$Ipmt_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IPMT(0.08, 10, 10, 200000)',
			function (ctx) {
				return ctx.workbook.functions.ipmt(0.08, 10, 10, 200000);
			},
			{ expectedResult: -2207.84427699371 }
		);
	}
	export function test_Functions_$Ppmt_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=PPMT(0.08, 10, 10, 200000)',
			function (ctx) {
				return ctx.workbook.functions.ppmt(0.08, 10, 10, 200000);
			},
			{ expectedResult: -27598.0534624214 }
		);
	}
	export function test_Functions_$CountA_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24E24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24");
			cellA24E24.values = [[1, 3, "", 10, -100]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=COUNTA(Sheet1!A24:E24)',
			function (ctx) {
				return ctx.workbook.functions.countA(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24")
				);
			},
			{ expectedResult: 4 }
		);
	}
	export function test_Functions_$Product_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=PRODUCT(Charts!F3:H5, 10)',
			function (ctx) {
				return ctx.workbook.functions.product(
					ctx.workbook.worksheets.getItem("Charts").getRange("F3:H5"),
					10);
			}
		);
	}
	export function test_Functions_$Fact_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FACT(5)',
			function (ctx) {
				return ctx.workbook.functions.fact(5);
			},
			{ expectedResult: 120 }
		);
	}
	export function test_Functions_$DProduct_cvt_JScript_V12() {
        var setupAction = function (ctx: Excel.RequestContext) {
            var cellA1F3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:F3");
            cellA1F3.values = [["Tree", "Height", "Age", "Yield", "Profit", "Height"], ["Apple", ">10", "", "", "", "<16"], ["Pear", "", "", "", "", ""]];
            var cellA27F32 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11");
            cellA27F32.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 15, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"], ["Apple", 14, 15, 10, "$75", ], ["Pear", 9, 8, 8, "$77"], ["Apple", 8, 9, 6, "$45"]];
        };
        ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
            setupAction,
            '=DPRODUCT(Sheet1!A5:E11, "Yield", Sheet1!A1:F3)',
            function (ctx) {
                return ctx.workbook.functions.dproduct(
                    ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11"),
                    "Yield",
                    ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:F3")
                );
            },
            { expectedResult: 800 }
        );
	}
	export function test_Functions_$IsNonText_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ISNONTEXT(100)',
			function (ctx) {
				return ctx.workbook.functions.isNonText(100);
			},
			{ expectedResult: true }
		);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$DVarP_cvt_JScript_V12() {
        var setupAction = function (ctx: Excel.RequestContext) {
            var cellA1F3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:F3");
            cellA1F3.values = [["Tree", "Height", "Age", "Yield", "Profit", "Height"], ["Apple", ">10", "", "", "", "<16"], ["Pear", "", "", "", "", ""]];
            var cellA27F32 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11");
            cellA27F32.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 14, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"], ["Apple", 14, 15, 10, "$75", ], ["Pear", 9, 8, 8, "$77"], ["Apple", 8, 9, 6, "$45"]];
        };
        ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
            setupAction,
            '=DVARP(Sheet1!A5:E11, "Yield", Sheet1!A1:A3)',
            function (ctx) {
                return ctx.workbook.functions.dvarP(
                    ctx.workbook.worksheets.getItem("Sheet1").getRange("A5:E11"),
                    "Yield",
                    ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A3")
                );
            },
            { expectedResult: 7.04 }
        );
	}
	export function test_Functions_$Trunc_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=TRUNC(-8.9)',
			function (ctx) {
				return ctx.workbook.functions.trunc(-8.9);
			},
			{ expectedResult: -8 }
		);
	}
	export function test_Functions_$IsLogical_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ISLOGICAL(FALSE)',
			function (ctx) {
				return ctx.workbook.functions.isLogical(false);			
			},
			{ expectedResult: true }
		);
	}
	export function test_Functions_$DCountA_cvt_JScript_V12() {
        var setupAction = function (ctx: Excel.RequestContext) {
            var cellA24A26 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26");
            cellA24A26.values = [["Tree"], ["Apple"], ["Pear"]];
            var cellA27E30 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A27:E30");
            cellA27E30.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 14, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"]];
        };
        ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
            setupAction,
            '=DCOUNTA(Sheet1!A27:E30, "Yield", Sheet1!A24:A26)',
            function (ctx) {
                return ctx.workbook.functions.dcountA(
                    ctx.workbook.worksheets.getItem("Sheet1").getRange("A27:E30"),
                    "Profit",
                    ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26")
                );
            },
            { expectedResult: 2 }
        );
	}
	export function test_Functions_$USDollar_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=USDOLLAR(13.1009, 3)',
			function (ctx) {
				return ctx.workbook.functions.usdollar(13.1009, 3);
			},
			{ expectedResult: '$13.101' }
		);
	}
	export function test_Functions_$FindB_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24");
			cellA24.values = [["Miriam McGovern"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=FIND("M",Sheet1!A24,3)',
			function (ctx) {
				var cellA24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24");
				return ctx.workbook.functions.findB("M", cellA24, 3);
			},
			{ expectedResult: 8 }
		);
	}
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$ReplaceB_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=REPLACEB("abcdefghijk", 6, 5, "*")',
			function (ctx) {
				return ctx.workbook.functions.replaceB("abcdefghijk", 6, 5, "*");
			},
			{ expectedResult: "abcde*k" }
		);
	}
	export function test_Functions_$Leftb_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LEFTB("Sales", 4)',
			function (ctx) {
				return ctx.workbook.functions.leftb("Sales", 4);
			},
			{ expectedResult: "Sale" }
		);
	}
	export function test_Functions_$Rightb_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=RIGHTB("Sales", 2)',
			function (ctx) {
				return ctx.workbook.functions.rightb("Sales", 2);
			},
			{ expectedResult: "es" }
		);
	}
	export function test_Functions_$Midb_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=MIDB("Sales", 2, 3)',
			function (ctx) {
				return ctx.workbook.functions.midb("Sales", 2, 3);
			},
			{ expectedResult: "ale" }
		);
	}
	export function test_Functions_$Lenb_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LENB("Sales")',
			function (ctx) {
				return ctx.workbook.functions.lenb("Sales");
			},
			{ expectedResult: 5 }
		);
	}
	export function test_Functions_$RoundUp_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ROUNDUP(3.14159, 3)',
			function (ctx) {
				return ctx.workbook.functions.roundUp(3.14159, 3);
			},
			{ expectedResult: 3.142 }
		);
	}
	export function test_Functions_$RoundDown_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ROUNDDOWN(3.14159, 3)',
			function (ctx) {
				return ctx.workbook.functions.roundDown(3.14159, 3);
			},
			{ expectedResult: 3.141 }
		);
	}
	export function test_Functions_$Asc_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ASC("EXCEL")',
			function (ctx) {
				return ctx.workbook.functions.asc("EXCEL");
			},
			{ expectedResult: "EXCEL" }
		);
	}
	export function test_Functions_$Dbcs_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DBCS("EXCEL")',
			function (ctx) {
				return ctx.workbook.functions.dbcs("EXCEL");
			},
			{ expectedResult: "EXCEL" }
		);
	}
	
	
	
	
	
	
	
	
	
	export function test_Functions_$Days360_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DAYS360("12/01/2014", "12/03/2015", TRUE)',
			function (ctx) {
				return ctx.workbook.functions.days360(
					ctx.workbook.functions.date(2014, 12, 15),
					ctx.workbook.functions.date(2015, 12, 17),
					true);
			},
			{ expectedResult: 362 }
		);
	}
	export function test_Functions_$Today_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=TODAY()',
			function (ctx) {
				return ctx.workbook.functions.today();
			}
		);
	}
	export function test_Functions_$Vdb_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=VDB(2400, 300, 3650,0, 1)',
			function (ctx) {
				return ctx.workbook.functions.vdb(2400, 300, 3650, 0, 1);
			},
			{ expectedResult: 1.31506849315068 }
		);
	}
	export function test_Functions_$Median_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24C25 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:C25");
			cellA24C25.values = [[1, 3, 5], [2, 5, 3]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=MEDIAN(Sheet1!A24:C25)',
			function (ctx) {
				return ctx.workbook.functions.median(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:C25")
				);
			},
			{ expectedResult: 3 }
		);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$Sinh_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SINH(90)',
			function (ctx) {
				return ctx.workbook.functions.sinh(90);
			}
		);
	}
	export function test_Functions_$Cosh_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COSH(90)',
			function (ctx) {
				return ctx.workbook.functions.cosh(90);
			}
		);
	}
	export function test_Functions_$Tanh_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=TANH(0.8)',
			function (ctx) {
				return ctx.workbook.functions.tanh(0.8);
			}
		);
	}
	export function test_Functions_$Asinh_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ASINH(180)',
			function (ctx) {
				return ctx.workbook.functions.asinh(180);
			}
		);
	}
	export function test_Functions_$Acosh_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ACOSH(120)',
			function (ctx) {
				return ctx.workbook.functions.acosh(120);
			}
		);
	}
	export function test_Functions_$Atanh_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ATANH(0.8)',
			function (ctx) {
				return ctx.workbook.functions.atanh(0.8);
			}
		);
	}
	export function test_Functions_$DGet_cvt_JScript_V12() {
        var setupAction = function (ctx: Excel.RequestContext) {
            var cellA24A26 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26");
            cellA24A26.values = [["Tree"], ["Apple"], ["Banana"]];
            var cellA27E30 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A27:E30");
            cellA27E30.values = [["Tree", "Height", "Age", "Yield", "Profit"], ["Apple", 18, 20, 14, "$105"], ["Pear", 12, 12, 10, "$96"], ["Cherry", 13, 14, 9, "$105"]];
        };
        ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
            setupAction,
            '=DGET(Sheet1!A27:E30, "Yield", Sheet1!A24:A26)',
            function (ctx) {
                return ctx.workbook.functions.dget(
                    ctx.workbook.worksheets.getItem("Sheet1").getRange("A27:E30"),
                    "Yield",
                    ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A26")
                );
            },
            { expectedResult: 14 }
        );
	}
	export function test_Functions_$Db_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DB(1000000, 100000, 6, 1, 7)',
			function (ctx) {
				return ctx.workbook.functions.db(1000000, 100000, 6, 1, 7);
			},
			{ expectedResult: 186083.333333333 }
		);
	}
	export function test_Functions_$ErrorType_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
			cellA1.formulas = [["=4/nonexistantname"]]
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=ERROR.TYPE(Sheet1!A1)',
			function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				return ctx.workbook.functions.error_Type(range);
			},
			{ expectedResult: 5 }
		);
	}
	export function test_Functions_$AveDev_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A31 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A30");
			cellA24A31.values = [[4], [5], [6], [7], [5], [4], [3]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=AVEDEV(Sheet1!A24:A30)',
			function (ctx) {
				return ctx.workbook.functions.aveDev(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A30")
				);
			},
			{ expectedResult: 1.02040816326531 }
		);
	}
	export function test_Functions_$GammaLn_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=GAMMALN(4)',
			function (ctx) {
				return ctx.workbook.functions.gammaLn(4);
			},
			{ expectedResult: 1.79175946922805 }
		);
	}
	export function test_Functions_$Combin_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COMBIN(8 ,2)',
			function (ctx) {
				return ctx.workbook.functions.combin(8, 2);
			},
			{ expectedResult: 28 }
		);
	}
	export function test_Functions_$Even_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=EVEN(3.1)',
			function (ctx) {
				return ctx.workbook.functions.even(3.1);
			},
			{ expectedResult: 4 }
		);
	}
	export function test_Functions_$Fisher_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FISHER(0.75)',
			function (ctx) {
				return ctx.workbook.functions.fisher(0.75);
			},
			{ expectedResult: 0.972955074527657 }
		);
	}
	export function test_Functions_$FisherInv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FISHERINV(0.75)',
			function (ctx) {
				return ctx.workbook.functions.fisherInv(0.75);
			},
			{ expectedResult: 0.635148952387287 }
		);
	}
	export function test_Functions_$Standardize_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=STANDARDIZE(42, 40, 1.5)',
			function (ctx) {
				return ctx.workbook.functions.standardize(42, 40, 1.5);
			},
			{ expectedResult: 1.33333333333333 }
		);
	}
	export function test_Functions_$Odd_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ODD(1.8)',
			function (ctx) {
				return ctx.workbook.functions.odd(1.8);
			},
			{ expectedResult: 3 }
		);
	}
	export function test_Functions_$Permut_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=PERMUT(100, 3)',
			function (ctx) {
				return ctx.workbook.functions.permut(100, 3);
			},
			{ expectedResult: 970200 }
		);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$DevSq_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24G24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:G24");
			cellA24G24.values = [[4, 5, 8, 7, 11, 4, 3]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=DEVSQ(Sheet1!A24:G24)',
			function (ctx) {
				return ctx.workbook.functions.devSq(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:G24")
				);
			},
			{ expectedResult: 48 }
		);
	}
	export function test_Functions_$GeoMean_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24G24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:G24");
			cellA24G24.values = [[4, 5, 8, 7, 11, 4, 3]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=GEOMEAN(Sheet1!A24:G24)',
			function (ctx) {
				return ctx.workbook.functions.geoMean(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:G24")
				);
			},
			{ expectedResult: 5.47698696965696 }
		);
	}
	export function test_Functions_$HarMean_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24G24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:G24");
			cellA24G24.values = [[4, 5, 8, 7, 11, 4, 3]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=HARMEAN(Sheet1!A24:G24)',
			function (ctx) {
				return ctx.workbook.functions.harMean(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:G24")			
				);
			},
			{ expectedResult: 5.02837596206173 }
		);
	}
	export function test_Functions_$SumSq_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SUMSQ(3, 4)',
			function (ctx) {
				return ctx.workbook.functions.sumSq(3, 4);
			},
			{ expectedResult: 25 }
		);
	}
	export function test_Functions_$Kurt_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24J24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24");
			cellA24J24.values = [[3, 4, 5, 2, 3, 4, 5, 6, 4, 7]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=KURT(Sheet1!A24:J24)',
			function (ctx) {
				return ctx.workbook.functions.kurt(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24")
				);
			},
			{ expectedResult: -0.151799637208416 }
		);
	}
	export function test_Functions_$Skew_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24J24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24");
			cellA24J24.values = [[3, 4, 5, 2, 3, 4, 5, 6, 4, 7]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=SKEW(Sheet1!A24:J24)',
			function (ctx) {
				return ctx.workbook.functions.skew(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24")
				);
			},
			{ expectedResult: 0.359543071406797 }
		);
	}
	export function test_Functions_$Large_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24E24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24");
			cellA24E24.values = [[3, 4, 5, 2, 13]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=LARGE(Sheet1!A24:E24, 3)',
			function (ctx) {
				return ctx.workbook.functions.large(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24"),
					3
				);
			},
			{ expectedResult: 4 }
		);
	}
	export function test_Functions_$Small_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24E24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24");
			cellA24E24.values = [[3, 4, 5, 2, 13]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=SMALL(Sheet1!A24:E24, 2)',
			function (ctx) {
				return ctx.workbook.functions.small(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24"),
					2
				);
			},
			{ expectedResult: 3 }
		);
	}
	export function test_Functions_$TrimMean_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A34 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A34");
			cellA24A34.values = [[4], [5], [6], [7], [2], [3], [4], [5], [1], [2], [3]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=TRIMMEAN(Sheet1!A24:A34, 0.2)',
			function (ctx) {
				var cellA24A34 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A34");
				return ctx.workbook.functions.trimMean(cellA24A34, 0.2);
			},
			{ expectedResult: 3.77777777777778 }
		);
	}
	export function test_Functions_$Concatenate_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CONCATENATE("Good", " Morning")',
			function (ctx) {
				return ctx.workbook.functions.concatenate("Good", " Morning");
			},
			{ expectedResult: "Good Morning" }
		);
	}
	export function test_Functions_$Power_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=POWER(2 ,3)',
			function (ctx) {
				return ctx.workbook.functions.power(2, 3);
			},
			{ expectedResult: 8 }
		);
	}
	export function test_Functions_$Radians_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=RADIANS(270)',
			function (ctx) {
				return ctx.workbook.functions.radians(270);
			},
			{ expectedResult: 4.71238898038469 }
		);
	}
	export function test_Functions_$Degrees_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DEGREES(PI())',
			function (ctx) {
				return ctx.workbook.functions.degrees(
					ctx.workbook.functions.pi()
				);
			},
			{ expectedResult: 180 }
		);
	}
	export function test_Functions_$Subtotal_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24A27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A27");
			cellA24A27.values = [[120], [10], [150], [23]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=SUBTOTAL(9, Sheet1!A24:A27)',
			function (ctx) {
				var cellA24A27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A27");
				return ctx.workbook.functions.subtotal(9, cellA24A27);
			},
			{ expectedResult: 303 }
		);
	}
	export function test_Functions_$SumIf_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24B27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:B27");
			cellA24B27.values = [[100000.0, 7000.0], [200000.0, 14000.0], [300000.0, 21000.0], [400000.0, 28000.0]];
		}
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=SUMIF(Sheet1!A24:A27, ">160000", Sheet1!B24:B27)',
			function (ctx) {
				var cellA24A27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A27");
				var cellB24B27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("B24:B27");
				return ctx.workbook.functions.sumIf(cellA24A27, ">160000", cellB24B27);
			},
			{ expectedResult: 63000 }
		);
	}
	export function test_Functions_$CountIf_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24B27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:B27");
			cellA24B27.values = [[100000.0, 7000.0], [200000.0, 14000.0], [300000.0, 21000.0], [400000.0, 28000.0]];
		}
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=COUNTIF(Sheet1!A24:A27, ">160000")',
			function (ctx) {
				var cellA24A27 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:A27");
				return ctx.workbook.functions.countIf(cellA24A27, ">160000");
			},
			{ expectedResult: 3 }
		);
	}
	export function test_Functions_$CountBlank_cvt_JScript_V12() {		
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24B26 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:B26");
			cellA24B26.values = [[1, ""], ["", "butter"], [true, '$']];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=COUNTBLANK(Sheet1!A24:B26)',
			function (ctx) {
				return ctx.workbook.functions.countBlank(
					ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:B26")
				);
			},
			{ expectedResult: 2 }
		);
	}
	export function test_Functions_$Ispmt_cvt_JScript_V12() {	
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ISPMT(0.1/12, 1, 36, 8000000)',
			function (ctx) {
				return ctx.workbook.functions.ispmt(0.1/12, 1, 36, 8000000);
			},
			{ expectedResult: -64814.8148148148 }
		);
	}
	export function test_Functions_$Roman_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ROMAN(499, 0)',
			function (ctx) {
				return ctx.workbook.functions.roman(499, 0);
			},
			{ expectedResult: "CDXCIX" }
		);
	}
    
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$Hyperlink_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=HYPERLINK("http://example.microsoft.com/report/budget report.xlsx", "Click for report")',
			function (ctx) {
				return ctx.workbook.functions.hyperlink("http://example.microsoft.com/report/budget report.xlsx", "Click for report");
			},
			{ expectedResult: "Click for report" }
		);
	}
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$AverageA_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24E24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24");
			cellA24E24.values = [[0.09, 0.11, -1, true, .6]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=AVERAGEA(Sheet1!A24:E24)',
			function (ctx) {
				var cellA24A28 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24");
				return ctx.workbook.functions.averageA(cellA24A28);
			},
			{ expectedResult: 0.16 }
		);
	}
	export function test_Functions_$MaxA_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24E24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24");
			cellA24E24.values = [[0.09, 0.11, -1, true, .6]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=MAXA(Sheet1!A24:E24)',
			function (ctx) {
				var cellA24A28 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24");
				return ctx.workbook.functions.maxA(cellA24A28);
			},
			{ expectedResult: 1 }
		);
	}
	export function test_Functions_$MinA_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24E24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24");
			cellA24E24.values = [[0.09, 0.11, -1, true, .6]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=MINA(Sheet1!A24:E24)',
			function (ctx) {
				var cellA24A28 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:E24");
				return ctx.workbook.functions.minA(cellA24A28);
			},
			{ expectedResult: -1 }
		);
	}
	export function test_Functions_$StDevPA_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24J24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24");
			cellA24J24.values = [[1345, 1301, 1368, 1322, 1310, 1370, 1318, 1350, 1303, 1299]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=STDEVPA(Sheet1!A24:J24)',
			function (ctx) {
				var cellA24J24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24");
				return ctx.workbook.functions.stDevPA(cellA24J24);
			},
			{ expectedResult: 26.0545581424825 }
		);
	}
	export function test_Functions_$VarPA_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24J24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24");
			cellA24J24.values = [[1345, 1301, 1368, 1322, 1310, 1370, 1318, 1350, 1303, 1299]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=VARPA(Sheet1!A24:J24)',
			function (ctx) {
				var cellA24J24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24");
				return ctx.workbook.functions.varPA(cellA24J24);
			},
			{ expectedResult: 678.84 }
		);
	}
	export function test_Functions_$StDevA_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24J24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24");
			cellA24J24.values = [[1345, 1301, 1368, 1322, 1310, 1370, 1318, 1350, 1303, 1299]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=STDEVA(Sheet1!A24:J24)',
			function (ctx) {
				var cellA24J24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24");
				return ctx.workbook.functions.stDevA(cellA24J24);
			},
			{ expectedResult: 27.4639157198435 }
		);	
	}
	export function test_Functions_$VarA_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA24J24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24");
			cellA24J24.values = [[1345, 1301, 1368, 1322, 1310, 1370, 1318, 1350, 1303, 1299]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=VARA(Sheet1!A24:J24)',
			function (ctx) {
				var cellA24J24 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A24:J24");
				return ctx.workbook.functions.varA(cellA24J24);
			},
			{ expectedResult: 754.266666666667 }
		);
	}
	export function test_Functions_$BahtText_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BAHTTEXT(1234)',
			function (ctx) {
				return ctx.workbook.functions.bahtText(1234);
			},
			{ expectedResult: "???????????????????????????????" }
		);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
    
	
	
	
	
	
	
	
	
	
	
	 
	
	
	
	
	
	
	
	
	
	
	 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$Hex2Bin_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=HEX2BIN("F", 8)',
			function (ctx) {
				return ctx.workbook.functions.hex2Bin("F", 8);
			},
			{ expectedResult: "00001111" }
		);
	}
	export function test_Functions_$Hex2Dec_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=HEX2DEC("FFFFFFFF5B")',
			function (ctx) {
				return ctx.workbook.functions.hex2Dec("FFFFFFFF5B");
			},
			{ expectedResult: -165 }
		);
	}
	export function test_Functions_$Hex2Oct_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=HEX2OCT("F", 3)',
			function (ctx) {
				return ctx.workbook.functions.hex2Oct("F", 3);
			},
			{ expectedResult: "017" }
		);
	}
	export function test_Functions_$Dec2Bin_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DEC2BIN(9,4)',
			function (ctx) {
				return ctx.workbook.functions.dec2Bin(9, 4);
			},
			{ expectedResult: "1001" }
		);
	}
	export function test_Functions_$Dec2Hex_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DEC2HEX(100, 4)',
			function (ctx) {
				return ctx.workbook.functions.dec2Hex("100", 4);
			},
			{ expectedResult: "0064" }
		);
	}
	export function test_Functions_$Dec2Oct_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DEC2OCT(58,3)',
			function (ctx) {
				return ctx.workbook.functions.dec2Oct(58, 3);
			},
			{ expectedResult: "072" }
		);
	}
	export function test_Functions_$Oct2Bin_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=OCT2BIN(7777777000)',
			function (ctx) {
				return ctx.workbook.functions.oct2Bin("7777777000", null);
			},
			{ expectedResult: "1000000000" }
		);
	}
	export function test_Functions_$Oct2Hex_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=OCT2HEX(100,4)',
			function (ctx) {
				return ctx.workbook.functions.oct2Hex("100", 4);
			},
			{ expectedResult: "0040" }
		);
	}
	export function test_Functions_$Oct2Dec_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=OCT2DEC(54)',
			function (ctx) {
				return ctx.workbook.functions.oct2Dec("54");
			},
			{ expectedResult: 44 }
		);
	}
	export function test_Functions_$Bin2Dec_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BIN2DEC(1100100)',
			function (ctx) {
				return ctx.workbook.functions.bin2Dec("1100100");
			},
			{ expectedResult: 100 }
		);
	}
	export function test_Functions_$Bin2Oct_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BIN2OCT(1001, 3)',
			function (ctx) {
				return ctx.workbook.functions.bin2Oct("1001", 3);
			},
			{ expectedResult: '011' }
		);
	}
	export function test_Functions_$Bin2Hex_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BIN2HEX(11111011, 4)',
			function (ctx) {
				return ctx.workbook.functions.bin2Hex("11111011", 4);
			},
			{ expectedResult: '00FB' }
		);
	}
	export function test_Functions_$ImSub_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMSUB("13+4i","5+3i")',
			function (ctx) {
				return ctx.workbook.functions.imSub("13+4i", "5+3i");
			},
			{ expectedResult: "8+i" }
		);
	}
	export function test_Functions_$ImDiv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMDIV("-238+240i","10+24i")',
			function (ctx) {
				return ctx.workbook.functions.imDiv("-238+240i", "10+24i");
			},
			{ expectedResult: "5+12i" }
		);
	}
	export function test_Functions_$ImPower_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMPOWER("2+3i", 3)',
			function (ctx) {
				return ctx.workbook.functions.imPower("2+3i", 3);
			},
			{ expectedResult: "-46+9.00000000000001i" }
		);
	}
	export function test_Functions_$ImAbs_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMABS("5+12i")',
			function (ctx) {
				return ctx.workbook.functions.imAbs("5+12i");
			},
			{ expectedResult: 13 }
		);
	}
	export function test_Functions_$ImSqrt_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMSQRT("1+i")',
			function (ctx) {
				return ctx.workbook.functions.imSqrt("1+i");
			},
			{ expectedResult: '1.09868411346781+0.455089860562227i' }
		);
	}
	export function test_Functions_$ImLn_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMLN("3+4i")',
			function (ctx) {
				return ctx.workbook.functions.imLn("3+4i");
			},
			{ expectedResult: '1.6094379124341+0.927295218001612i' }
		);
	}
	export function test_Functions_$ImLog2_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMLOG2("3+4i")',
			function (ctx) {
				return ctx.workbook.functions.imLog2("3+4i");
			},
			{ expectedResult: '2.32192809488736+1.33780421245098i' }
		);
	}
	export function test_Functions_$ImLog10_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMLOG10("3+4i")',
			function (ctx) {
				return ctx.workbook.functions.imLog10("3+4i");
			},
			{ expectedResult: '0.698970004336019+0.402719196273373i' }
		);
	}
	export function test_Functions_$ImSin_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMSIN("4+3i")',
			function (ctx) {
				return ctx.workbook.functions.imSin("4+3i");
			},
			{ expectedResult: '-7.61923172032141-6.548120040911i' }
		);
	}
	export function test_Functions_$ImCos_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMCOS("4+3i")',
			function (ctx) {
				return ctx.workbook.functions.imCos("4+3i")
			}
		);
	}
	export function test_Functions_$ImExp_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMEXP("1+i")',
			function (ctx) {
				return ctx.workbook.functions.imExp("1+i");
			},
			{ expectedResult: '1.46869393991589+2.28735528717884i' }
		);
	}
	export function test_Functions_$ImArgument_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMARGUMENT("3+4i")',
			function (ctx) {
				return ctx.workbook.functions.imArgument("3+4i");
			},
			{ expectedResult: 0.927295218001612 }
		);
	}
	export function test_Functions_$ImConjugate_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMCONJUGATE("3+4i")',
			function (ctx) {
				return ctx.workbook.functions.imConjugate("3+4i");
			},
			{ expectedResult: "3-4i" }
		);
	}
	export function test_Functions_$Imaginary_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMAGINARY("3+4i")',
			function (ctx) {
				return ctx.workbook.functions.imaginary("3+4i");
			},
			{ expectedResult: 4 }
		);
	}
	export function test_Functions_$ImReal_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMREAL("6-9i")',
			function (ctx) {
				return ctx.workbook.functions.imReal("6-9i");
			},
			{ expectedResult: 6 }
		);
	}
	export function test_Functions_$Complex_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COMPLEX(3,4)',
			function (ctx) {
				return ctx.workbook.functions.complex(3, 4);
			},
			{ expectedResult: '3+4i' }
		);
	}
	export function test_Functions_$ImSum_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMSUM("3+4i","5-3i")',
			function (ctx) {
				return ctx.workbook.functions.imSum("3+4i", "5-3i");
			},
			{ expectedResult: '8+i' }
		);
	}
	export function test_Functions_$ImProduct_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMPRODUCT("3+4i","5-3i")',
			function (ctx) {
				return ctx.workbook.functions.imProduct("3+4i", "5-3i");
			},
			{ expectedResult: '27+11i' }
		);
	}
	export function test_Functions_$SeriesSum_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A5");
			cellA1A5.values = [[0.785398163], [1], [-0.5], [0.041666667], [-0.001388889]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=SERIESSUM(Sheet1!A1,0,2,Sheet1!A2:A5)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2A5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:A5");
				return ctx.workbook.functions.seriesSum(cellA1, 0, 2, cellA2A5);
			},
			{ expectedResult: 0.707103215204654 }
		);
	}
	export function test_Functions_$FactDouble_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FACTDOUBLE(7)',
			function (ctx) {
				return ctx.workbook.functions.factDouble(7);
			},
			{ expectedResult: 105 }
		);
	}
	export function test_Functions_$SqrtPi_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SQRTPI(2)',
			function (ctx) {
				return ctx.workbook.functions.sqrtPi(2);
			},
			{ expectedResult: 2.506628274631 }
		);
	}
	export function test_Functions_$Quotient_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=QUOTIENT(5,2)',
			function (ctx) {
				return ctx.workbook.functions.quotient(5, 2);
			},
			{ expectedResult: 2 }
		);
	}
	export function test_Functions_$Delta_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DELTA(5,4)',
			function (ctx) {
				return ctx.workbook.functions.delta(5, 4);
			},
			{ expectedResult: 0 }
		);
	}
	export function test_Functions_$GeStep_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=GESTEP(5,4)',
			function (ctx) {
				return ctx.workbook.functions.geStep(5, 4);
			},
			{ expectedResult: 1 }
		);
	}
	export function test_Functions_$IsEven_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ISEVEN(100)',
			function (ctx) {
				return ctx.workbook.functions.isEven(100);
			},
			{ expectedResult: true }
		);
	}
	export function test_Functions_$IsOdd_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ISODD(-3)',
			function (ctx) {
				return ctx.workbook.functions.isOdd(-3);
			},
			{ expectedResult: true }
		);
	}
	export function test_Functions_$MRound_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=MROUND(1.3, 0.2)',
			function (ctx) {
				return ctx.workbook.functions.mround(1.3, 0.2);
			},
			{ expectedResult: 1.4 }
		);
	}
	export function test_Functions_$Erf_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ERF(0.745)',
			function (ctx) {
				return ctx.workbook.functions.erf(0.745);
			},
			{ expectedResult: 0.707928920095738 }
		);
	}
	export function test_Functions_$ErfC_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ERFC(1)',
			function (ctx) {
				return ctx.workbook.functions.erfC(1);
			},
			{ expectedResult: 0.157299207050285 }
		);
	}
	export function test_Functions_$BesselJ_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BESSELJ(1.9, 2)',
			function (ctx) {
				return ctx.workbook.functions.besselJ(1.9, 2);
			},
			{ expectedResult: 0.329925828669785 }
		);
	}
	export function test_Functions_$BesselK_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BESSELK(1.5, 1)',
			function (ctx) {
				return ctx.workbook.functions.besselK(1.5, 1);
			},
			{ expectedResult: 0.277387803632259 }
		);
	}
	export function test_Functions_$BesselY_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BESSELY(2.5, 1)',
			function (ctx) {
				return ctx.workbook.functions.besselY(2.5, 1);
			},
			{ expectedResult: 0.145918137508313 }
		);
	}
	export function test_Functions_$BesselI_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BESSELI(1.5, 1)',
			function (ctx) {
				return ctx.workbook.functions.besselI(1.5, 1);
			},
			{ expectedResult: 0.981666428475166 }
		);
	}
	export function test_Functions_$Xirr_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1B5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
			cellA1B5.values = [[-10000, "1-Jan-08"], [2750, "1-Mar-08"], [4250, "30-Oct-08"], [3250, "15-Feb-09"], [2750, "1-Apr-09"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=XIRR(Sheet1!A1:A5, Sheet1!B1:B5, 0.1)',
			function (ctx) {
				var cellA1A5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A5");
				var cellB1B5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("B1:B5");
				return ctx.workbook.functions.xirr(cellA1A5, cellB1B5, 0.1);
			},
			{ expectedResult: 0.373362535238266 }
		);
	}
	export function test_Functions_$Xnpv_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1B5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
			cellA1B5.values = [[-10000, "1-Jan-08"], [2750, "1-Mar-08"], [4250, "30-Oct-08"], [3250, "15-Feb-09"], [2750, "1-Apr-09"]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=XNPV(0.09, Sheet1!A1:A5, Sheet1!B1:B5)',
			function (ctx) {
				var cellA1A5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A5");
				var cellB1B5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("B1:B5");
				return ctx.workbook.functions.xnpv(0.09, cellA1A5, cellB1B5);
			},
			{ expectedResult: 2086.64760203153 }
		);
	}
	export function test_Functions_$PriceMat_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A6 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A6");
			cellA1A6.values = [["15-Feb-08"], ["13-Apr-08"], ["11-Nov-07"], [0.061], [0.061], [0]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=PRICEMAT(Sheet1!A1, Sheet1!A2,Sheet1!A3,Sheet1!A4,Sheet1!A5,Sheet1!A6)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				var cellA4 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A4");
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
				var cellA6 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A6");
				return ctx.workbook.functions.priceMat(cellA1, cellA2, cellA3, cellA4, cellA5, cellA6);
			},
			{ expectedResult: 99.9844988755569 }
		);
	}
	export function test_Functions_$YieldMat_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A6 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A6");
			cellA1A6.values = [["15-Feb-08"], ["3-Nov-08"], ["8-Nov-07"], [0.0625], [100.0123], [0]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=YIELDMAT(Sheet1!A1, Sheet1!A2,Sheet1!A3,Sheet1!A4,Sheet1!A5,Sheet1!A6)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				var cellA4 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A4");
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
				var cellA6 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A6");
				return ctx.workbook.functions.yieldMat(cellA1, cellA2, cellA3, cellA4, cellA5, cellA6);
			},
			{ expectedResult: 0.0612887146025768 }
		);
	}
	export function test_Functions_$IntRate_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A5");
			cellA1A5.values = [["15-Feb-08"], ["15-May-08"], [1000000], [1014420], [2]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=INTRATE(Sheet1!A1, Sheet1!A2,Sheet1!A3,Sheet1!A4,Sheet1!A5)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				var cellA4 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A4");
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
				return ctx.workbook.functions.intRate(cellA1, cellA2, cellA3, cellA4, cellA5);
			},
			{ expectedResult: 0.05768, allowableMarginOfError: 0.00001 }
		);
	}
	export function test_Functions_$Received_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A5");
			cellA1A5.values = [["15-Feb-08"], ["15-May-08"], [1000000], [0.0575], [2]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=RECEIVED(Sheet1!A1, Sheet1!A2,Sheet1!A3,Sheet1!A4,Sheet1!A5)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				var cellA4 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A4");
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
				return ctx.workbook.functions.received(cellA1, cellA2, cellA3, cellA4, cellA5);
			},
			{ expectedResult: 1014584.6544071 }
		);
	}
	export function test_Functions_$Disc_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A5");
			cellA1A5.values = [[39107], [39248], [97.975], [100], [1]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=DISC(Sheet1!A1, Sheet1!A2,Sheet1!A3,Sheet1!A4,Sheet1!A5)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				var cellA4 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A4");
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
				return ctx.workbook.functions.disc(cellA1, cellA2, cellA3, cellA4, cellA5);
			},
			{ expectedResult: 0.0524202127659577 }
		);
	}
	export function test_Functions_$PriceDisc_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A5");
			cellA1A5.values = [["16-Feb-08"], ["1-Mar-08"], [0.0525], [100], [2]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=PRICEDISC(Sheet1!A1, Sheet1!A2,Sheet1!A3,Sheet1!A4,Sheet1!A5)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				var cellA4 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A4");
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
				return ctx.workbook.functions.priceDisc(cellA1, cellA2, cellA3, cellA4, cellA5);
			},
			{ expectedResult: 99.7958333333333 }
		);
	}
	export function test_Functions_$YieldDisc_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A5");
			cellA1A5.values = [["16-Feb-08"], ["1-Mar-08"], [99.795], [100], [2]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=YIELDDISC(Sheet1!A1, Sheet1!A2,Sheet1!A3,Sheet1!A4,Sheet1!A5)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				var cellA4 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A4");
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
				return ctx.workbook.functions.yieldDisc(cellA1, cellA2, cellA3, cellA4, cellA5);
			},
			{ expectedResult: 0.0528225719868583 }
		);
	}
	export function test_Functions_$TBillEq_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A3");
			cellA1A3.values = [["31-Mar-08"], ["1-Jun-08"], [0.0914]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=TBILLEQ(Sheet1!A1, Sheet1!A2,Sheet1!A3)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				return ctx.workbook.functions.tbillEq(cellA1, cellA2, cellA3);
			},
			{ expectedResult: 0.094151493565943 }
		);
	}
	export function test_Functions_$TBillPrice_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A3");
			cellA1A3.values = [["31-Mar-08"], ["1-Jun-08"], [0.09]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=TBILLPRICE(Sheet1!A1, Sheet1!A2,Sheet1!A3)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				return ctx.workbook.functions.tbillPrice(cellA1, cellA2, cellA3);
			},
			{ expectedResult: 98.45 }
		);
	}
	export function test_Functions_$TBillYield_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A3");
			cellA1A3.values = [["31-Mar-08"], ["1-Jun-08"], [98.45]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=TBILLYIELD(Sheet1!A1, Sheet1!A2,Sheet1!A3)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				return ctx.workbook.functions.tbillYield(cellA1, cellA2, cellA3);
			},
			{ expectedResult: 0.0914169629253426 }
		);
	}
	export function test_Functions_$Price_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A7 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A7");
			cellA1A7.values = [["15-Feb-2008"], ["15-Nov-2017"], [0.0575], [0.065], [100], [2], [0]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=PRICE(Sheet1!A1, Sheet1!A2,Sheet1!A3,Sheet1!A4,Sheet1!A5,Sheet1!A6,Sheet1!A7)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				var cellA4 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A4");
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
				var cellA6 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A6");
				var cellA7 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A7");
				return ctx.workbook.functions.price(cellA1, cellA2, cellA3, cellA4, cellA5, cellA6, cellA7);
			},
			{ expectedResult: 94.6343616213221 }
		);
	}
	export function test_Functions_$Yield_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A7 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A7");
			cellA1A7.values = [["15-Feb-2008"], ["15-Nov-2017"], [0.0575], [95.0428], [100], [2], [0]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=YIELD(Sheet1!A1, Sheet1!A2,Sheet1!A3,Sheet1!A4,Sheet1!A5,Sheet1!A6,Sheet1!A7)',
			function (ctx) {
				var cellA1 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
				var cellA2 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2");
				var cellA3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3");
				var cellA4 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A4");
				var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
				var cellA6 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A6");
				var cellA7 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A7");
				return ctx.workbook.functions.yield(cellA1, cellA2, cellA3, cellA4, cellA5, cellA6, cellA7);
			},
			{ expectedResult: 0.0644097126282116 }
		);
	}
	export function test_Functions_$DollarDe_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DOLLARDE(1.02,16)',
			function (ctx) {
				return ctx.workbook.functions.dollarDe(1.02, 16);
			},
			{ expectedResult: 1.125 }
		);
	}
	export function test_Functions_$DollarFr_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DOLLARFR(1.125,16)',
			function (ctx) {
				return ctx.workbook.functions.dollarFr(1.125, 16);
			},
			{ expectedResult: 1.02 }
		);
	}
	export function test_Functions_$Nominal_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NOMINAL(0.053543,4)',
			function (ctx) {
				return ctx.workbook.functions.nominal(0.053543, 4);
			},
			{ expectedResult: 0.052500319868356 }
		);
	}
	export function test_Functions_$Effect_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=EFFECT(0.0525, 4)',
			function (ctx) {
				return ctx.workbook.functions.effect(0.0525, 4);
			},
			{ expectedResult: 0.0535426673707584 }
		);
	}
	export function test_Functions_$CumPrinc_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CUMPRINC(0.09/12, 30*12, 125000, 1, 1, 0)',
			function (ctx) {
				return ctx.workbook.functions.cumPrinc(0.09 / 12, 30 * 12, 125000, 1, 1, 0);
			},
			{ expectedResult: -68.2782711809784 }
		);
	}
	export function test_Functions_$CumIPmt_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CUMIPMT(0.09/12, 30*12, 125000, 1,1,0)',
			function (ctx) {
				return ctx.workbook.functions.cumIPmt(0.09 / 12, 30 * 12, 125000, 1, 1, 0);
			},
			{ expectedResult: -937.5 } 
		);
	}
	export function test_Functions_$EDate_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=EDATE("15-Jan-08", 1)',
			function (ctx) {
				return ctx.workbook.functions.edate("15-Jan-08", 1);
			},
			{ expectedResult: 39493 }
		);
	}
	export function test_Functions_$EoMonth_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=EOMONTH("1-Jan-2011", -2)',
			function (ctx) {
				return ctx.workbook.functions.eoMonth("1-Jan-2011", -2);
			},
			{ expectedResult: 40512 }
		);
	}
	export function test_Functions_$YearFrac_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=YEARFRAC("1/1/2012","7/30/2012")',
			function (ctx) {
				return ctx.workbook.functions.yearFrac("1/1/2012", "7/30/2012");
			}
		);
	}
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$CoupDays_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COUPDAYS("1/25/11", "11/15/11", 2,1)',
			function (ctx) {
				return ctx.workbook.functions.coupDays("1/25/11", "11/15/11", 2, 1);
			},
			{ expectedResult: 181 }
		);
	}
	export function test_Functions_$CoupDaysNc_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COUPDAYSNC("1/25/11", "11/15/11", 2,1)',
			function (ctx) {
				return ctx.workbook.functions.coupDaysNc("1/25/11", "11/15/11", 2, 1);
			},
			{ expectedResult: 110 }
		);
	}
	export function test_Functions_$CoupNcd_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COUPNCD("1/25/11", "11/15/11", 2,1)',
			function (ctx) {
				return ctx.workbook.functions.coupNcd("1/25/11", "11/15/11", 2, 1);
			},
			{ expectedResult: 40678 }
		);
	}
	export function test_Functions_$CoupNum_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COUPNUM("1/25/11", "11/15/11", 2,1)',
			function (ctx) {
				return ctx.workbook.functions.coupNum("1/25/11", "11/15/11", 2, 1);
			},
			{ expectedResult: 2 }
		);
	}
	export function test_Functions_$CoupPcd_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COUPPCD("1/25/11", "11/15/11", 2,1)',
			function (ctx) {
				return ctx.workbook.functions.coupPcd("1/25/11", "11/15/11", 2, 1);
			},
			{ expectedResult: 40497 }
		);
	}
	export function test_Functions_$Duration_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DURATION(39448, 42370, 0.08, 0.09, 2,1)',
			function (ctx) {
				return ctx.workbook.functions.duration(39448, 42370, 0.08, 0.09, 2, 1);
			},
			{ expectedResult: 5.99377495554519 }
		);
	}
	export function test_Functions_$MDuration_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=MDURATION("1/1/2008", "1/1/2016", 0.08, 0.09, 2, 1)',
			function (ctx) {
				return ctx.workbook.functions.mduration("1/1/2008", "1/1/2016", 0.08, 0.09, 2, 1);
			},
			{ expectedResult: 5.73566981391884 }
		);
	}
	export function test_Functions_$OddLPrice_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ODDLPRICE("2/7/2008", "6/15/2008", "10/15/2007", 0.0375, 0.0405, 100, 2, 0)',
			function (ctx) {
				return ctx.workbook.functions.oddLPrice("2/7/2008", "6/15/2008", "10/15/2007", 0.0375, 0.0405, 100, 2, 0);
			},
			{ expectedResult: 99.8782860147213 }
		);
	}
	export function test_Functions_$OddLYield_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ODDLYIELD("4/20/2008", "6/15/2008", "12/24/2007", 0.0375, 99.875, 100, 2, 0)',
			function (ctx) {
				return ctx.workbook.functions.oddLYield("4/20/2008", "6/15/2008", "12/24/2007", 0.0375, 99.875, 100, 2, 0);
			},
			{ expectedResult: 0.0451922356291692 }
		);
	}
	export function test_Functions_$OddFPrice_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ODDFPRICE("11/11/2008", "3/1/2021", "10/15/2008", "3/1/2009",0.0785, 0.0625, 100, 2, 0)',
			function (ctx) {
				return ctx.workbook.functions.oddFPrice("11/11/2008", "3/1/2021", "10/15/2008", "3/1/2009", 0.0785, 0.0625, 100, 2, 0);
			},
			{ expectedResult: 113.599205828238 }
		);
	}
	export function test_Functions_$OddFYield_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ODDFYIELD("11/11/2008", "3/1/2021", "10/15/2008", "3/1/2009",0.0575, 84.5, 100, 2, 0)',
			function (ctx) {
				return ctx.workbook.functions.oddFYield("11/11/2008", "3/1/2021", "10/15/2008", "3/1/2009", 0.0575, 84.5, 100, 2, 0);
			},
			{ expectedResult: 0.0772455415972989 }
		);
	}
	export function test_Functions_$RandBetween_cvt_JScript_V12() {
		
		
		Excel.run(function (ctx) {
			var result = ctx.workbook.functions.randBetween(10, 20);
			result.load();
			return ctx.sync()
				.then(function () {
					
					Util.assert(() => !isNaN(result.value))
					Util.assert(() => result.value % 1 === 0);
					Util.assert(() => result.value >= 10 && result.value <= 20);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Functions_$WeekNum_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=WEEKNUM("3/9/2012")',
			function (ctx) {
				return ctx.workbook.functions.weekNum("3/9/2012");
			},
			{ expectedResult: 10 }
		);
	}
	export function test_Functions_$AmorDegrc_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=AMORDEGRC(2400, 39679, 39813, 300, 1, 0.15, 1)',
			function (ctx) {
				return ctx.workbook.functions.amorDegrc(2400, 39679, 39813, 300, 1, 0.15, 1);
			},
			{ expectedResult: 776 }
		);
	}
	export function test_Functions_$AmorLinc_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=AMORLINC(2400, 39679, 39813, 300, 1, 0.15, 1)',
			function (ctx) {
				return ctx.workbook.functions.amorLinc(2400, 39679, 39813, 300, 1, 0.15, 1);
			},
			{ expectedResult: 360 }
		);
	}
	export function test_Functions_$Convert_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CONVERT(1, "lbm", "kg")',
			function (ctx) {
				return ctx.workbook.functions.convert(1, "lbm", "kg")
			},
			{ expectedResult: 0.45359237 }
		);
	}
	export function test_Functions_$AccrInt_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ACCRINT(39508,39691,39569,0.1,1000,2,0)',
			function (ctx) {
				return ctx.workbook.functions.accrInt(39508, 39691, 39569, 0.1, 1000, 2, 0);
			},
			{ expectedResult: 16.6666666666667 }
		);
	}
	export function test_Functions_$AccrIntM_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ACCRINTM(39539,39614,0.1,1000,3)',
			function (ctx) {
				return ctx.workbook.functions.accrIntM(39539, 39614, 0.1, 1000, 3);
			},
			{ expectedResult: 20.5479452054795 }
		);
	}
	export function test_Functions_$WorkDay_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=WORKDAY(1,10)',
			function (ctx) {
				return ctx.workbook.functions.workDay(1, 10);
			},
			{ expectedResult: 13 }
		);
	}
	export function test_Functions_$NetworkDays_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NETWORKDAYS(1,15)',
			function (ctx) {
				return ctx.workbook.functions.networkDays(1, 15);
			},
			{ expectedResult: 10 }
		);
	}
	export function test_Functions_$Gcd_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=GCD(24,36)',
			function (ctx) {
				return ctx.workbook.functions.gcd(24, 36);
			},
			{ expectedResult: 12 }
		);
	}
	export function test_Functions_$MultiNomial_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=MULTINOMIAL(2,3,4)',
			function (ctx) {
				return ctx.workbook.functions.multiNomial(2, 3, 4);
			},
			{ expectedResult: 1260 }
		);
	}
	export function test_Functions_$Lcm_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LCM(5,2)',
			function (ctx) {
				return ctx.workbook.functions.lcm(5, 2);
			},
			{ expectedResult: 10 }
		);
	}
	export function test_Functions_$FVSchedule_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A3");
			cellA1A3.values = [[0.09], [0.11], [0.1]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=FVSCHEDULE(1,Sheet1!A1:A3)',
			function (ctx) {
				var cellA1A3 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A3");
				return ctx.workbook.functions.fvschedule(1, cellA1A3);
			},
			{ expectedResult: 1.33089 }
		);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$CountIfs_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COUNTIFS(Charts!$F$3:$H$5, ">10", Charts!F3:H5, "<20")',
			function (ctx) {
				return ctx.workbook.functions.countIfs(
					ctx.workbook.worksheets.getItem("Charts").getRange("F3:H5"),
					">10",
					ctx.workbook.worksheets.getItem("Charts").getRange("F3:H5"),
					"<20");
			}
		);
	}
	export function test_Functions_$SumIfs_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=SUMIFS(Sheet1!A1:A10,Sheet1!A1:A10,">5")',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.sumIfs(cellA1A10, cellA1A10, ">5");
			}
		);
	}
	export function test_Functions_$AverageIf_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=AVERAGEIF(Sheet1!A1:A10,"<6")',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.averageIf(cellA1A10, "<6");
			}
		);
	}
	export function test_Functions_$AverageIfs_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=AVERAGEIFS(Sheet1!A1:A10,Sheet1!A1:A10,">5")',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.averageIfs(cellA1A10, cellA1A10, ">5");
			}
		);
	}
	export function test_Functions_$BinomDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BINOM.DIST(6,10,0.5,FALSE)',
			function (ctx) {
				return ctx.workbook.functions.binom_Dist(6, 10, 0.5, false);
			},
			{ expectedResult: 0.205078125 }
		);
	}
	export function test_Functions_$BinomInv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BINOM.INV(6,0.5,0.75)',
			function (ctx) {
				return ctx.workbook.functions.binom_Inv(6, 0.5, 0.75);
			},
			{ expectedResult: 4 }
		);
	}
	export function test_Functions_$ConfidenceNorm_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CONFIDENCE.NORM(0.05,2.5,50)',
			function (ctx) {
				return ctx.workbook.functions.confidence_Norm(0.05, 2.5, 50);
			},
			{ expectedResult: 0.692951912174839 }
		);
	}
	export function test_Functions_$ConfidenceT_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CONFIDENCE.T(0.05,1,50)',
			function (ctx) {
				return ctx.workbook.functions.confidence_T(0.05, 1, 50);
			},
			{ expectedResult: 0.28419685549573 }
		);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$ExponDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=EXPON.DIST(0.2,10,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.expon_Dist(0.2, 10, true);
			},
			{ expectedResult: 0.864664716763387 }
		);
	}
	export function test_Functions_$GammaDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=GAMMA.DIST(10.00001131,9,2,FALSE)',
			function (ctx) {
				return ctx.workbook.functions.gamma_Dist(10.00001131, 9, 2, false);
			},
			{ expectedResult: 0.032639130418294 }
		);
	}
	export function test_Functions_$GammaInv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=GAMMA.INV(0.068,9,2)',
			function (ctx) {
				return ctx.workbook.functions.gamma_Inv(0.068, 9, 2);
			},
			{ expectedResult: 9.99712996747266 }
		);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$NormDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NORM.DIST(42,40,1.5,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.norm_Dist(42, 40, 1.5, true);
			},
			{ expectedResult: 0.908788780274132 }
		);
	}
	export function test_Functions_$NormInv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NORM.INV(0.9087,40,1.5)',
			function (ctx) {
				return ctx.workbook.functions.norm_Inv(0.9087, 40, 1.5);
			},
			{ expectedResult: 41.9991883280132 }
		);
	}
	export function test_Functions_$PercentileExc_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=PERCENTILE.EXC(Sheet1!A1:A10,0.25)',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.percentile_Exc(cellA1A10, 0.25);
			},
			{ expectedResult: 2.75 }
		);
	}
	export function test_Functions_$PercentileInc_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=PERCENTILE.INC(Sheet1!A1:A10,0.25)',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.percentile_Inc(cellA1A10, 0.25);
			},
			{ expectedResult: 3.25 }
		);
	}
	export function test_Functions_$PercentRankExc_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=PERCENTRANK.EXC(Sheet1!A1:A10,4)',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.percentRank_Exc(cellA1A10, 4);
			},
			{ expectedResult: 0.363 }
		);
	}
	export function test_Functions_$PercentRankInc_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=PERCENTRANK.INC(Sheet1!A1:A10,4)',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.percentRank_Inc(cellA1A10, 4);
			},
			{ expectedResult: 0.333 }
		);
	}
	export function test_Functions_$PoissonDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=POISSON.DIST(2,5,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.poisson_Dist(2, 5, true);
			},
			{ expectedResult: 0.124652019483081 }
		);
	}
	export function test_Functions_$QuartileExc_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=QUARTILE.EXC(Sheet1!A1:A10,2)',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.quartile_Exc(cellA1A10, 2);
			},
			{ expectedResult: 5.5 }
		);
	}
	export function test_Functions_$QuartileInc_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=QUARTILE.INC(Sheet1!A1:A10,1)',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.quartile_Inc(cellA1A10, 1);
			},
			{ expectedResult: 3.25 }
		);
	}
	export function test_Functions_$RankAvg_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=RANK.AVG(5,Sheet1!A1:A10)',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.rank_Avg(5, cellA1A10);
			},
			{ expectedResult: 6 }
		);
	}
	export function test_Functions_$RankEq_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=RANK.EQ(2,Sheet1!A1:A10,1)',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.rank_Eq(2, cellA1A10, true);
			},
			{ expectedResult: 2 }
		);
	}
	export function test_Functions_$StDevS_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=STDEV.S(1234,1234,1255,1266)',
			function (ctx) {
				return ctx.workbook.functions.stDev_S(1234, 1234, 1255, 1266);
			},
			{ expectedResult: 15.945218719102 }
		);
	}
	export function test_Functions_$StDevP_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=STDEV.P(1234,1234,1255,1266)',
			function (ctx) {
				return ctx.workbook.functions.stDev_P(1234, 1234, 1255, 1266);
			},
			{ expectedResult: 13.8089644796415 }
		);
	}
	export function test_Functions_$TDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=T.DIST(60,1,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.t_Dist(60, 1, true);
			},
			{ expectedResult: 0.994695326367377 }
		);
	}
	export function test_Functions_$TDist2T_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=T.DIST.2T(1.95888,60)',
			function (ctx) {
				return ctx.workbook.functions.t_Dist_2T(1.95888, 60);
			},
			{ expectedResult: 0.054779129715315 }
		);
	}
	export function test_Functions_$TDistRT_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=T.DIST.RT(1.95888,60)',
			function (ctx) {
				return ctx.workbook.functions.t_Dist_RT(1.95888, 60);
			},
			{ expectedResult: 0.0273895648576575 }
		);
	}
	export function test_Functions_$TInv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=T.INV(0.75,2)',
			function (ctx) {
				return ctx.workbook.functions.t_Inv(0.75, 2);
			},
			{ expectedResult: 0.816496580927726 }
		);
	}
	export function test_Functions_$TInv2T_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=T.INV.2T(0.546,20)',
			function (ctx) {
				return ctx.workbook.functions.t_Inv_2T(0.546, 20);
			},
			{ expectedResult: 0.614211109890761 }
		);
	}
	export function test_Functions_$VarS_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=VAR.S(100,200,300,400,500,150,250,350)',
			function (ctx) {
				return ctx.workbook.functions.var_S(100, 200, 300, 400, 500, 150, 250, 350);
			},
			{ expectedResult: 17812.5 }
		);
	}
	export function test_Functions_$VarP_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=VAR.P(100,200,300,400,500,150,250,350)',
			function (ctx) {
				return ctx.workbook.functions.var_P(100, 200, 300, 400, 500, 150, 250, 350);
			},
			{ expectedResult: 15585.9375 }
		);
	}
	export function test_Functions_$WeibullDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=WEIBULL.DIST(105,20,100,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.weibull_Dist(105, 20, 100, true);
			},
			{ expectedResult: 0.929581390069277 }
		);
	}
	export function test_Functions_$NetworkDaysIntl_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NETWORKDAYS.INTL(10,5,1)',
			function (ctx) {
				return ctx.workbook.functions.networkDays_Intl(10, 5, 1);
			},
			{ expectedResult: -4 }
		);
	}
	export function test_Functions_$WorkDayIntl_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=WORKDAY.INTL(10,5,1)',
			function (ctx) {
				return ctx.workbook.functions.workDay_Intl(10, 5, 1);
			},
			{ expectedResult: 17 }
		);
	}
	export function test_Functions_$ECMACeiling_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ECMA.CEILING(4,6)',
			function (ctx) {
				return ctx.workbook.functions.ecma_Ceiling(4, 6);
			},
			{ expectedResult: 6 }
		);
	}
	export function test_Functions_$ISOCeiling_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ISO.CEILING(4.3,2)',
			function (ctx) {
				return ctx.workbook.functions.iso_Ceiling(4.3, 2);
			},
			{ expectedResult: 6 }
		);
	}
	export function test_Functions_$BetaDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BETA.DIST(2,8,10,TRUE,1,3)',
			function (ctx) {
				return ctx.workbook.functions.beta_Dist(2, 8, 10, true, 1, 3);
			},
			{ expectedResult: 0.685470581054687 }
		);
	}
	export function test_Functions_$BetaInv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BETA.INV(0.68547,8,10,1,3)',
			function (ctx) {
				return ctx.workbook.functions.beta_Inv(0.68547, 8, 10, 1, 3);
			},
			{ expectedResult: 1.99999960839176 }
		);
	}
	export function test_Functions_$ChiSqDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CHISQ.DIST(0.91234,4,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.chiSq_Dist(0.91234, 4, true);
			},
			{ expectedResult: 0.077216191414647 }
		);
	}
	export function test_Functions_$ChiSqDistRT_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CHISQ.DIST.RT(0.91234,4)',
			function (ctx) {
				return ctx.workbook.functions.chiSq_Dist_RT(0.91234, 4);
			},
			{ expectedResult: 0.922783808585353 }
		);
	}
	export function test_Functions_$ChiSqInv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CHISQ.INV(0.91234,4)',
			function (ctx) {
				return ctx.workbook.functions.chiSq_Inv(0.91234, 4);
			},
			{ expectedResult: 8.10917083813731 }
		);
	}
	export function test_Functions_$ChiSqInvRT_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CHISQ.INV.RT(0.91234,4)',
			function (ctx) {
				return ctx.workbook.functions.chiSq_Inv_RT(0.91234, 4);
			},
			{ expectedResult: 0.983150971101955 }
		);
	}
	export function test_Functions_$FDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=F.DIST(15.206,6,4,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.f_Dist(15.206, 6, 4, true);
			},
			{ expectedResult: 0.989998941499284 }
		);
	}
	export function test_Functions_$FDistRT_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=F.DIST.RT(15.206,6,4)',
			function (ctx) {
				return ctx.workbook.functions.f_Dist_RT(15.206, 6, 4);
			},
			{ expectedResult: 0.0100010585007161 }
		);
	}
	export function test_Functions_$FInv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=F.INV(0.01,6,4)',
			function (ctx) {
				return ctx.workbook.functions.f_Inv(0.01, 6, 4);
			},
			{ expectedResult: 0.109309914124579 }
		);
	}
	export function test_Functions_$FInvRT_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=F.INV.RT(0.01,6,4)',
			function (ctx) {
				return ctx.workbook.functions.f_Inv_RT(0.01, 6, 4);
			},
			{ expectedResult: 15.2068648611575 }
		);
	}
	export function test_Functions_$HypGeomDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=HYPGEOM.DIST(1,4,8,20,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.hypGeom_Dist(1, 4, 8, 20, true);
			},
			{ expectedResult: 0.465428276573787 }
		);
	}
	export function test_Functions_$LogNormDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LOGNORM.DIST(4,3.5,1.2,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.logNorm_Dist(4, 3.5, 1.2, true);
			},
			{ expectedResult: 0.0390835557068005 }
		);
	}
	export function test_Functions_$LogNormInv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=LOGNORM.INV(0.039084,3.5,1.2)',
			function (ctx) {
				return ctx.workbook.functions.logNorm_Inv(0.039084, 3.5, 1.2);
			},
			{ expectedResult: 4.00002521868064 }
		);
	}
	export function test_Functions_$NegBinomDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NEGBINOM.DIST(10,5,0.25,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.negBinom_Dist(10, 5, 0.25, true);
			},
			{ expectedResult: 0.313514058478177 }
		);
	}
	export function test_Functions_$NormSDist_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NORM.S.DIST(0.91234,TRUE)',
			function (ctx) {
				return ctx.workbook.functions.norm_S_Dist(0.91234, true);
			},
			{ expectedResult: 0.819205118078742 }
		);
	}
	export function test_Functions_$NormSInv_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NORM.S.INV(0.908789)',
			function (ctx) {
				return ctx.workbook.functions.norm_S_Inv(0.908789);
			},
			{ expectedResult: 1.33333467304411 }
		);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_$ZTest_cvt_JScript_V12() {
		var setupAction = function (ctx: Excel.RequestContext) {
			var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
			cellA1A10.values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]];
		};
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			setupAction,
			'=Z.TEST(Sheet1!A1:A10,4)',
			function (ctx) {
				var cellA1A10 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A10");
				return ctx.workbook.functions.z_Test(cellA1A10, 4);
			},
			{ expectedResult: 0.058592543599069 }
		);
	}
	export function test_Functions_$ErfPrecise_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ERF.PRECISE(4)',
			function (ctx) {
				return ctx.workbook.functions.erf_Precise(4);
			},
			{ expectedResult: 0.999999984582742 }
		);
	}
	export function test_Functions_$ErfCPrecise_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ERFC.PRECISE(4)',
			function (ctx) {
				return ctx.workbook.functions.erfC_Precise(4);
			},
			{ expectedResult: 1.541725790028e-8 }
		);
	}
	export function test_Functions_$GammaLnPrecise_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=GAMMALN.PRECISE(4)',
			function (ctx) {
				return ctx.workbook.functions.gammaLn_Precise(4);
			},
			{ expectedResult: 1.79175946922805 }
		);
	}
	export function test_Functions_$CeilingPrecise_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CEILING.PRECISE(4.2,2)',
			function (ctx) {
				return ctx.workbook.functions.ceiling_Precise(4.2, 2);
			},
			{ expectedResult: 6 }
		);
	}
	export function test_Functions_$FloorPrecise_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FLOOR.PRECISE(4.2,2)',
			function (ctx) {
				return ctx.workbook.functions.floor_Precise(4.2, 2);
			},
			{ expectedResult: 4 }
		);
	}
	export function test_Functions_$Acot_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ACOT(4)',
			function (ctx) {
				return ctx.workbook.functions.acot(4);
			},
			{ expectedResult: 0.244978663126864 }
		);
	}
	export function test_Functions_$Acoth_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ACOTH(4)',
			function (ctx) {
				return ctx.workbook.functions.acoth(4);
			},
			{ expectedResult: 0.255412811882995 }
		);
	}
	export function test_Functions_$Cot_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COT(4)',
			function (ctx) {
				return ctx.workbook.functions.cot(4);
			},
			{ expectedResult: 0.863691154450617 }
		);
	}
	export function test_Functions_$Coth_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COTH(4)',
			function (ctx) {
				return ctx.workbook.functions.coth(4);
			},
			{ expectedResult: 1.00067115040168 }
		);
	}
	export function test_Functions_$Csc_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CSC(4)',
			function (ctx) {
				return ctx.workbook.functions.csc(4);
			},
			{ expectedResult: -1.3213487088109 }
		);
	}
	export function test_Functions_$Csch_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CSCH(4)',
			function (ctx) {
				return ctx.workbook.functions.csch(4);
			},
			{ expectedResult: 0.0366435703258656 }
		);
	}
	export function test_Functions_$Sec_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SEC(4)',
			function (ctx) {
				return ctx.workbook.functions.sec(4);
			},
			{ expectedResult: -1.5298856564664 }
		);
	}
	export function test_Functions_$Sech_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SECH(4)',
			function (ctx) {
				return ctx.workbook.functions.sech(4);
			},
			{ expectedResult: 0.0366189934736865 }
		);
	}
	export function test_Functions_$ImTan_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMTAN(4)',
			function (ctx) {
				return ctx.workbook.functions.imTan(4);
			}
		);
	}
	export function test_Functions_$ImCot_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMCOT(4)',
			function (ctx) {
				return ctx.workbook.functions.imCot(4);
			}
		);
	}
	export function test_Functions_$ImCsc_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMCSC(4)',
			function (ctx) {
				return ctx.workbook.functions.imCsc(4);
			}
		);
	}
	export function test_Functions_$ImCsch_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMCSCH(4)',
			function (ctx) {
				return ctx.workbook.functions.imCsch(4);
			}
		);
	}
	export function test_Functions_$ImSec_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMSEC(4)',
			function (ctx) {
				return ctx.workbook.functions.imSec(4);
			}
		);
	}
	export function test_Functions_$ImSech_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMSECH(4)',
			function (ctx) {
				return ctx.workbook.functions.imSech(4);
			}
		);
	}
	export function test_Functions_$Bitand_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BITAND(5,3)',
			function (ctx) {
				return ctx.workbook.functions.bitand(5,3);
			}
		);
	}
	export function test_Functions_$Bitor_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BITOR(5,3)',
			function (ctx) {
				return ctx.workbook.functions.bitor(5, 3);
			},
			{ expectedResult: 7 }
		);
	}
	export function test_Functions_$Bitxor_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BITXOR(5,3)',
			function (ctx) {
				return ctx.workbook.functions.bitxor(5, 3);
			},
			{ expectedResult: 6 }
		);
	}
	export function test_Functions_$Bitlshift_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BITLSHIFT(40,2)',
			function (ctx) {
				return ctx.workbook.functions.bitlshift(40, 2);
			},
			{ expectedResult: 160 }
		);
	}
	export function test_Functions_$Bitrshift_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BITRSHIFT(160,2)',
			function (ctx) {
				return ctx.workbook.functions.bitrshift(160, 2);
			},
			{ expectedResult: 40 }
		);
	}
	export function test_Functions_$Permutationa_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=PERMUTATIONA(4,3)',
			function (ctx) {
				return ctx.workbook.functions.permutationa(4, 3);
			},
			{ expectedResult: 64 }
		);
	}
	export function test_Functions_$Combina_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=COMBINA(4,3)',
			function (ctx) {
				return ctx.workbook.functions.combina(4, 3);
			},
			{ expectedResult: 20 }
		);
	}
	export function test_Functions_$Xor_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=XOR(3>0,2<9)',
			function (ctx) {
				return ctx.workbook.functions.xor(3 > 0, 2 < 9);
			},
			{ expectedResult: false }
		);
	}
	export function test_Functions_$PDuration_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=PDURATION(0.025,2000,2200)',
			function (ctx) {
				return ctx.workbook.functions.pduration(0.025, 2000, 2200);
			},
			{ expectedResult: 3.85986616262266 }
		);
	}
	export function test_Functions_$Base_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BASE(7,2)',
			function (ctx) {
				return ctx.workbook.functions.base(7, 2);
			},
			{ expectedResult: "111" }
		);
	}
	export function test_Functions_$Decimal_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DECIMAL("FF",16)',
			function (ctx) {
				return ctx.workbook.functions.decimal("FF", 16);
			},
			{ expectedResult: 255 }
		);
	}
	export function test_Functions_$Days_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=DAYS(15,1)',
			function (ctx) {
				return ctx.workbook.functions.days(15, 1);
			},
			{ expectedResult: 14 }
		);
	}
	export function test_Functions_$BinomDistRange_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=BINOM.DIST.RANGE(60,0.75,48)',
			function (ctx) {
				return ctx.workbook.functions.binom_Dist_Range(60, 0.75, 48);
			},
			{ expectedResult: 0.0839749674290475 }
		);
	}
	export function test_Functions_$Gamma_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=GAMMA(2.5)',
			function (ctx) {
				return ctx.workbook.functions.gamma(2.5);
			},
			{ expectedResult: 1.32934038817914 }
		);
	}
	export function test_Functions_$SkewP_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SKEW.P(1,2,3,4,5,6,7,8,9,10,5,3,4)',
			function (ctx) {
				return ctx.workbook.functions.skew_p(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5, 3, 4);
			},
			{ expectedResult: 0.316462838742861 }
		);
	}
	export function test_Functions_$Gauss_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=GAUSS(2)',
			function (ctx) {
				return ctx.workbook.functions.gauss(2);
			},
			{ expectedResult: 0.477249868051821 }
		);
	}
	export function test_Functions_$Phi_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=PHI(1)',
			function (ctx) {
				return ctx.workbook.functions.phi(1);
			},
			{ expectedResult: 0.241970724519143 }
		);
	}
	export function test_Functions_$Rri_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=RRI(96,10000,11000)',
			function (ctx) {
				return ctx.workbook.functions.rri(96, 10000, 11000);
			},
			{ expectedResult: 0.00099330737629133 }
		);
	}
	export function test_Functions_$Unichar_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=UNICHAR(65)',
			function (ctx) {
				return ctx.workbook.functions.unichar(65);
			},
			{ expectedResult: 'A' }
		);
	}
	export function test_Functions_$Unicode_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=UNICODE("ABC")',
			function (ctx) {
				return ctx.workbook.functions.unicode("ABC");
			},
			{ expectedResult: 65 }
		);
	}
	export function test_Functions_$Arabic_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ARABIC("LXXXIV")',
			function (ctx) {
				return ctx.workbook.functions.arabic("LXXXIV");
			},
			{ expectedResult: 84 }
		);
	}
	export function test_Functions_$IsoWeekNum_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=ISOWEEKNUM(15)',
			function (ctx) {
				return ctx.workbook.functions.isoWeekNum(15);
			},
			{ expectedResult: 2 }
		);
	}
	export function test_Functions_$NumberValue_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=NUMBERVALUE("5.5",".")',
			function (ctx) {
				return ctx.workbook.functions.numberValue("5.5", ".");
			},
			{ expectedResult: 5.5 }
		);
	}
	export function test_Functions_$Sheet_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SHEET("Sheet1")',
			function (ctx) {
				return ctx.workbook.functions.sheet("Sheet1");
			},
			{ expectedResult: 2 }
		);
	}
	export function test_Functions_$Sheets_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=SHEETS()',
			function (ctx) {
				return ctx.workbook.functions.sheets();
			}
		);
	}
    
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
    export function test_Functions_$IsFormula_cvt_JScript_V12() {
        var setupAction = function (ctx: Excel.RequestContext) {
            var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
            cellA5.formulas = [["=PI()"]];
        };
        ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
            setupAction,
            '=ISFORMULA(Sheet1!A5)',
            function (ctx) {
                var cellA5 = ctx.workbook.worksheets.getItem("Sheet1").getRange("A5");
                return ctx.workbook.functions.isFormula(cellA5);
            },
            { expectedResult: true }
        );
	}
	
	
	
	
	
	
	
	
	
	export function test_Functions_$CeilingMath_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=CEILING.MATH(5.2,5)',
			function (ctx) {
				return ctx.workbook.functions.ceiling_Math(5.2, 5);
			},
			{ expectedResult: 10 }
		);
	}
	export function test_Functions_$FloorMath_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=FLOOR.MATH(5.2,5)',
			function (ctx) {
				return ctx.workbook.functions.floor_Math(5.2, 5);
			},
			{ expectedResult: 5 }
		);
	}
	export function test_Functions_$ImSinh_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMSINH(5)',
			function (ctx) {
				return ctx.workbook.functions.imSinh(5);
			}
		);
	}
	export function test_Functions_$ImCosh_cvt_JScript_V12() {
		ExcelTest.FunctionsHelper.validateAgainstExcelFormula(
			'=IMCOSH(5)',
			function (ctx) {
				return ctx.workbook.functions.imCosh(5);
			}
		);
	}
}
module ExcelTest {
	export function test_GeneralRuntime_Session$ExcelRun_cvt_JScript_V14() {
		var urlAndHeaders: OfficeExtension.RequestUrlAndHeaderInfo = RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri)
		var session = new Excel.Session(urlAndHeaders.url, urlAndHeaders.headers);
		Excel.run(session, function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet.getRange("A1");
			range.formulas = [["=1+4"]];
			range.load();
			return ctx.sync()
				.then(() => {
					Util.assertCompareArray(range.values, [[5]]);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_GeneralRuntime_Session$ExcelRun$NoArgOnlyWorkInAgave_cvt_JScript_V14() {
		var session = new Excel.Session();
		Excel.run(session, function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet.getRange("A1");
			range.formulas = [["=1+5"]];
			range.load();
			return ctx.sync()
				.then(() => {
					Util.assertCompareArray(range.values, [[6]]);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_GeneralRuntime_Session$Context_cvt_JScript_V14() {
		var urlAndHeaders: OfficeExtension.RequestUrlAndHeaderInfo = RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri)
		var session = new Excel.Session(urlAndHeaders.url, urlAndHeaders.headers);
		var ctx = new Excel.RequestContext(session);
		var sheet = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet.getRange("A1");
		range.formulas = [["=1+6"]];
		range.load();
		ctx.sync()
			.then(() => {
				Util.assertCompareArray(range.values, [[7]]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_GeneralRuntime_Session$Context$NoArgOnlyWorkInAgave_cvt_JScript_V14() {
		var session = new Excel.Session();
		var ctx = new Excel.RequestContext(session);
		var sheet = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet.getRange("A1");
		range.formulas = [["=1+7"]];
		range.load();
		ctx.sync()
			.then(() => {
				Util.assertCompareArray(range.values, [[8]]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_GeneralRuntime_RequestContext$UsingSameObjectAcrossRequests_cvt_JScript_V11() {
		RichApiTest.log.comment("This test will take ~2 seconds to execute.");
		var range: Excel.Range;
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			range = sheet.getRange("A1");
			range.formulas = [["=1+4"]];
			ctx.trackedObjects.add(range);
			return ctx.sync();
		})
			.then(function () {
				setTimeout(readBackValueIn2Seconds, 2000);
			})
			
			.catch(ExcelTest.reportError);
		function readBackValueIn2Seconds() {
			Excel.run(range, function (ctx) {
				range.load("values");
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(5, range.values[0][0]);
						
						
						ctx.trackedObjects.remove(range);
						return ctx.sync();
					});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		}
	}
	export function test_GeneralRuntime_RequestContext$DontAllowMixingContexts_cvt_JScript_V11() {
		var range1: Excel.Range;
		var range2: Excel.Range;
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			range1 = sheet.getRange("A1");
			return ctx.sync();
		}).then(function () {
			return Excel.run(function (ctx) {
				var sheet = ctx.workbook.worksheets.getItem("Sheet1");
				range2 = sheet.getRange("A2");
				return ctx.sync();
			});
		}).then(function () {
			return Excel.run([range1, range2], function (ctx) {
				RichApiTest.log.fail("Should never have entered the body of the function since the tranges come from two different contexts.");
				return ctx.sync();
			}).catch(function (e) {
				if (e.code == OfficeExtension.ErrorCodes.invalidRequestContext) {
					RichApiTest.log.pass("Received expected error " + e);
				} else {
					RichApiTest.log.fail("Run failed, but with the wrong error: " + e);
				}
			});
		})
			
			.catch(ExcelTest.reportError);
	}
	export function test_GeneralRuntime_RequestContext$DontAllowEmptyRun_cvt_JScript_V11() {
		(<any>Excel).run()
			.catch(function (e) {
				if (e.code == OfficeExtension.ErrorCodes.invalidArgument) {
					RichApiTest.log.pass("Received expected error " + e);
				} else {
					RichApiTest.log.fail("Run failed, but with the wrong error: " + e);
				}
			});
	}
	export function test_GeneralRuntime_RequestContext$OnlyAllowClientObjectsInArray1_cvt_JScript_V11() {
		var range: Excel.Range;
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			range = sheet.getRange("A2");
			return ctx.sync();
		}).then(function () {
			return (<any>Excel).run([range, range.context], function (ctx) {
				return ctx.sync();
			})
		})
			.catch(function (e) {
				if (e.code == OfficeExtension.ErrorCodes.invalidArgument) {
					RichApiTest.log.pass("Received expected error " + e);
				} else {
					RichApiTest.log.fail("Run failed, but with the wrong error: " + e);
				}
			});
	}
	export function test_GeneralRuntime_RequestContext$OnlyAllowClientObjectsInArray2_cvt_JScript_V11() {
		var range: Excel.Range;
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			range = sheet.getRange("A2");
			return ctx.sync();
		}).then(function () {
			return (<any>Excel).run([range, "invalid thing"], function (ctx) {
				return ctx.sync();
			})
		})
			.catch(function (e) {
				if (e.code == OfficeExtension.ErrorCodes.invalidArgument) {
					RichApiTest.log.pass("Received expected error " + e);
				} else {
					RichApiTest.log.fail("Run failed, but with the wrong error: " + e);
				}
			});
	}
	export function test_GeneralRuntime_RequestContext$DontAllowNonFunctionAsBatch1_cvt_JScript_V11() {
		Excel.run(<any>"Not a function and so should fail")
			.catch(function (e) {
				if (e.code == OfficeExtension.ErrorCodes.invalidArgument) {
					RichApiTest.log.pass("Received expected error " + e);
				} else {
					RichApiTest.log.fail("Run failed, but with the wrong error: " + e);
				}
			});
	}
	export function test_GeneralRuntime_RequestContext$DontAllowNonFunctionAsBatch2_cvt_JScript_V11() {
		var range: Excel.Range;
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			range = sheet.getRange("A2");
			return ctx.sync();
		}).then(function () {
			return (<any>Excel).run(range, "not a function and so should fail");
		})
			.catch(function (e) {
				if (e.code == OfficeExtension.ErrorCodes.invalidArgument) {
					RichApiTest.log.pass("Received expected error " + e);
				} else {
					RichApiTest.log.fail("Run failed, but with the wrong error: " + e);
				}
			});
	}
	export function test_GeneralRuntime_RequestContext$SubsequentRequestsBlockedUntilPreviousRunIsDone_cvt_JScript_V11() {
		RichApiTest.log.comment("This test will take ~6 seconds to execute.");
		var savedRange: Excel.Range;
		Excel.run(function (ctx) {
			Util.assertCompareValues(true, ctx._autoCleanup, "Auto cleanup should be on inside the initial run");
			savedRange = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
			savedRange.formulas = [["=1+4"]];
			ctx.trackedObjects.add(savedRange);
			return ctx.sync();
		})
			.then(function () {
				
				startReadingValueButTakeALongTime(); 
				validateThatInTheMeantimeValueIsStillWhatItWas(); 
				setFormulaToSomethingElseAsSoonAsYouCan(); 
			})
			
			.catch(ExcelTest.reportError);
		setTimeout(function () {
			RichApiTest.log.comment("Now that the dust has settled, validate that the end result is formula is set by last run and its value is 10");
			Excel.run(function (ctx) {
				
				var newlyFetchedRange = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1")
				newlyFetchedRange.load("values");
				ctx.workbook._RemoveAllReferences();
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(10, newlyFetchedRange.values[0][0]);
						Util.assertCompareValues(false, savedRange.context._autoCleanup, "Auto cleanup should be off for the old context");
					})
					.then(ExcelTest.pass)
					.catch(ExcelTest.reportError);
			});
		}, 6000);
		function startReadingValueButTakeALongTime() {
			Excel.run(savedRange, function (ctx) {
				Util.assertCompareValues(true, savedRange.context._autoCleanup, "Auto cleanup should be on inside the reading-values function");
				return OfficeExtension.Utility._createTimeoutPromise(4000)
					.then(function () {
						savedRange.load("values");
						return ctx.sync()
							.then(function () {
								Util.assertCompareValues(5, savedRange.values[0][0]);
							})
							.catch(ExcelTest.reportError);
					});
			});
		}
		function validateThatInTheMeantimeValueIsStillWhatItWas() {
			Excel.run(function (ctx) {
				
				var rangeFetchedForValidation = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1")
				rangeFetchedForValidation.load("values");
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(5, rangeFetchedForValidation.values[0][0]);
					})
					.catch(ExcelTest.reportError);
			});
		}
		function setFormulaToSomethingElseAsSoonAsYouCan() {
			Excel.run(savedRange, function (ctx) {
				Util.assertCompareValues(true, savedRange.context._autoCleanup, "Auto cleanup should be on inside the second formula-setting function");
				savedRange.values = [[10]];
				return ctx.sync();
			});
		}
	}
	export function test_GeneralRuntime_RequestContext$SubsequentRequestWorksEvenIfFirstOneFailed_cvt_JScript_V11() {
		var savedRange: Excel.Range;
		Excel.run(function (ctx) {
			Util.assertCompareValues(true, ctx._autoCleanup, "Auto cleanup should be on inside the initial run");
			savedRange = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
			savedRange.formulas = [["=1+4"]];
			ctx.trackedObjects.add(savedRange);
			return ctx.sync();
		})
			.then(function () {
				
				actionThatWillThrowAnError();
				subsequentActionThatWillReadSavedRangeDataBack();
			})
			
			.catch(ExcelTest.reportError);
		function actionThatWillThrowAnError() {
			Excel.run(savedRange, function (ctx) {
				Util.assertCompareValues(true, savedRange.context._autoCleanup, "Auto cleanup should be on inside the reading-values function");
				return ctx.sync();
			})
			;
		}
		function subsequentActionThatWillReadSavedRangeDataBack() {
			Excel.run(savedRange, function (ctx) {
				var rangeFetchedForValidation = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1")
				rangeFetchedForValidation.load("values");
				ctx.trackedObjects.remove(savedRange);
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(5, rangeFetchedForValidation.values[0][0]);
					});
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		}
	}
	export async function test_GeneralRuntime_JsonStringify$Basic_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			const a1 = sheet.getRange("A1");
			a1.formulas = [["=SUM(1,6,9)"]];
			a1.format.font.color = "#335511";
			const b3 = sheet.getRange("B3");
			b3.numberFormat = [["yyyy-mm-dd"]];
			b3.values = [["2015-09-01"]];
			b3.format.font.italic = true;
			const a1B3 = a1.getBoundingRect(b3);
			a1B3.format.fill.color = "gold";
			const testRange = sheet.getRange("A1:B3");
			testRange.load([
				"worksheet/name", 
				"format/font/italic", 
				"format/font/bold", 
				"format/font/color", 
				"format/fill/color", 
				"values", 
				"text", 
				"numberFormat", 
				"address"
			].join(", "));
			
			Util.assertCompareObjectsAsJson({}, testRange);
			await ctx.sync();
			Util.assertCompareObjectsAsJson({
				format: {
					font: {
						italic: null, 
						bold: false,
						color: null,
					},
					fill: {
						color: "#FFD700"
					}
				},
				values: [
					[16, ""],
					["", ""],
					["", 42248 ]
				],
				text: [
					["16", ""],
					["", ""],
					["", "2015-09-01"]
				],
				numberFormat: [
					["General", "General"],
					["General", "General"],
					["General", "yyyy-mm-dd"]
				],
				address: "Sheet1!A1:B3"
			}, testRange);
			Util.assert(() => testRange instanceof OfficeExtension.ClientObject);
			Util.assert(() => !(testRange.toJSON() instanceof OfficeExtension.ClientObject));
			Util.assert(() => !(testRange.toJSON().format instanceof OfficeExtension.ClientObject));
			Util.assert(() => !(testRange.toJSON().format.fill instanceof OfficeExtension.ClientObject));
			
			
			ensureNoUndefinedProperties(testRange, "format, values, text, numberFormat, address");
			ensureNoUndefinedProperties(testRange.format, "font, fill");
			ensureNoUndefinedProperties(testRange.format.font, "italic, bold, color");
			ensureNoUndefinedProperties(testRange.format.fill, "color");
			
			function ensureNoUndefinedProperties(startObj: { [key: string]: any }, expected: string) {
				let enumeratedProperties: string[] = [];
				for (let key in startObj.toJSON()) {
					enumeratedProperties.push(key);
				}
				Util.assertCompareValues(
					expected.split(",").map(item => item.trim()).sort().join(", "),
					enumeratedProperties.sort().join(", "));
			}
		});
	}
	export async function test_GeneralRuntime_JsonStringify$ComplexTypes_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			var table = sheet.tables.add("A5:B7", false );
			var filtersToApply: Excel.SortField[] = [
				{
					key: 0, sortOn: Excel.SortOn.value, ascending: true
				},
				{
					key: 1, sortOn: Excel.SortOn.value, ascending: false
				}
			]
			table.sort.apply(filtersToApply);
			var refetchedTable = sheet.tables.getItemAt(0);
			refetchedTable.sort.load("fields");
			await ctx.sync()
			var loadedFieldsExtracted = refetchedTable.sort.fields.map((field) => {
				return {
					key: field.key,
					sortOn: field.sortOn,
					ascending: field.ascending
				};
			});
			Util.assertCompareObjectsAsJson(filtersToApply, loadedFieldsExtracted);
			sheet.getRange().clear();
		});
	}
	export async function test_GeneralRuntime_JsonStringify$Collections_cvt_JScript_V11() {
		
		await Excel.run(async (ctx) => {
			ctx.workbook.load("worksheets/name, worksheets/tables/id, worksheets/tables/columns/name");
			await ctx.sync();
			RichApiTest.log.comment("Workbook JSON");
			RichApiTest.log.comment(JSON.stringify(ctx.workbook, null, 4))
			RichApiTest.log.comment("~");
			RichApiTest.log.comment("Worksheet JSON");
			RichApiTest.log.comment(JSON.stringify(ctx.workbook.worksheets, null, 4))
			validateLoadedItems(JSON.parse(JSON.stringify(ctx.workbook))["worksheets"]);
			validateLoadedItems(JSON.parse(JSON.stringify(ctx.workbook.toJSON().worksheets)));
			validateLoadedItems(ctx.workbook.toJSON().worksheets);
			validateLoadedItems(JSON.parse(JSON.stringify(ctx.workbook.worksheets))["items"]);
			validateLoadedItems(JSON.parse(JSON.stringify(ctx.workbook.worksheets.toJSON().items)));
			validateLoadedItems(ctx.workbook.worksheets.toJSON().items);
		});
		
		await Excel.run(async (ctx) => {
			ctx.workbook.worksheets.load("name, tables/id, tables/columns/name");
			await ctx.sync();
			validateLoadedItems(JSON.parse(JSON.stringify(ctx.workbook.worksheets))["items"]);
			validateLoadedItems(JSON.parse(JSON.stringify(ctx.workbook.worksheets.toJSON().items)));
			validateLoadedItems(ctx.workbook.worksheets.toJSON().items);
		});
		function validateLoadedItems(worksheets: Excel.Interfaces.WorksheetData[]) {
			RichApiTest.Util.assert(() => worksheets && Array.isArray(worksheets) && worksheets.length > 0);
			let foundSheet1 = false;
			worksheets.forEach(sheet => {
				if (sheet.name === "Sheet1") {
					foundSheet1 = true;
					RichApiTest.Util.assert(() => Array.isArray(sheet.tables) && sheet.tables.length == 0);
				}
			});
			RichApiTest.Util.assert(() => foundSheet1);
			let foundTablesSheet = false;
			worksheets.forEach(sheet => {
				if (sheet.name === "ExistingTables") {
					foundTablesSheet = true;
					RichApiTest.Util.assert(() => Array.isArray(sheet.tables) && sheet.tables.length > 0);
					RichApiTest.log.comment("Tables on ExistingTables sheet are: " + JSON.stringify(sheet.tables, null, 4));
					sheet.tables.forEach(table => {
						RichApiTest.Util.assert(() => table.id && typeof table.name === "undefined" && table.columns.length > 0);
						const columnNames = table.columns.map(column => column.name);
						columnNames.forEach(name => RichApiTest.Util.assert(() => name.length > 0));
						RichApiTest.log.comment("Table " + table.id + ", columns: " + columnNames.join(","));
					})
				}
			});
			RichApiTest.Util.assert(() => foundTablesSheet);
		}
	}
	export async function test_GeneralRuntime_ObjectSet$RegularJson_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			const a1 = sheet.getRange("A1");
			a1.set({
				formulas: [["=SUM(1,6,9)"]],
				format: {
					font: {
						color: "#335511"
					}
				}
			});
			const b3 = sheet.getRange("B3");
			b3.set({
				numberFormat: [["yyyy-mm-dd"]],
				values: [["2015-09-01"]],
				format: {
					font: {
						italic: true
					}
				}
			});
			const a1B3 = a1.getBoundingRect(b3);
			a1B3.set({
				format: {
					fill: {
						color: "gold"
					}
				}
			});
			const testRange = sheet.getRange("A1:B3");
			testRange.load([
				"worksheet/name", 
				"format/font/italic", 
				"format/font/bold", 
				"format/font/color", 
				"format/fill/color", 
				"values", 
				"text", 
				"numberFormat", 
				"address"
			].join(", "));
			
			Util.assertCompareObjectsAsJson(testRange, {});
			await ctx.sync()
			Util.assertCompareObjectsAsJson({
				format: {
					font: {
						italic: null, 
						bold: false,
						color: null,
					},
					fill: {
						color: "#FFD700"
					}
				},
				values: [
					[16, ""],
					["", ""],
					["", 42248 ]
				],
				text: [
					["16", ""],
					["", ""],
					["", "2015-09-01"]
				],
				numberFormat: [
					["General", "General"],
					["General", "General"],
					["General", "yyyy-mm-dd"]
				],
				address: "Sheet1!A1:B3"
			}, testRange);
		});
	}
	export async function test_GeneralRuntime_ObjectSet$WithClientObject_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			const a1 = sheet.getRange("A1");
			a1.set({
				formulas: [["=sum(1,6,9)"]],
				format: {
					font: {
						color: "#aa5511"
					}
				},
				numberFormat: [["0.00"]]
			});
			
			var a1Loaded = sheet.getRange("A1").load("formulas, numberFormat");
			a1Loaded.load("format/font/color");
			await ctx.sync();
			const a5 = sheet.getRange("A5").set(a1Loaded);
			const a5Loaded = sheet.getRange("A5").load("address, values, text, formulas, numberFormat, format/font/color");
			
			await ctx.sync();
			Util.assertCompareObjectsAsJson({
				format: {
					font: {
						color: "#AA5511",
					}
				},
				formulas: [["=SUM(1,6,9)"]],
				values: [[16]],
				text: [["16.00"]],
				numberFormat: [["0.00"]],
				address: "Sheet1!A5"
			}, a5Loaded);
		});
	}
	export async function test_GeneralRuntime_ObjectSet$ClientObjectOfWrongSize_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			const a1 = sheet.getRange("A1");
			a1.set({
				formulas: [["=sum(1,6,9)"]],
				format: {
					font: {
						color: "#aa5511"
					}
				}
			});
			const a1Loaded = sheet.getRange("A1").load("formulas, format/font/color");
			await ctx.sync();
			const intentionallyTooLargeOfAddress = "A1:Z100";
			const a5 = sheet.getRange(intentionallyTooLargeOfAddress).set(a1Loaded);
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument, "Range.formulas");
		});
	}
	export async function test_GeneralRuntime_ObjectSet$ClientObjectAsPartOfJson_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			const a1 = sheet.getRange("A1");
			a1.set({
				format: {
					font: {
						color: "#aa5511"
					}
				}
			});
			const a1FormatLoaded = sheet.getRange("A1").format.load("font/color");
			await ctx.sync();
			const a5 = sheet.getRange("A5").set({
				format: a1FormatLoaded,
				formulas: [["=sum(1,6,9)"]],
				numberFormat: [["$0.00"]]
			});
			const a5loaded = sheet.getRange("A5").load("address, values, text, formulas, format/font/color");
			
			await ctx.sync();
			Util.assertCompareObjectsAsJson({
				format: {
					font: {
						color: "#AA5511",
					}
				},
				formulas: [["=SUM(1,6,9)"]],
				values: [[16]],
				text: [["$16.00"]],
				address: "Sheet1!A5"
			}, a5loaded);
		});
	}
	export async function test_GeneralRuntime_ObjectSet$WrongClientObjectTypesShouldFail_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			var a1 = sheet.getRange("A1");
			a1.set({
				format: {
					font: {
						color: "#aa5511"
					}
				}
			});
			const a1FontLoaded = sheet.getRange("A1").format.font.load();
			await ctx.sync();
			
			try {
				var a5 = sheet.getRange("A5").set(<any>a1FontLoaded);
			} catch (e) {
				Util.ensureExpectedFailureAndThrowIfUnexpected(e,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "Range.set" })
			}
		});
	}
	export async function test_GeneralRuntime_ObjectSet$ExtraArgumentsShouldFail_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			const a1 = sheet.getRange("A1");
			try {
				a1.set(<any>{
					format: {
						font: {
							color: "#aa5511"
						}
					},
					somethingThatDefinitelyDoesntExist: 5
				});
			} catch (e) {
				Util.ensureExpectedFailureAndThrowIfUnexpected(e,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "Range.set" });
				Util.ensureExpectedFailureAndThrowIfUnexpected(e.innerError, {
					code: OfficeExtension.ErrorCodes.invalidArgument,
					location: "somethingThatDefinitelyDoesntExist"
				});
				Util.assert(() => typeof e.innerError.innerError === 'undefined');
			}
			await ctx.sync();
		});
	}
	export async function test_GeneralRuntime_ObjectSet$PrivateVariableShouldFail_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			const a1 = sheet.getRange("A1");
			try {
				a1.set(<any>{
					format: {
						font: {
							color: "#aa5511"
						}
					},
					m_values: [[5]]
				});
			} catch (e) {
				Util.ensureExpectedFailureAndThrowIfUnexpected(e,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "Range.set" });
				Util.ensureExpectedFailureAndThrowIfUnexpected(e.innerError, {
					code: OfficeExtension.ErrorCodes.invalidArgument,
					location: "m_values"
				});
				Util.assert(() => typeof e.innerError.innerError === 'undefined');
			}
			return ctx.sync();
		});
	}
	export async function test_GeneralRuntime_ObjectSet$ReadOnlyPropertyWhenDisallowedShouldFail_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			const a1 = sheet.getRange("A1");
			try {
				a1.set(<any>{
					address: "Sheet1!A5" 
				});
			} catch (e) {
				Util.ensureExpectedFailureAndThrowIfUnexpected(e,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "Range.set" });
				Util.ensureExpectedFailureAndThrowIfUnexpected(e.innerError, {
					code: OfficeExtension.ErrorCodes.invalidArgument,
					location: "address"
				});
				Util.assert(() => typeof e.innerError.innerError === 'undefined');
			}
			return ctx.sync();
		});
	}
	export async function test_GeneralRuntime_ObjectSet$ReadOnlyPropertyWhenExplicitlyDisallowOnClientObjectShouldFail_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			const a1 = sheet.getRange("A1");
			const b1 = sheet.getRange("B1");
			a1.load("address, values");
			await ctx.sync();
			try {
				(<any>b1).set(a1, { throwOnReadOnly: true });
			} catch (e) {
				Util.ensureExpectedFailureAndThrowIfUnexpected(e,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "Range.set" });
				Util.ensureExpectedFailureAndThrowIfUnexpected(e.innerError, {
					code: OfficeExtension.ErrorCodes.invalidArgument,
					location: "address"
				});
				Util.assert(() => typeof e.innerError.innerError === 'undefined');
			}
		});
	}
	export async function test_GeneralRuntime_ObjectSet$ReadOnlyPropertyWhenAllowedToSkipOverIsOK_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			const a1 = sheet.getRange("A1");
			const propertiesToSet = {
				address: "Sheet1!A5" 
			};
			(<any>a1).set(propertiesToSet, { throwOnReadOnly: false });
			return ctx.sync();
		});
	}
	export async function test_GeneralRuntime_ObjectSet$PropertiesOnParentShouldFail_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			const range = ctx.workbook.worksheets.getItem("Sheet1").getRange('A1');
			try {
				range.set(<any>{
					worksheet: {
						name: "CannotSetParent"
					}
				});
			} catch (e) {
				Util.ensureExpectedFailureAndThrowIfUnexpected(e,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "Range.set" });
				Util.ensureExpectedFailureAndThrowIfUnexpected(e.innerError,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "worksheet" });
				Util.assert(() => typeof e.innerError.innerError === 'undefined');
			}
			await ctx.sync();
		});
	}
	export async function test_GeneralRuntime_ObjectSet$ShouldBeAbleToSkipUndefined_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange("A1");
			range.clear();
			range.set({
				format: undefined,
				values: [["Hello"]]
			})
			var rangeRead = worksheet.getRange("A1").load("values");
			await ctx.sync();
			Util.assertCompareArray(rangeRead.values, [["Hello"]]);
		});
	}
	export async function test_GeneralRuntime_ObjectSet$CollectionShouldNotHaveSetMethod_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			Util.assert(() => typeof (ctx.workbook.worksheets as any).set === "undefined");
			await ctx.sync();
		});
	}
	export async function test_GeneralRuntime_ObjectSet$SetCollectionThroughParentObjectShouldFail_cvt_JScript_V11() {
		await Excel.run(async (ctx) => {
			try {
				ctx.workbook.set(<any>{
					"worksheets": {
						
					}
				})
			} catch (e) {
				Util.ensureExpectedFailureAndThrowIfUnexpected(e,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "Workbook.set" });
				Util.ensureExpectedFailureAndThrowIfUnexpected(e.innerError,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "worksheets" });
				Util.assert(() => typeof e.innerError.innerError === 'undefined');
			}
			await ctx.sync();
		});
	}
	export async function test_GeneralRuntime_ObjectSet$SetCollectionThroughParentObjectShouldFail2_cvt_JScript_V11() {
		
		await Excel.run(async (ctx) => {
			ctx.workbook.load("worksheets/name");
			await ctx.sync();
			try {
				let json = ctx.workbook.toJSON();
				ctx.workbook.set(json)
			} catch (e) {
				Util.ensureExpectedFailureAndThrowIfUnexpected(e,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "Workbook.set" });
				Util.ensureExpectedFailureAndThrowIfUnexpected(e.innerError,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "worksheets" });
				Util.assert(() => typeof e.innerError.innerError === 'undefined');
			}
			await ctx.sync();
		});
	}
	export async function test_GeneralRuntime_ObjectSet$SetCollectionThroughParentIsIgnoredInProxyObject_cvt_JScript_V11() {
		
		await Excel.run(async (ctx) => {
			ctx.workbook.load("worksheets/name");
			await ctx.sync();
			RichApiTest.log.comment(JSON.stringify(ctx.workbook, null, 4));
			Util.assert(JSON.stringify(ctx.workbook).length > 10, "The resulting JSON isn't just an empty object");
			ctx.workbook.set(ctx.workbook);
			Util.assert(ctx._pendingRequest._actions.length === 0, "Should have no pending actions, because `set` above should have no-op-ed");
			await ctx.sync();
		});
	}
	export async function test_GeneralRuntime_ObjectSet$SetCollectionThroughParentIsIgnoredInProxyObject$FailsIfThrowOnReadOnlyExplicitlyTrue_cvt_JScript_V11() {
		
		await Excel.run(async (ctx) => {
			ctx.workbook.load("worksheets/name");
			await ctx.sync();
			try {
				ctx.workbook.set(ctx.workbook, { throwOnReadOnly: true });
			} catch (e) {
				Util.ensureExpectedFailureAndThrowIfUnexpected(e,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "Workbook.set" });
				Util.ensureExpectedFailureAndThrowIfUnexpected(e.innerError,
					{ code: OfficeExtension.ErrorCodes.invalidArgument, location: "worksheets" });
				Util.assert(() => typeof e.innerError.innerError === 'undefined');
			}
			await ctx.sync();
		});
	}
	
	
	
	
	
	export function test_GeneralRuntime_ErrorObjectDebugInfoContainsInnerInfoData_cvt_JScript_V11() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			sheet.getRange().clear();
			var a1 = sheet.getRange("A1");
			try {
				a1.set(<any>{
					address: "Sheet1!A5" 
				});
			} catch (e) {
				Util.ensureExpectedFailureAndThrowIfUnexpected(e, { code: OfficeExtension.ErrorCodes.invalidArgument, location: "Range.set" });
				Util.assert(() => ((e as OfficeExtension.Error).debugInfo as any).innerError != null)
				Util.ensureExpectedFailureAndThrowIfUnexpected(e.innerError, {
					code: OfficeExtension.ErrorCodes.invalidArgument,
					location: "address"
				});
				Util.assert(() => (<any>e).innerError.debugInfo.innerError == null);
				Util.assert(() => typeof e.innerError.innerError === 'undefined');
			}
			return ctx.sync();
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_GeneralRuntime_CodegenTrackUntrack$GeneratedWhereNeeded_cvt_JScript_V11() {
		var range: Excel.Range;
		Excel.run(function (ctx) {
			range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1").track();
			return ctx.sync();
		})
			.then(function () {
				return Excel.run(range, (ctx) => {
					range.format.fill.color = "yellow";
					range.untrack();
					return ctx.sync();
				});
			})
			.then(function () {
				RichApiTest.log.comment("Independent verification that color is indeed yellow");
				return Excel.run((ctx) => {
					var testRange = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
					testRange.load("format/fill/color");
					return ctx.sync().then(() => {
						Util.assertCompareValues("#FFFF00", testRange.format.fill.color);
					});
				});
			})
			.then(function () {
				return Excel.run(range, (ctx) => {
					range.format.fill.color = "purple";
					RichApiTest.log.comment("On an object that has been un-keep-referenced, the error is \"Item not found\".");
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound, "Workbook._GetObjectByReferenceId");
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_GeneralRuntime_CodegenTrackUntrack$NotGeneratedOnNonKeepRefObjects_cvt_JScript_V11() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet.getRange();
			Util.assert(() => range.track instanceof Function);
			Util.assert(() => typeof ((<any>sheet).track) === 'undefined');
			return ctx.sync();
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_GeneralRuntime_PostProcessAction_cvt_JScript_V17() {
		RichApiTest.log.comment("Please use JS debugger to verify that the DdaMethodHandler.PostProcessRichApiActions was triggered with corect number of actions");
		return Excel.run((ctx) => {
			ctx.workbook.internalTest.triggerPostProcess();
			return ctx.sync();
		})
	}
	export function test_GeneralRuntime_PostProcessAction$MultipleTimes_cvt_JScript_V17() {
		RichApiTest.log.comment("Please use JS debugger to verify that the DdaMethodHandler.PostProcessRichApiActions was triggered with corect number of actions");
		return Excel.run((ctx) => {
			ctx.workbook.internalTest.triggerPostProcess();
			ctx.workbook.internalTest.triggerPostProcess();
			ctx.workbook.internalTest.triggerPostProcess();
			ctx.workbook.internalTest.triggerPostProcess();
			return ctx.sync();
		})
	}
	export async function test_GeneralRuntime_RequestContextObject$ExcelRun$ReuseRequestContext_cvt_JScript_V18() {
		var expectedSheetName = "Sheet1";
		var context = new Excel.RequestContext();
		
		await Excel.run(context, async function(ctx) {
			var sheet = ctx.workbook.worksheets.getItem(expectedSheetName);
			sheet.load("name");
			await ctx.sync()
			
			Util.assertCompareValues(expectedSheetName, sheet.name, "The sheet name should be the same.");
		});
	}
	export async function test_GeneralRuntime_RequestContextObject$ExcelRun$NullArgumentForContext_cvt_JScript_V18() {
		var expectedSheetName = "Sheet1";
		
		await Excel.run(null, async function(ctx) {
			var sheet = ctx.workbook.worksheets.getItem(expectedSheetName);
			sheet.load("name");
			await ctx.sync()
			Util.assertCompareValues(expectedSheetName, sheet.name, "The sheet name should be the same.");
		});
	}
	export function test_GeneralRuntime_FirstPartyMethod_cvt_JScript_V17() {
		RichApiTest.log.comment("This test may fail if the it's not first party addin.");
		return Excel.run((ctx) => {
			ctx.workbook.internalTest.firstPartyMethod();
			return ctx.sync();
		})
			.then(() => {
				RichApiTest.log.pass("Do not see exception. Please double check whether the app is a first-party app. Solution 640c6609-80fb-43e0-ae0a-10b5996f3627 was treated as first-party app");
			})
			.catch((ex: OfficeExtension.Error) => {
				RichApiTest.log.comment("Got exception:" + JSON.stringify(ex));
				if (ex.code == Excel.ErrorCodes.accessDenied) {
					RichApiTest.log.pass("The app is not first-party app, got expected access denied error");
				}
				else {
					RichApiTest.log.fail("Unexpected error: " + JSON.stringify(ex));
				}
			});
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_GeneralRuntime_PendingStatements_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1";
		var values = [["Hello, World"]];
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			range.values = values;
			ctx.load(range);
			RichApiTest.log.comment("PendingStatements:");
			var pendingStatements = ctx.debugInfo.pendingStatements;
			pendingStatements.map(RichApiTest.log.comment);
			var expectedPendingStatements = [
				'var workbook = context.workbook;',
				'var worksheets = workbook.worksheets;',
				'var worksheet = worksheets.getItem("Sheet1");',
				'var range = worksheet.getRange("Sheet1!A1");',
				'range.track();',
				'// Instantiate {range}',
				'range.values = [["Hello, World"]];',
				'range.load();',
			];
			Util.assertCompareArray(pendingStatements, expectedPendingStatements);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(rangeAddress, range.address, "Range Address");
					Util.assertCompareArray(range.values, values);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export async function test_GeneralRuntime_Retrieve$basic_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1";
		var values = [["Hello, World"]];
		await Excel.run(async function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeSetup = worksheet.getRange(rangeAddress);
			rangeSetup.values = values;
			await ctx.sync()
			var range = worksheet.getRange(rangeAddress);
			var rangeResult = range.retrieve({ address: true, values: true });
			await ctx.sync();
			RichApiTest.log.comment("rangeData:");
			RichApiTest.log.comment(JSON.stringify(rangeResult));
			Util.assertCompareValues(rangeAddress, rangeResult.address, "Range Address");
			Util.assertCompareArray(rangeResult.values, values);
		});
	}
	export async function test_GeneralRuntime_Retrieve$compare_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1";
		var values = [["Hello, World"]];
		await Excel.run(async function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeSetup = worksheet.getRange(rangeAddress);
			rangeSetup.values = values;
			await ctx.sync()
			var range = worksheet.getRange(rangeAddress);
			var rangeResult = range.retrieve({ $all: true });
			await ctx.sync();
			RichApiTest.log.comment("rangeData:");
			RichApiTest.log.comment(JSON.stringify(rangeResult));
			Util.assertCompareValues(rangeAddress, rangeResult.address, "Range Address");
			Util.assertCompareArray(rangeResult.values, values);
			var range2 = worksheet.getRange(rangeAddress);
			range2.load({ $all: true });
			await ctx.sync();
			RichApiTest.log.comment("Compare Fetch and toJSON");
			Util.assertCompareObjectsAsJson(range2.toJSON(), rangeResult.toJSON());
		});
    }
	export async function test_GeneralRuntime_RetrievePolyfill$compare_cvt_JScript_V17() {
		OfficeExtension._internalConfig.alwaysPolyfillClientObjectRetrieveMethod = true;
		await test_GeneralRuntime_Retrieve$compare_cvt_JScript_V17();
		OfficeExtension._internalConfig.alwaysPolyfillClientObjectRetrieveMethod = false;
	}
	export async function test_GeneralRuntime_RetrieveAndSync$basic_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1";
		var values = [["Hello, World"]];
		await Excel.run(async function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeSetup = worksheet.getRange(rangeAddress);
			rangeSetup.values = values;
			await ctx.sync()
			var range = worksheet.getRange(rangeAddress);
			var rangeResult = range.retrieve({ $all: true });
			await ctx.sync();
			RichApiTest.log.comment("rangeData:");
			RichApiTest.log.comment(JSON.stringify(rangeResult, null, 4));
			var rangeJson = range.toJSON();
			RichApiTest.log.comment("rangeJson:");
			RichApiTest.log.comment(JSON.stringify(rangeJson, null, 4));
			Util.assertCompareValues(JSON.stringify(rangeJson), "{}", "Expect empty JSON for the range as the data is not loaded");
			Util.assertCompareValues(rangeAddress, rangeResult.address, "Range Address");
			Util.assertCompareArray(rangeResult.values, values);
		});
	}
	export async function test_GeneralRuntime_RetrieveAndSync$differentSnapshot_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B1";
		var values = [[100, "=A1 * 5"]];
		await Excel.run(async function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeSetup = worksheet.getRange(rangeAddress);
			rangeSetup.values = values;
			await ctx.sync()
			var range = worksheet.getRange(rangeAddress);
			var rangeResult = range.retrieve({ $all: true });
			await ctx.sync();
			RichApiTest.log.comment("rangeData:");
			RichApiTest.log.comment(JSON.stringify(rangeResult, null, 4));
			var rangeA1 = worksheet.getRange("A1");
			rangeA1.values = [[200]];
			var rangeResult2 = range.retrieve({ $all: true });
			await ctx.sync();
			RichApiTest.log.comment("After update A1, rangeData2:");
			RichApiTest.log.comment(JSON.stringify(rangeResult2, null, 4));
			Util.assert(!Util.compareArray(rangeResult2.values, rangeResult.values), "Expect rangeData2 != rangeData");
		});
	}
	export async function test_GeneralRuntime_Update_cvt_JScript_V18() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B1";
		var values = [[100, "=A1 * 5"]];
		await Excel.runBatch(async (batch) => {
			var rangeResult = await batch((workbook) => {
				var worksheet = workbook.worksheets.getItem(sheetName);
				var range = worksheet.getRange(rangeAddress);
				range.update({
					values: values,
					format: {
						fill: {
							color: "red"
						}
					}
				});
				var rangeResult = range.retrieve(
					{
						values: true, 
						format: {
							fill: {
								$all: true
							}
						}
					});
				RichApiTest.log.comment("PendingStatements:");
				workbook.context.debugInfo.pendingStatements.forEach(RichApiTest.log.comment);
				return rangeResult;
			});
			RichApiTest.log.comment("rangeData:");
			RichApiTest.log.comment(JSON.stringify(rangeResult, null, 4));
			RichApiTest.Util.assertCompareArray(rangeResult.values, [[100, 500]]);
			RichApiTest.log.comment(rangeResult.format.fill.color);
			RichApiTest.Util.assertCompareValues("#FF0000", rangeResult.format.fill.color);
			await batch(() => {
				RichApiTest.log.comment("Clear range before done");
				rangeResult.$proxy.clear();
			});
		});
	}
	export async function test_GeneralRuntime_RetrieveAndSync$option_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1";
		var values = [["Hello, World"]];
		await Excel.run(async function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeSetup = worksheet.getRange(rangeAddress);
			rangeSetup.values = values;
			await ctx.sync()
			var range = worksheet.getRange(rangeAddress);
			var rangeResult = range.retrieve({ values: true, address: true });
			await ctx.sync();
			RichApiTest.log.comment("rangeData:");
			RichApiTest.log.comment(JSON.stringify(rangeResult, null, 4));
			Util.assertCompareValues(rangeAddress, rangeResult.address, "Range Address");
			Util.assertCompareArray(rangeResult.values, values);
			Util.expectException(() => {
				RichApiTest.log.comment("Expect expcetion when access formulas as it's not specified in the load option");
				RichApiTest.log.comment(JSON.stringify(rangeResult.formulas));
			});
		});
	}
	export async function test_GeneralRuntime_EnsureUnchanged$success_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1";
		var values = [["Hello, World"]];
		await Excel.run(async function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeSetup = worksheet.getRange(rangeAddress);
			rangeSetup.values = values;
			await ctx.sync()
			var range = worksheet.getRange(rangeAddress);
			var rangeResult = range.retrieve({ $all: true });
			await ctx.sync();
			Util.assertCompareValues(rangeAddress, rangeResult.address, "Range Address");
			Util.assertCompareArray(rangeResult.values, values);
			range.ensureUnchanged(rangeResult.toJSON());
			await ctx.sync();
		});
	}
	export async function test_GeneralRuntime_EnsureUnchanged$fail_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1";
		var values = [["Hello, World"]];
		var valuesUpdate = [["Hello, Seattle"]];
		await Excel.run(async function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeSetup = worksheet.getRange(rangeAddress);
			rangeSetup.values = values;
			await ctx.sync()
			var range = worksheet.getRange(rangeAddress);
			var rangeResult = range.retrieve({ $all: true });
			await ctx.sync();
			Util.assertCompareValues(rangeAddress, rangeResult.address, "Range Address");
			Util.assertCompareArray(rangeResult.values, values);
			RichApiTest.log.comment("Update value to new value");
			range.values = valuesUpdate;
			await ctx.sync();
			RichApiTest.log.comment("ensureUnchanged should fail");
			range.ensureUnchanged(rangeResult.toJSON());
			await Util.ensureSyncFailed(ctx, Excel.ErrorCodes.conflict);
		});
	}
	export function test_GeneralRuntime_demo$filterStudentGrades$setup_cvt_JScript_V17() {
		return Excel.run((context) => {
			let worksheet = context.workbook.worksheets.getActiveWorksheet();
			let usedRange = worksheet.getUsedRange();
			usedRange.columnHidden = false;
			usedRange.rowHidden = false;
			usedRange.clear(Excel.ClearApplyTo.all);
			let values = [
				["Name", "Math", "English", "Physics", "Chemistry", "History"],
				["Tom", 80, 90, 60, 80, 86],
				["Mark", 90, 96, 87, 100, 90],
				["Jim", 95, 86, 87, 90, 100],
				["Sam", 79, 79, 97, 75, 90],
				["Mike", 100, 96, 90, 60, 85],
			];
			let range = worksheet.getCell(0, 0).getResizedRange(values.length - 1, values[0].length - 1);
			range.values = values;
			return context.sync();
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_GeneralRuntime_demo$filterStudentGrades$run_cvt_JScript_V17() {
		return Excel.run((context) => {
			
			let worksheet = context.workbook.worksheets.getActiveWorksheet();
			let matchingRow = 5; 
			
			var studentRowResult = worksheet.getCell(matchingRow - 1, 0).getEntireRow().getUsedRange().retrieve({ values: true });
			return context.sync()
				.then(() => {
					
					let cellB2AndOnward = worksheet.getUsedRange().getOffsetRange(1, 1).getResizedRange(-1, -1);
					cellB2AndOnward.rowHidden = true;
					cellB2AndOnward.columnHidden = true;
					studentRowResult.$proxy.rowHidden = false;
					for (let c = 1; c < studentRowResult.values[0].length; c++) {
						if (studentRowResult.values[0][c] < 80) {
							studentRowResult.$proxy.getColumn(c).columnHidden = false;
						}
					}
					studentRowResult.$proxy.getCell(0, 0).select();
					return context.sync();
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_GeneralRuntime_demo$filterStudentGrades$setupError_cvt_JScript_V17() {
		let seenError = false;
		Excel.run((context) => {
			let worksheet = context.workbook.worksheets.getActiveWorksheet();
			let usedRange = worksheet.getUsedRange();
			usedRange.columnHidden = false;
			usedRange.rowHidden = false;
			usedRange.clear(Excel.ClearApplyTo.all);
			let values = [
				["Name", "Math", "English", "Physics", "Chemistry", "History"],
				["Tom", 80, 90, 60, 80, 86],
				["Mark", 90, 96, 87, 100, 90],
				["Jim", 95, 86, 87, 90, 100],
				["Sam", 79, 79, 97, 75, 90],
				["Mike", 100, 96, 90, 60, 85],
			];
			
			
			let range = worksheet.getCell(0, 0).getResizedRange(values.length, values[0].length);
			range.values = values;
			let firstRow = range.getRow(0);
			firstRow.format.font.bold = true;
			return context.sync();
		})
		.catch((ex: OfficeExtension.Error) => {
			RichApiTest.log.comment("Exception:");
			RichApiTest.log.comment(JSON.stringify(ex, null, 4));
			Util.assertCompareValues(ex.debugInfo.errorLocation, "Range.values");
			Util.assertCompareValues(ex.debugInfo.statement, "resizedRange.values = [[\"Name\",\"Math\",\"English\",\"Physics\",\"Chemistry\",\"History\"],[\"Tom\",80,90,60,80,86],[\"Mark\",90,96,87,100,90],[\"Jim\",95,86,87,90,100],[\"Sam\",79,79,97,75,90],[\"Mike\",100,96,90,60,85]];");
			Util.assertCompareArray(ex.debugInfo.surroundingStatements,
				[
					"...",
					"cell.track();",
					"// Instantiate {cell}",
					"var resizedRange = cell.getResizedRange(6, 6);",
					"resizedRange.track();",
					"// Instantiate {resizedRange}",
					"// >>>>>",
					"resizedRange.values = [[\"Name\",\"Math\",\"English\",\"Physics\",\"Chemistry\",\"History\"],[\"Tom\",80,90,60,80,86],[\"Mark\",90,96,87,100,90],[\"Jim\",95,86,87,90,100],[\"Sam\",79,79,97,75,90],[\"Mike\",100,96,90,60,85]];",
					"// <<<<<",
					"var row = resizedRange.getRow(0);",
					"row.track();",
					"// Instantiate {row}",
					"var format = row.format;",
					"var font = format.font;",
					"..."
				]);
			seenError = true;
		})
		.then(() => {
			Util.assert(seenError, "Expect error");
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_GeneralRuntime_largeNumberOfRanges_cvt_JScript_V17() {
		var start = performance.now();
		var context = new Excel.RequestContext();
		var worksheet = context.workbook.worksheets.getItem("Sheet1");
		var rand = Math.ceil(Math.random() * 100);
		for (var row = 0; row < 25; row++) {
			for (var col = 0; col < 20; col++) {
				var range = worksheet.getCell(row, col);
				var v = (rand + row) * (col + rand);
				range.values = [[v]];
			}
		}
		context.sync()
			.then(() => {
				RichApiTest.log.comment("BeforeSyncDuration=" + ((context as any)._lastSyncStart - start) + " milliseconds");
				RichApiTest.log.comment("SyncDuration=" + ((context as any)._lastSyncEnd - (context as any)._lastSyncStart) + " milliseconds");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_GeneralRuntime_largeNumberOfRanges$parentChain_cvt_JScript_V17() {
		let start = performance.now();
		let context = new Excel.RequestContext();
		let worksheet = context.workbook.worksheets.getItem("Sheet1");
		let rand = Math.ceil(Math.random() * 1000);
		let cell = worksheet.getRange("A1:B2");
		let values = [[rand, rand + 1], ["Hello", "World"]];
		cell.values = values;
		cell = cell.getCell(0, 0);
		for (let i = 0; i < 1000; i++) {
			let previous = cell;
			cell = cell.getCell(0, 0);
			previous._ValidateArraySize(1, 1);
		}
		cell.load({ values: true });
		context.sync()
			.then(() => {
				RichApiTest.log.comment("Cell=" + JSON.stringify(cell));
				RichApiTest.log.comment("BeforeSyncDuration=" + ((context as any)._lastSyncStart - start) + " milliseconds");
				RichApiTest.log.comment("SyncDuration=" + ((context as any)._lastSyncEnd - (context as any)._lastSyncStart) + " milliseconds");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export async function test_GeneralRuntime_batch_cvt_JScript_V18() {
		await Excel.runBatch(async (batch) => {
			var values = [["Hello", "World"], [101, 201]];
			await batch((workbook) => {
				var range = workbook.worksheets.getItem("Sheet1").getRange("A1:B2");
				range.values = values;
			});
			let result = await batch((workbook) => {
				var range = workbook.worksheets.getItem("Sheet1").getRange("A1:B2");
				return range.retrieve({values: true, address: true});
			});
			RichApiTest.log.comment(JSON.stringify(result));
			RichApiTest.Util.assertCompareArray(result.values, values);
			await batch((workbook) => {
				var range = workbook.worksheets.getItem("Sheet1").getRange("A1:B2");
				range.values = values.reverse();
			});
		});
	}
}
?
module ExcelTest {
	export function test_IvyChart_Count_cvt_JScript_V11() {
		var SHEETNAME = "IvyCharts";
		var COUNT = 2;
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, SHEETNAME, () => {
			var sheet = ctx.workbook.worksheets.getItem(SHEETNAME);
			ctx.load(sheet.charts);
			ctx.sync().then(() => {
				var success = Util.compare(sheet.charts.count, COUNT);
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_IvyChart_MoveAndResize_cvt_JScript_V11() {
		var SHEETNAME = "IvyCharts";
		
		
		
		var TOP = 100,
			LEFT = 150,
			WIDTH = 300,
			HEIGHT = 200;
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, SHEETNAME, () => {
			var chart = ctx.workbook.worksheets.getItem(SHEETNAME).charts.getItemAt(0);
			chart.top = TOP;
			chart.left = LEFT;
			chart.width = WIDTH;
			chart.height = HEIGHT;
			ctx.load(chart, "top, left, width, height");
			ctx.sync().then(() => {
				var success = true;
				if (Math.round(chart.top) != TOP) {
					RichApiTest.log.fail("Chart top position was set to :'" + chart.top + "'. Expected :'" + TOP + "'.");
					success = false;
				}
				if (Math.round(chart.left) != LEFT) {
					RichApiTest.log.fail("Chart left position was set to :'" + chart.left + "'. Expected :'" + LEFT + "'.");
					success = false;
				}
				if (Math.round(chart.height) != HEIGHT) {
					RichApiTest.log.fail("Chart height was set to :'" + chart.height + "'. Expected :'" + HEIGHT + "'.");
					success = false;
				}
				if (Math.round(chart.width) != WIDTH) {
					RichApiTest.log.fail("Chart top position was set to :'" + chart.width + "'. Expected :'" + WIDTH + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_IvyChart_ChangeName_cvt_JScript_V11() {
		var SHEETNAME = "IvyCharts";
		
		var NAME = "Super Awesome Chart 9001 Pro";
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, SHEETNAME, () => {
			var chart = ctx.workbook.worksheets.getItem(SHEETNAME).charts.getItemAt(0);
			chart.name = NAME;
			ctx.sync().then(() => {
				var reloadedChart = ctx.workbook.worksheets.getItem(SHEETNAME).charts.getItem(NAME);
				ctx.load(reloadedChart, "name");
				ctx.sync().then(() => {
					var success = true;
					if (reloadedChart.name != NAME) {
						RichApiTest.log.fail("Chart name position was set to :'" + chart.name + "'. Expected :'" + NAME + "'.");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_IvyChart_Deletion_cvt_JScript_V11() {
		var SHEETNAME = "IvyCharts";
		
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, SHEETNAME, () => {
			var sheet = ctx.workbook.worksheets.getItem(SHEETNAME);
			var chart = ctx.workbook.worksheets.getItem(SHEETNAME).charts.getItemAt(1);
			ctx.load(chart, "name");
			ctx.sync().then(() => {
				var name = chart.name;
				chart.delete();
				ctx.sync().then(() => {
					var shouldntExist = sheet.charts.getItem(name);
					ctx.sync().then(() => {
						RichApiTest.log.fail("Chart with name: '" + name + "' shoudn't exist");
						RichApiTest.log.done(false);
					}, () => {
						RichApiTest.log.done(true);
					});
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_IvyChart_NoNavigationProperty_cvt_JScript_V11() {
		var SHEETNAME = "IvyCharts";
		
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, SHEETNAME, () => {
			var chart = ctx.workbook.worksheets.getItem(SHEETNAME).charts.getItemAt(0);
			var title = chart.title;
			
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.unsupportedOperation);
		});
	}
}
?module ExcelTest {
	export function test_NamedItem_RangeType_bvt_JScript_V11() {
		var namedItemName = "RangeRef";
		var rangeAddress = "NamedItems!$D$3";
		var ctx = new Excel.RequestContext();
		var namedItem = ctx.workbook.names.getItem(namedItemName);
		ctx.load(namedItem);
		ctx.sync().then(function () {
			var success = true;
			RichApiTest.log.comment("Name='" + namedItem.name + "', Value='" + namedItem.value + "'");
			if (namedItem.value != rangeAddress) {
				RichApiTest.log.comment("Value is not " + rangeAddress);
				success = false;
			}
			RichApiTest.log.comment("namedItem.type='" + namedItem.type + "', namedItem.visible='" + namedItem.visible + "'");
			RichApiTest.log.done(success);
		}, reportError);
	}
	export function test_NamedItem_NotExists_cvt_JScript_V11() {
		var namedItemName = "RangeRefNotExists";
		var ctx = new Excel.RequestContext();
		var namedItem = ctx.workbook.names.getItem(namedItemName);
		ctx.load(namedItem);
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
	}
	export function test_NamedItem_Iterator_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext();
		var names = ctx.workbook.names;
		ctx.load(names);
		ctx.sync().then(function () {
			var success = true;
			for (var i = 0; i < names.items.length; i++) {
				RichApiTest.log.comment("Name='" + names.items[i].name + "', Value='" + names.items[i].value + "'");
			}
			
			RichApiTest.log.done(success);
		}, reportError);
	}
	export function test_NamedItem_SingleValueArray_cvt_JScript_V14() {
		var namedItemName = "SingleValArrayItem";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				name = ctx.workbook.names.add(namedItemName, "=ROW(NamedItems!$9:$9)");
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.getItem(namedItemName);
					name.load();
				})
				.then(ctx.sync)
				.then(() => {
					Util.assertCompareValues(9, name.value);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_Count$WorkbookScope_cvt_JScript_V14() {
		_injectCollectionCountTest_JS((ctx) => ctx.workbook.names)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_Count$LocalScope_cvt_JScript_V14() {
		_injectCollectionCountTest_JS((ctx) => ctx.workbook.worksheets.getItem("NamedItems").names)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_GetItemOrNull_cvt_JScript_V14() {
		var namedItemName = "RangeRef";
		Excel.run((ctx) => {
			var namedItemExist = ctx.workbook.names.getItemOrNullObject(namedItemName);
			var namedItemNotExist = ctx.workbook.names.getItemOrNullObject("Non-existing-nameditem");
			return ctx.sync()
				.then(() => {
					Util.assert(!namedItemExist.isNull, "Expect isNull false");
					Util.assert(namedItemNotExist.isNull, "Expect isNull true");
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddFormulaEqual_cvt_JScript_V14() {
		var namedItemName = "foobarname";
		var rangeAddress = "=NamedItems!$D$3";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				ctx.workbook.names.add(namedItemName, rangeAddress);
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.getItem(namedItemName);
					name.load();
				}).then(ctx.sync)
				.then(() => {
					Util.assertCompareValues(namedItemName, name.name);
					Util.assertCompareValues(Excel.NamedItemType.range, name.type);
					Util.assertCompareValues(rangeAddress.substr(1), name.value);
					Util.assertCompareValues(Excel.NamedItemScope.workbook, name.scope);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddRange_cvt_JScript_V14() {
		var namedItemName = "foobarname";
		var expectedValue = "NamedItems!$D$3"; 
		var name: Excel.NamedItem;
		var range: Excel.Range;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				range = ctx.workbook.worksheets.getItem("NamedItems").getRange("D3");
				ctx.workbook.names.add(namedItemName, range);
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.getItem(namedItemName);
					name.load();
				}).then(ctx.sync)
				.then(() => {
					Util.assertCompareValues(namedItemName, name.name);
					Util.assertCompareValues(Excel.NamedItemType.range, name.type);
					Util.assertCompareValues(expectedValue, name.value);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddFormulaNoEqual_cvt_JScript_V14() {
		var namedItemName = "foobarname";
		var rangeAddress = "NamedItems!D3";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				ctx.workbook.names.add(namedItemName, rangeAddress);
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.getItem(namedItemName);
					name.load();
				}).then(ctx.sync)
				.then(() => {
					Util.assertCompareValues(namedItemName, name.name);
					Util.assertCompareValues(Excel.NamedItemType.string, name.type);
					Util.assertCompareValues(rangeAddress, name.value); 
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddNumber_cvt_JScript_V14() {
		var namedItemName = "foobarname";
		var rangeAddress = "4";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				ctx.workbook.names.add(namedItemName, rangeAddress);
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.getItem(namedItemName);
					name.load();
				}).then(ctx.sync)
				.then(() => {
					Util.assertCompareValues(namedItemName, name.name);
					Util.assertCompareValues(Excel.NamedItemType.double, name.type);
					Util.assertCompareValues(4, name.value);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddBool_cvt_JScript_V14() {
		var namedItemName = "foobarname";
		var rangeAddress = "=TRUE";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				ctx.workbook.names.add(namedItemName, rangeAddress);
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.getItem(namedItemName);
					name.load();
				}).then(ctx.sync)
				.then(() => {
					Util.assertCompareValues(namedItemName, name.name);
					Util.assertCompareValues(Excel.NamedItemType.boolean, name.type);
					Util.assertCompareValues(true, name.value); 
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddFormulaComplex_cvt_JScript_V14() {
		var namedItemName = "foobarname";
		var rangeAddress = "=NamedItems!$D$3+NamedItems!$D$4";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				ctx.workbook.names.add(namedItemName, rangeAddress);
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.getItem(namedItemName);
					name.load();
				}).then(ctx.sync)
				.then(() => {
					Util.assertCompareValues(namedItemName, name.name);
					Util.assertCompareValues(Excel.NamedItemType.double, name.type);
					Util.assertCompareValues(3, name.value); 
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddInvalidFormula_cvt_JScript_V14() {
		
		var namedItemName = "foobarname";
		var rangeAddress = "=garbage";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				ctx.workbook.names.add(namedItemName, rangeAddress);
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.getItem(namedItemName);
					name.load();
				}).then(ctx.sync)
				.then(() => {
					Util.assertCompareValues(namedItemName, name.name);
					Util.assertCompareValues(Excel.NamedItemType.error, name.type);
					Util.assertCompareValues("#NAME?", name.value); 
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AlreadyExist_cvt_JScript_V14() {
		var namedItemName = "foobarname";
		var rangeAddress = "=NamedItems!$D$3";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				var name = ctx.workbook.names.add(namedItemName, rangeAddress);
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.add(namedItemName, rangeAddress);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemAlreadyExists);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_CommentEmpty_cvt_JScript_V14() {
		var namedItemName = "foobarname";
		var rangeAddress = "=NamedItems!$D$3";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				var name = ctx.workbook.names.add(namedItemName, rangeAddress);
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.getItem(namedItemName);
					name.load("Comment");
				}).then(ctx.sync)
				.then(() => {
					Util.assertCompareValues("", name.comment);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_SetComment_cvt_JScript_V14() {
		var namedItemName = "foobarname";
		var rangeAddress = "=NamedItems!$D$3";
		var comment = "foo bar comment";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				var name = ctx.workbook.names.add(namedItemName, rangeAddress);
				name.comment = comment;
			})
				.then(ctx.sync)
				.then(() => {
					name = ctx.workbook.names.getItem(namedItemName);
					name.load("Comment");
				}).then(ctx.sync)
				.then(() => {
					Util.assertCompareValues(comment, name.comment);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_WorksheetAddNew_cvt_JScript_V14() {
		var namedItemName = "sheetScoped";
		var rangeAddress = "=NamedItems!$D$3";
		var sheetName = "NamedItems";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			return Util.deleteNameIfExistOnWorksheet(ctx, worksheet, namedItemName).then(() => {
				name = worksheet.names.add(namedItemName, rangeAddress);
			}).then(ctx.sync)
				.then(() => {
					name = worksheet.names.getItem(namedItemName);
					name.load();
				}).then(ctx.sync)
				.then(() => {
					Util.assertCompareValues(namedItemName, name.name);
					Util.assertCompareValues(Excel.NamedItemType.range, name.type);
					Util.assertCompareValues(rangeAddress.substr(1), name.value);
					Util.assertCompareValues(Excel.NamedItemScope.worksheet, name.scope);
				}).then(() => {
					name = ctx.workbook.names.getItemOrNullObject(namedItemName);
				}).then(ctx.sync)
				.then(() => {
					Util.assert(name.isNull, "Sheet Scoped name shouldn't exist on the workbook");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_WorksheetAddExisting_cvt_JScript_V14() {
		var namedItemName = "sheetScoped";
		var rangeAddress = "=NamedItems!$D$3";
		var sheetName = "NamedItems";
		var name: Excel.NamedItem;
		Excel.run((ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			return Util.deleteNameIfExistOnWorksheet(ctx, worksheet, namedItemName).then(() => {
				name = worksheet.names.add(namedItemName, rangeAddress);
			})
				.then(ctx.sync)
				.then(() => {
					name = worksheet.names.add(namedItemName, rangeAddress);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemAlreadyExists);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddRecalc_cvt_JScript_V14() {
		var namedItemName = "testNamedItem";
		var referenceString = "4";
		var name: Excel.NamedItem;
		var range: Excel.Range;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				range = ctx.workbook.worksheets.getItem("NamedItems").getRange("A1");
				range.values = [["=testNamedItem"]];
				range.load("values");
			})
				.then(ctx.sync)
				.then(() => {
					console.log("Current range value :'" + JSON.stringify(range.values) + "'");
					name = ctx.workbook.names.add(namedItemName, referenceString);
					range.load("values");
				})
				.then(ctx.sync)
				.then(() => {
					console.log("After adding named item, value is :'" + JSON.stringify(range.values) + "'");
					Util.assertCompareValues(4, range.values[0][0]);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_DeleteRecalc_cvt_JScript_V14() {
		var namedItemName = "testNamedItem";
		var referenceString = "4";
		var name: Excel.NamedItem;
		var range: Excel.Range;
		Excel.run((ctx) => {
			return Util.deleteNameIfExist(ctx, namedItemName).then(() => {
				range = ctx.workbook.worksheets.getItem("NamedItems").getRange("A1");
				range.values = [["=testNamedItem"]];
				range.load("values");
			})
				.then(ctx.sync)
				.then(() => {
					console.log("Current range value :'" + JSON.stringify(range.values) + "'");
					name = ctx.workbook.names.add(namedItemName, referenceString);
					range.load("values");
				})
				.then(ctx.sync)
				.then(() => {
					console.log("After adding named item, value is :'" + JSON.stringify(range.values) + "'");
					name.delete();
					range.load("values");
				})
				.then(ctx.sync)
				.then(() => {
					console.log("After removing named item, value is :'" + JSON.stringify(range.values) + "'");
					Util.assertCompareValues("#NAME?", range.values[0][0]);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_ArrayValuesRangeRef_bvt_JScript_V17() {
		Excel.run(function (ctx: Excel.RequestContext) {
			var namedItemName = "RangeRef2";
			var arrayValues;
			var namedItem = ctx.workbook.names.getItem(namedItemName);
			ctx.load(namedItem);
			return ctx.sync()
			.then(function () {
				RichApiTest.log.comment("Formula='" + namedItem.formula + "'");
				Util.assertCompareValues('=NamedItems!$D$3:$D$4', namedItem.formula, "Formula");
				arrayValues = namedItem.arrayValues;
				ctx.load(arrayValues);
				return ctx.sync();
			})
			.then(function () {
				RichApiTest.log.comment("arrayValues.values='" + JSON.stringify(arrayValues.values) + "'");
				RichApiTest.log.comment("arrayValues.types='" + JSON.stringify(arrayValues.types) + "'");
				
				Util.assertCompareArray(arrayValues.values, [[1], [2]]);
				
				Util.assertCompareArray(arrayValues.types, [["Double"], ["Double"]]);
			})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_ArrayValuesIntRef_bvt_JScript_V17() {
		Excel.run(function (ctx: Excel.RequestContext) {
			var namedItemName = "IntRef";
			var arrayValues;
			var namedItem = ctx.workbook.names.getItem(namedItemName);
			ctx.load(namedItem);
			return ctx.sync()
			.then(function () {
				RichApiTest.log.comment("Formula='" + namedItem.formula + "'");
				Util.assertCompareValues('=1234', namedItem.formula, "Formula");
				arrayValues = namedItem.arrayValues;
				ctx.load(arrayValues);
				return ctx.sync();
			})
			.then(function () {
				RichApiTest.log.comment("arrayValues.values='" + JSON.stringify(arrayValues.values) + "'");
				RichApiTest.log.comment("arrayValues.types='" + JSON.stringify(arrayValues.types) + "'");
				
				Util.assertCompareArray(arrayValues.values, [[1234]]);
				
				Util.assertCompareArray(arrayValues.types, [["Double"]]);
			})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_ArrayValuesArrayRef_bvt_JScript_V17() {
		Excel.run(function (ctx: Excel.RequestContext) {
			var namedItemName = "ArrayRef";
			var arrayValues;
			var namedItem = ctx.workbook.names.getItem(namedItemName);
			ctx.load(namedItem);
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment("Value='" + namedItem.value + "'");
					RichApiTest.log.comment("Type='" + namedItem.type + "'");
					RichApiTest.log.comment("Formula='" + namedItem.formula + "'");
					arrayValues = namedItem.arrayValues;
					ctx.load(arrayValues);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment("arrayValues.values='" + JSON.stringify(arrayValues.values) + "'");
					RichApiTest.log.comment("arrayValues.types='" + JSON.stringify(arrayValues.types) + "'");
					
					ExcelTest.Util.assertCompareArray(arrayValues.values, [["x", 1, 2], ["y", 3, 4]]);
					
					ExcelTest.Util.assertCompareArray(arrayValues.types, [["String", "Double", "Double"], ["String", "Double", "Double"]]);
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_PutFormula_unstable_JScript_V17() {
		Excel.run(function (ctx: Excel.RequestContext) {
			var namedItemName = "TestChangingFormula";
			var commentString = "Named Item TestChangingFormula";
			var oldFormula = "=1234";
			var newFormula = "={11,22,33}";
			var namedItem;
			var arrayValues;
			Util.deleteNameIfExist(ctx, namedItemName)
			namedItem = ctx.workbook.names.add(namedItemName, oldFormula);
			namedItem.comment = commentString;
			return ctx.sync()
				.then(function () {
					namedItem = ctx.workbook.names.getItem(namedItemName);
					ctx.load(namedItem);
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment("Old Formula='" + namedItem.formula + "'");
					Util.assertCompareValues(oldFormula, namedItem.formula, "Old Formula");
					namedItem.formula = newFormula;
					arrayValues = namedItem.arrayValues;
					ctx.load(arrayValues);
					namedItem = ctx.workbook.names.getItem(namedItemName);
					ctx.load(namedItem);
					namedItem.load("Comment");
					return ctx.sync();
				})
				.then(function () {
					RichApiTest.log.comment("Comment ='" + namedItem.comment + "'");
					Util.assertCompareValues(commentString, namedItem.comment, "Comment");
					RichApiTest.log.comment("New Formula='" + namedItem.formula + "'");
					Util.assertCompareValues(newFormula, namedItem.formula, "New Formula");
					RichApiTest.log.comment("arrayValues.values='" + JSON.stringify(arrayValues.values) + "'");
					RichApiTest.log.comment("arrayValues.types='" + JSON.stringify(arrayValues.types) + "'");
					
					Util.assertCompareArray(arrayValues.values, [[11, 22, 33]]);
					
					Util.assertCompareArray(arrayValues.types, [["Double", "Double", "Double"]]);
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export async function test_PageLayout_SetAndGetPageOrientationValue$AsyncAwait_cvt_JScript_V17() {
		var sheetName = "PageLayout";
		await Excel.run(async (ctx) => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName).pageLayout.load();
			await ctx.sync();
			const enumValues = Object.keys(Excel.PageOrientation);
			for (let item in enumValues) {
				if (!isNaN(Number(item))) {
					sheet.orientation = Excel.PageOrientation[enumValues[Number(item)]];
					sheet = ctx.workbook.worksheets.getItem(sheetName).pageLayout.load();
					await ctx.sync();
					Util.assertCompareValues(Excel.PageOrientation[enumValues[Number(item)]], sheet.orientation);
				}
			}
		});
	}
	export async function test_PageLayout_SetAndGetPaperSize$AsyncAwait_cvt_JScript_V17() {
		var sheetName = "PageLayout";
		await Excel.run(async (ctx) => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName).pageLayout.load();
			await ctx.sync();
			const enumValues = Object.keys(Excel.PaperType);
			for (let item in enumValues) {
				if (!isNaN(Number(item))) {
					sheet.paperSize = Excel.PaperType[enumValues[Number(item)]];
					sheet = ctx.workbook.worksheets.getItem(sheetName).pageLayout.load();
					await ctx.sync();
					Util.assertCompareValues(Excel.PaperType[enumValues[Number(item)]], sheet.paperSize);
				}
			}
		});
	}
	export async function test_PageLayout_SetAndGetBlackAndWhite$AsyncAwait_cvt_JScript_V17() {
		var sheetName = "PageLayout";
		await Excel.run(async (ctx) => {
			
			var sheet = ctx.workbook.worksheets.getItem(sheetName).pageLayout.load();
			await ctx.sync();
			sheet.blackAndWhite = true;
			sheet = ctx.workbook.worksheets.getItem(sheetName).pageLayout.load();
			await ctx.sync();
			Util.assertCompareValues(true, sheet.blackAndWhite);
			
			sheet.blackAndWhite = false;
			sheet = ctx.workbook.worksheets.getItem(sheetName).pageLayout.load();
			await ctx.sync();
			Util.assertCompareValues(false, sheet.blackAndWhite);
		});
	}
	export async function test_PageLayout_SetAndGetPrintErrors$AsyncAwait_cvt_JScript_V17() {
		var sheetName = "PageLayout";
		await Excel.run(async (ctx) => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName).pageLayout.load();
			await ctx.sync();
			const enumValues = Object.keys(Excel.PrintErrorType);
			for (let item in enumValues)
			{
				if (!isNaN(Number(item))) {
					sheet.printErrors = Excel.PrintErrorType[enumValues[Number(item)]];
					sheet = ctx.workbook.worksheets.getItem(sheetName).pageLayout.load();
					await ctx.sync();
					Util.assertCompareValues(Excel.PrintErrorType[enumValues[Number(item)]], sheet.printErrors);
				}
			}
		});
	}
}
?module ExcelTest {
	export function test_Protection_SetRangeLockTrue_cvt_JScript_V12() {
		var sheetName = "protection";
		var rangeAddress = "A1:A2";
		var expectedLockStatus = true;
		var ctx = new Excel.RequestContext();
		var protection = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.protection;
		protection.locked = expectedLockStatus;
		ctx.sync().then(function () {
			var protection2 = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.protection;
			ctx.load(protection2);
			return protection2;
		})
			.then(ctx.sync).then(function (protection2) {
				RichApiTest.log.comment("range.format.protection.lock='" + protection2.locked + "'");
				if (protection2.locked != expectedLockStatus) {
					throw new Error("lock status is not expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_SetRangeLockFalse_cvt_JScript_V12() {
		var sheetName = "protection";
		var rangeAddress = "A1:A2";
		var expectedLockStatus = false;
		var ctx = new Excel.RequestContext();
		var protection = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.protection;
		protection.locked = expectedLockStatus;
		ctx.sync().then(function () {
			var protection2 = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.protection;
			ctx.load(protection2);
			return protection2;
		})
			.then(ctx.sync).then(function (protection2) {
				RichApiTest.log.comment("range.format.protection.lock='" + protection2.locked + "'");
				if (protection2.locked != expectedLockStatus) {
					throw new Error("lock status is not expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_SetRangeLockForSubset_cvt_JScript_V12() {
		var sheetName = "protection";
		var rangeAddress = "A1:D5";
		var rangeAddressSubset = "B2:C3";
		var expectedLockStatus = null;
		var rangeValuesToSet = [["foo", "bar"], ["1", "2"]];
		var ctx = new Excel.RequestContext();
		
		Util.clearSheetBefore(sheetName, () => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			sheet.getRange(rangeAddress).format.protection.locked = true;
			sheet.getRange(rangeAddressSubset).format.protection.locked = false;
			sheet.protection.protect(null );
			ctx.sync().then(function () {
				var protection2 = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.protection;
				ctx.load(protection2);
				return ctx.sync(protection2);
			})
				.then(function (protectionstatus: Excel.FormatProtection) {
					Util.assertCompareValues(expectedLockStatus, protectionstatus.locked, "ProtectionStatus.locked");
					var rangeToSet = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddressSubset);
					rangeToSet.values = rangeValuesToSet;
					ctx.load(rangeToSet);
					return ctx.sync(rangeToSet);
				})
				.then(function (range: Excel.Range) {
					Util.assertCompareArray(range.values, rangeValuesToSet);
					sheet.protection.unprotect();
					return ctx.sync();
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Protection_UnunifiedRangeLock_cvt_JScript_V12() {
		var sheetName = "protection";
		var range1 = "B1:C1";
		var range2 = "B2:C2";
		var range3 = "B1:C2";
		var ctx = new Excel.RequestContext();
		var protection1 = ctx.workbook.worksheets.getItem(sheetName).getRange(range1).format.protection;
		protection1.locked = true;
		var protection2 = ctx.workbook.worksheets.getItem(sheetName).getRange(range2).format.protection;
		protection2.locked = false;
		ctx.sync().then(function () {
			var protection3 = ctx.workbook.worksheets.getItem(sheetName).getRange(range3).format.protection;
			ctx.load(protection3);
			return protection3;
		})
		.then(ctx.sync).then(function (protection3) {
			RichApiTest.log.comment("range.format.protection.lock='" + protection3.locked + "'");
			if (protection3.locked != null) {
				throw new Error("lock status is not expected");
			}
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Protection_SetRangeFormulaHiddenTrue_cvt_JScript_V12() {
		var sheetName = "protection";
		var rangeAddress = "A1:A2";
		var expectedHiddenStatus = true;
		var ctx = new Excel.RequestContext();
		var protection = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.protection;
		protection.formulaHidden = expectedHiddenStatus;
		ctx.sync().then(function () {
			var protection2 = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.protection;
			ctx.load(protection2);
			return protection2;
		})
			.then(ctx.sync).then(function (protection2) {
				RichApiTest.log.comment("range.format.protection.formulaHidden ='" + protection2.formulaHidden + "'");
				if (protection2.formulaHidden != expectedHiddenStatus) {
					throw new Error("formulaHidden status is not expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_SetRangeFormulaHiddenFalse_cvt_JScript_V12() {
		var sheetName = "protection";
		var rangeAddress = "A1:A2";
		var expectedHiddenStatus = false;
		var ctx = new Excel.RequestContext();
		var protection = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.protection;
		protection.formulaHidden = expectedHiddenStatus;
		ctx.sync().then(function () {
			var protection2 = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.protection;
			ctx.load(protection2);
			return protection2;
		})
			.then(ctx.sync).then(function (protection2) {
				RichApiTest.log.comment("range.format.protection.formulaHidden ='" + protection2.formulaHidden + "'");
				if (protection2.formulaHidden != expectedHiddenStatus) {
					throw new Error("formulaHidden status is not expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_UnunifiedRangeFormulaHidden_cvt_JScript_V12() {
		var sheetName = "protection";
		var range1 = "B1:C1";
		var range2 = "B2:C2";
		var range3 = "B1:C2";
		var ctx = new Excel.RequestContext();
		var protection1 = ctx.workbook.worksheets.getItem(sheetName).getRange(range1).format.protection;
		protection1.formulaHidden = true;
		var protection2 = ctx.workbook.worksheets.getItem(sheetName).getRange(range2).format.protection;
		protection2.formulaHidden = false;
		ctx.sync().then(function () {
			var protection3 = ctx.workbook.worksheets.getItem(sheetName).getRange(range3).format.protection;
			ctx.load(protection3);
			return protection3;
		})
			.then(ctx.sync).then(function (protection3) {
				RichApiTest.log.comment("range.format.protection.formulaHidden='" + protection3.formulaHidden + "'");
				if (protection3.formulaHidden != null) {
					throw new Error("formula hidden status is not expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_ProtectSheetNoPassword_cvt_JScript_V12() {
		var sheetName = "Protection";
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem(sheetName);
		sheet.protection.protect(null);
		ctx.sync().then(function () {
			var protection = ctx.workbook.worksheets.getItem(sheetName).protection;
			ctx.load(protection);
			return protection;
		})
			.then(ctx.sync).then(function (protection) {
				RichApiTest.log.comment("sheet.protection.protected='" + protection.protected + "'");
				if (protection.protected != true) {
					throw new Error("protect: sheet protection status is not expected");
				}
				protection.unprotect();
			})
			.then(ctx.sync).then(function () {
				var protection2 = ctx.workbook.worksheets.getItem(sheetName).protection;
				ctx.load(protection2);
				return protection2;
			})
			.then(ctx.sync).then(function (protection2) {
				RichApiTest.log.comment("sheet.protection.protected='" + protection2.protected + "'");
				if (protection2.protected != false) {
					throw new Error("unprotect: sheet protection status is not expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_ProtectSheetWithPassword_cvt_JScript_V17() {
		var sheetName = "Protection";
		var password = "P@ssw0rd"
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem(sheetName);
		sheet.protection.protect(null, password);
		ctx.sync().then(function () {
			var protection = ctx.workbook.worksheets.getItem(sheetName).protection;
			ctx.load(protection);
			return protection;
		})
			.then(ctx.sync).then(function (protection) {
				RichApiTest.log.comment("sheet.protection.protected='" + protection.protected + "'");
				if (protection.protected != true) {
					throw new Error("protect: sheet protection status is not expected");
				}
				protection.unprotect(password);
			})
			.then(ctx.sync).then(function () {
				var protection2 = ctx.workbook.worksheets.getItem(sheetName).protection;
				ctx.load(protection2);
				return protection2;
			})
			.then(ctx.sync).then(function (protection2) {
				RichApiTest.log.comment("sheet.protection.protected='" + protection2.protected + "'");
				if (protection2.protected != false) {
					throw new Error("unprotect: sheet protection status is not expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_SetProtectionOptionsTrueNoPassword_cvt_JScript_V12() {
		var sheetName = "Protection";
		var allowed = true;
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem(sheetName);
		sheet.protection.protect({
			allowAutoFilter: allowed,
			allowDeleteColumns: allowed,
			allowDeleteRows: allowed,
			allowFormatCells: allowed,
			allowFormatColumns: allowed,
			allowFormatRows: allowed,
			allowInsertColumns: allowed,
			allowInsertHyperlinks: allowed,
			allowInsertRows: allowed,
			allowPivotTables: allowed,
			allowSort: allowed
		});
		ctx.sync().then(function () {
			var protection = ctx.workbook.worksheets.getItem(sheetName).protection;
			ctx.load(protection);
			return protection;
		})
			.then(ctx.sync).then(function (protection) {
				RichApiTest.log.comment("sheet.protection.options.allowFormatCells='" + protection.options.allowFormatCells + "'");
				RichApiTest.log.comment("sheet.protection.options.allowFormatColumns='" + protection.options.allowFormatColumns + "'");
				RichApiTest.log.comment("sheet.protection.options.allowFormatRows='" + protection.options.allowFormatRows + "'");
				RichApiTest.log.comment("sheet.protection.options.allowInsertColumns='" + protection.options.allowInsertColumns + "'");
				RichApiTest.log.comment("sheet.protection.options.allowInsertRows='" + protection.options.allowInsertRows + "'");
				RichApiTest.log.comment("sheet.protection.options.allowInsertHyperlinks='" + protection.options.allowInsertHyperlinks + "'");
				RichApiTest.log.comment("sheet.protection.options.allowDeleteColumns='" + protection.options.allowDeleteColumns + "'");
				RichApiTest.log.comment("sheet.protection.options.allowDeleteRows='" + protection.options.allowDeleteRows + "'");
				RichApiTest.log.comment("sheet.protection.options.allowSort='" + protection.options.allowSort + "'");
				RichApiTest.log.comment("sheet.protection.options.allowAutoFilter='" + protection.options.allowAutoFilter + "'");
				RichApiTest.log.comment("sheet.protection.options.allowPivotTables='" + protection.options.allowPivotTables + "'");
				if (protection.options.allowAutoFilter != allowed) {
					throw new Error("allowAutoFilter protection option status is not expected");
				}
				if (protection.options.allowDeleteColumns != allowed) {
					throw new Error("allowDeleteColumns protection option status is not expected");
				}
				if (protection.options.allowDeleteRows != allowed) {
					throw new Error("allowDeleteRows protection option status is not expected");
				}
				if (protection.options.allowFormatCells != allowed) {
					throw new Error("allowFormatCells protection option status is not expected");
				}
				if (protection.options.allowFormatColumns != allowed) {
					throw new Error("allowFormatColumns protection option status is not expected");
				}
				if (protection.options.allowFormatRows != allowed) {
					throw new Error("allowFormatRows protection option status is not expected");
				}
				if (protection.options.allowInsertColumns != allowed) {
					throw new Error("allowInsertColumns protection option status is not expected");
				}
				if (protection.options.allowInsertHyperlinks != allowed) {
					throw new Error("allowInsertHyperlinks protection option status is not expected");
				}
				if (protection.options.allowInsertRows != allowed) {
					throw new Error("allowInsertRows protection option status is not expected");
				}
				if (protection.options.allowPivotTables != allowed) {
					throw new Error("allowPivotTables protection option status is not expected");
				}
				if (protection.options.allowSort != allowed) {
					throw new Error("allowSort protection option status is not expected");
				}
				protection.unprotect();
			})
			.then(ctx.sync)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_SetProtectionOptionsTrueNoPassword_cvt_JScript_V17() {
		var sheetName = "Protection";
		var allowed = true;
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem(sheetName);
		sheet.protection.protect({
			selectionMode: Excel.ProtectionSelectionMode.unlocked,
			allowEditObjects: allowed,
			allowEditScenarios: allowed
		});
		ctx.sync().then(function () {
			var protection = ctx.workbook.worksheets.getItem(sheetName).protection;
			ctx.load(protection);
			return protection;
		})
			.then(ctx.sync).then(function (protection) {
				RichApiTest.log.comment("sheet.protection.options.selectionMode='" + protection.options.selectionMode + "'");
				RichApiTest.log.comment("sheet.protection.options.allowEditObjects='" + protection.options.allowEditObjects + "'");
				RichApiTest.log.comment("sheet.protection.options.allowEditScenarios='" + protection.options.allowEditScenarios + "'");
				if (protection.options.selectionMode != Excel.ProtectionSelectionMode.unlocked) {
					throw new Error("selectionMode protection option status is not expected");
				}
				if (protection.options.allowEditObjects != allowed) {
					throw new Error("allowEditObjects protection option status is not expected");
				}
				if (protection.options.allowEditScenarios != allowed) {
					throw new Error("allowEditScenarios protection option status is not expected");
				}
				protection.unprotect();
			})
			.then(ctx.sync)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_SetProtectionOptionsFalseNoPassword_cvt_JScript_V12() {
		var sheetName = "Protection";
		var allowed = false;
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem(sheetName);
		sheet.protection.protect({
			allowAutoFilter: allowed,
			allowDeleteColumns: allowed,
			allowDeleteRows: allowed,
			allowFormatCells: allowed,
			allowFormatColumns: allowed,
			allowFormatRows: allowed,
			allowInsertColumns: allowed,
			allowInsertHyperlinks: allowed,
			allowInsertRows: allowed,
			allowPivotTables: allowed,
			allowSort: allowed
		});
		ctx.sync().then(function () {
			var protection = ctx.workbook.worksheets.getItem(sheetName).protection;
			ctx.load(protection);
			return protection;
		})
			.then(ctx.sync).then(function (protection) {
				RichApiTest.log.comment("sheet.protection.options.allowFormatCells='" + protection.options.allowFormatCells + "'");
				RichApiTest.log.comment("sheet.protection.options.allowFormatColumns='" + protection.options.allowFormatColumns + "'");
				RichApiTest.log.comment("sheet.protection.options.allowFormatRows='" + protection.options.allowFormatRows + "'");
				RichApiTest.log.comment("sheet.protection.options.allowInsertColumns='" + protection.options.allowInsertColumns + "'");
				RichApiTest.log.comment("sheet.protection.options.allowInsertRows='" + protection.options.allowInsertRows + "'");
				RichApiTest.log.comment("sheet.protection.options.allowInsertHyperlinks='" + protection.options.allowInsertHyperlinks + "'");
				RichApiTest.log.comment("sheet.protection.options.allowDeleteColumns='" + protection.options.allowDeleteColumns + "'");
				RichApiTest.log.comment("sheet.protection.options.allowDeleteRows='" + protection.options.allowDeleteRows + "'");
				RichApiTest.log.comment("sheet.protection.options.allowSort='" + protection.options.allowSort + "'");
				RichApiTest.log.comment("sheet.protection.options.allowAutoFilter='" + protection.options.allowAutoFilter + "'");
				RichApiTest.log.comment("sheet.protection.options.allowPivotTables='" + protection.options.allowPivotTables + "'");
				if (protection.options.allowAutoFilter != allowed) {
					throw new Error("allowAutoFilter protection option status is not expected");
				}
				if (protection.options.allowDeleteColumns != allowed) {
					throw new Error("allowDeleteColumns protection option status is not expected");
				}
				if (protection.options.allowDeleteRows != allowed) {
					throw new Error("allowDeleteRows protection option status is not expected");
				}
				if (protection.options.allowFormatCells != allowed) {
					throw new Error("allowFormatCells protection option status is not expected");
				}
				if (protection.options.allowFormatColumns != allowed) {
					throw new Error("allowFormatColumns protection option status is not expected");
				}
				if (protection.options.allowFormatRows != allowed) {
					throw new Error("allowFormatRows protection option status is not expected");
				}
				if (protection.options.allowInsertColumns != allowed) {
					throw new Error("allowInsertColumns protection option status is not expected");
				}
				if (protection.options.allowInsertHyperlinks != allowed) {
					throw new Error("allowInsertHyperlinks protection option status is not expected");
				}
				if (protection.options.allowInsertRows != allowed) {
					throw new Error("allowInsertRows protection option status is not expected");
				}
				if (protection.options.allowPivotTables != allowed) {
					throw new Error("allowPivotTables protection option status is not expected");
				}
				if (protection.options.allowSort != allowed) {
					throw new Error("allowSort protection option status is not expected");
				}
				protection.unprotect();
			})
			.then(ctx.sync)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_SetProtectionOptionsFalseNoPassword_cvt_JScript_V17() {
		var sheetName = "Protection";
		var allowed = false;
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem(sheetName);
		sheet.protection.protect({
			selectionMode: Excel.ProtectionSelectionMode.none,
			allowEditObjects: allowed,
			allowEditScenarios: allowed
		});
		ctx.sync().then(function () {
			var protection = ctx.workbook.worksheets.getItem(sheetName).protection;
			ctx.load(protection);
			return protection;
		})
			.then(ctx.sync).then(function (protection) {
				RichApiTest.log.comment("sheet.protection.options.selectionMode='" + protection.options.selectionMode + "'");
				RichApiTest.log.comment("sheet.protection.options.allowEditObjects='" + protection.options.allowEditObjects + "'");
				RichApiTest.log.comment("sheet.protection.options.allowEditScenarios='" + protection.options.allowEditScenarios + "'");
				if (protection.options.selectionMode != Excel.ProtectionSelectionMode.none) {
					throw new Error("selectionMode protection option status is not expected");
				}
				if (protection.options.allowEditObjects != allowed) {
					throw new Error("allowEditObjects protection option status is not expected");
				}
				if (protection.options.allowEditScenarios != allowed) {
					throw new Error("allowEditScenarios protection option status is not expected");
				}
				protection.unprotect();
			})
			.then(ctx.sync)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export async function test_Protection_ProtectWorkbookNoPassword_cvt_JScript_V17() {
		await Excel.run(async(ctx) => {
			try {
				ctx.workbook.protection.protect();
				var protection = ctx.workbook.protection.load();
				await ctx.sync();
				RichApiTest.log.comment("workbook.protection.protected='" + protection.protected + "'");
				if(protection.protected != true) {
					throw new Error("protect: workbook protection status is not expected");
				}
				protection.unprotect();
				var protection = ctx.workbook.protection.load();
				await ctx.sync();
				RichApiTest.log.comment("workbook.protection.protected='" + protection.protected + "'");
				if(protection.protected != false) {
					throw new Error("unprotect: workbook protection status is not expected");
				}
			} finally {
				RichApiTest.log.comment("Cleaning up");
				ctx.workbook.protection.unprotect();
			}
		});
	}
	export async function test_Protection_ProtectWorkbookWithPassword_cvt_JScript_V17() {
		var password = "P@ssw0rd";
		await Excel.run(async(ctx) => {
			try {
				ctx.workbook.protection.protect(password);
				var protection = ctx.workbook.protection.load();
				await ctx.sync();
				RichApiTest.log.comment("workbook.protection.protected='" + protection.protected + "'");
				if(protection.protected != true) {
					throw new Error("protect: workbook protection status is not expected");
				}
				protection.unprotect(password);
				var protection = ctx.workbook.protection.load();
				await ctx.sync();
				RichApiTest.log.comment("workbook.protection.protected='" + protection.protected + "'");
				if(protection.protected != false) {
					throw new Error("unprotect: workbook protection status is not expected");
				}
			} finally {
				RichApiTest.log.comment("Cleaning up");
				ctx.workbook.protection.unprotect(password);
			}
		});
	}
	export async function test_Protection_UnprotectWorkbookWithWrongPassword_cvt_JScript_V17() {
		var password = "P@ssw0rd";
		var wrongPassword = "wrongpwd"
		await Excel.run(async(ctx) => {
			try {
				ctx.workbook.protection.protect(password);
				var protection = ctx.workbook.protection.load();
				await ctx.sync();
				RichApiTest.log.comment("workbook.protection.protected='" + protection.protected + "'");
				if(protection.protected != true) {
					throw new Error("protect: workbook protection status is not expected");
				}
				try {
					protection.unprotect(wrongPassword);
					await ctx.sync();
					throw new Error("Didn't receive expected error");
				} catch (error) {
					if (error.code == "InvalidArgument") {
						RichApiTest.log.comment("Received expected error: " + error.code + ":" + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				}
			} finally {
				RichApiTest.log.comment("Cleaning up");
				ctx.workbook.protection.unprotect(password);
			}
		});
	}
	export async function test_Protection_ProtectProtectedWorkbook_cvt_JScript_V17() {
		await Excel.run(async(ctx) => {
			try {
    			ctx.workbook.protection.protect();
				var protection = ctx.workbook.protection.load();
				await ctx.sync();
				RichApiTest.log.comment("workbook.protection.protected='" + protection.protected + "'");
				if(protection.protected != true) {
					throw new Error("protect: workbook protection status is not expected");
				}
				try {
					protection.protect();
					await ctx.sync();
					throw new Error("Didn't receive expected error");
				} catch (error) {
					if (error.code == "InvalidOperation") {
						RichApiTest.log.comment("Received expected error: " + error.code + ":" + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				}
			} finally {
				RichApiTest.log.comment("Cleaning up");
				ctx.workbook.protection.unprotect();
			}
		});
	}
	export async function test_Protection_UnprotectUnprotectedWorkbook_cvt_JScript_V17() {
		await Excel.run(async(ctx) => {
			try{
				ctx.workbook.protection.protect();
				var protection = ctx.workbook.protection.load();
				await ctx.sync();
				RichApiTest.log.comment("workbook.protection.protected='" + protection.protected + "'");
				if(protection.protected != true) {
					throw new Error("protect: workbook protection status is not expected");
				}
				protection.unprotect();
				var protection = ctx.workbook.protection.load();
				await ctx.sync();
				RichApiTest.log.comment("workbook.protection.protected='" + protection.protected + "'");
				if(protection.protected != false) {
					throw new Error("unprotect: workbook protection status is not expected");
				}
				protection.unprotect();
				var protection = ctx.workbook.protection.load();
				await ctx.sync();
				RichApiTest.log.comment("workbook.protection.protected='" + protection.protected + "'");
				if(protection.protected != false) {
					throw new Error("unprotect: workbook protection status is not expected");
				}
			} catch (error) {
				RichApiTest.log.comment("Cleaning up");
				ctx.workbook.protection.unprotect();
			}
		});
	}
}?module ExcelTest {
	export function test_RangeFormat_BasicTest_bvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "D5:F8";
		var bgcolor = "#FFFF00";
		var ctx = new Excel.RequestContext();
		var fill = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.fill;
		fill.color = bgcolor;
		ctx.sync().then(function () {
			var success = true;
			fill = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.fill;
			ctx.load(fill);
			ctx.sync().then(function () {
				RichApiTest.log.comment("range.format.fill.color='" + fill.color + "'");
				if (fill.color != bgcolor) {
					RichApiTest.log.comment("color is not " + bgcolor);
					success = false;
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_RangeFormat_ClearFill_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "H1:I2";
		var bgcolor = "#FFFF00";
		var expectedbgcolor = "#FFFFFF";
		var ctx = new Excel.RequestContext();
		var fill = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.fill;
		fill.color = bgcolor;
		ctx.sync().then(function () {
			ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.fill.clear();
			ctx.sync().then(function () {
				fill = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.fill;
				ctx.load(fill);
				ctx.sync().then(function () {
					var success = true;
					RichApiTest.log.comment("range.format.fill.color='" + fill.color + "'");
					if (fill.color != expectedbgcolor) {
						RichApiTest.log.comment("color is not " + expectedbgcolor);
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		}, ExcelTest.reportError);
	}
	export function test_RangeFormat_NamedColor_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "D5:F8";
		var bgcolorNamed = "DarkGrey";
		var bgcolorHex = "#A9A9A9";
		var ctx = new Excel.RequestContext();
		var fill = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.fill;
		fill.color = bgcolorNamed;
		ctx.sync().then(function () {
			var success = true;
			fill = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.fill;
			ctx.load(fill);
			ctx.sync().then(function () {
				RichApiTest.log.comment("range.format.fill.color='" + fill.color + "'");
				if (fill.color != bgcolorHex) {
					RichApiTest.log.comment("color is not " + bgcolorHex);
					success = false;
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_RangeFormat_IrregularFill_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var totalrangeAddress = "D5:F8";
		var rangeAddress1 = "D5:F6";
		var rangeAddress2 = "D7:F8";
		var bgcolor1 = "#FF00FF";
		var bgcolor2 = "#FFFF00";
		var ctx = new Excel.RequestContext();
		var fill1 = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress1).format.fill;
		fill1.color = bgcolor1;
		var fill2 = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress2).format.fill;
		fill2.color = bgcolor2;
		ctx.sync().then(function () {
			var success = true;
			var fill = ctx.workbook.worksheets.getItem(sheetName).getRange(totalrangeAddress).format.fill;
			ctx.load(fill);
			ctx.sync().then(function () {
				RichApiTest.log.comment("range.format.fill.color='" + fill.color + "'");
				if (fill.color != null) {
					RichApiTest.log.comment("color is not null");
					success = false;
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_RangeFormat_IrregularFont_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var totalrangeAddress = "D5:F8";
		var rangeAddress1 = "D5:F6";
		var rangeAddress2 = "D7:F8";
		var bgcolor1 = "#FF00FF";
		var bgcolor2 = "#FFFF00";
		var ctx = new Excel.RequestContext();
		var font1 = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress1).format.font;
		font1.color = bgcolor1;
		var font2 = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress2).format.font;
		font2.color = bgcolor2;
		ctx.sync().then(function () {
			var font = ctx.workbook.worksheets.getItem(sheetName).getRange(totalrangeAddress).format.font;
			ctx.load(font);
			return font;
		})
		.then(ctx.sync)
		.then(function (font) {
			RichApiTest.log.comment("range.format.font.color='" + font.color + "'");
			if (font.color != null) {
				throw new Error("color is not null");
			}
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_ColWidthSet_cvt_JScript_V12() {
		var sheetName = "Sheet1";
		var rangeAddress1 = "E3"
		var colWidth = 30;
		var ctx = new Excel.RequestContext();
		var format = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress1).format;
		format.columnWidth = colWidth;
		ctx.sync()
			.then(function () {
				format = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress1).format;
				ctx.load(format);
				return format;
			})
			.then(ctx.sync)
			.then(function (format) {
				Util.assertCompareValues(colWidth, format.columnWidth, "ColumnWidth");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_ColWidthAutoFitSet_cvt_JScript_V12() {
		var sheetName = "Sheet1";
		var rangeAddress1 = "E3"
		var ctx = new Excel.RequestContext();
		var format = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress1).format;
		format.autofitColumns();
		ctx.sync()
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_RowHeightSet_cvt_JScript_V12() {
		var sheetName = "Sheet1";
		var rangeAddress1 = "E3"
		var rowHeight = 30;
		var ctx = new Excel.RequestContext();
		var format = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress1).format;
		format.rowHeight = rowHeight;
		ctx.sync()
			.then(function () {
				format = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress1).format;
				ctx.load(format);
				return format;
			})
			.then(ctx.sync)
			.then(function (format) {
				Util.assertCompareValues(rowHeight, format.rowHeight, "RowHeight");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_RowHeightAutoFitSet_cvt_JScript_V12() {
		var sheetName = "Sheet1";
		var rangeAddress1 = "E3"
		var ctx = new Excel.RequestContext();
		var format = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress1).format;
		format.autofitRows();
		ctx.sync()
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_Borders_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "B5:D8";
		var ctx = new Excel.RequestContext();
		var borders = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.borders;
		RichApiTest.log.comment("Setting borders");
		
		var styles = ["Continuous", "Dash", "DashDot", "DashDotDot", "Dot", "Double", "SlantDashDot", "SlantDashDot"];
		var borderNames = ["EdgeTop", "EdgeBottom", "EdgeLeft", "EdgeRight", "InsideVertical", "InsideHorizontal", "DiagonalDown", "DiagonalUp"];
		for (var i = 0; i < borderNames.length; i++) {
			borders.getItem(borderNames[i]).style = styles[i];
		}
		ctx.sync().then(function () {
			RichApiTest.log.comment("Loading borders");
			var success = true;
			
			
			
			
			var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			var loadedBorders = range.format.borders;
			ctx.trackedObjects.add(range);
			ctx.load(loadedBorders);
			
			ctx.sync().then(function () {
				RichApiTest.log.comment("Comparing results");
				for (var i = 0; i < borderNames.length; i++) {
					if (loadedBorders.items[i].style != styles[i]) {
						RichApiTest.log.comment("the linestyle for border '" + loadedBorders.items[i].sideIndex + "' is " + loadedBorders.items[i].sideIndex + ". It does not match to expected result of '" + styles[i] + "'");
						success = false;
					}
				}
				
				ctx.trackedObjects.remove(range);
				ctx.sync().then(function () {
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
				
			}, ExcelTest.reportError);
		}, ExcelTest.reportError);
	}
	export function test_RangeFormat_DeleteSheetOnAccess_cvt_JScript_V11() {
		var strValue = "TestRngSheetAndDeleteOnAccess";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.sync().then(function () {
			ctx.load(sheet);
			var range = sheet.getCell(1, 1);
			ctx.load(range);
			var rangefill = range.format.fill;
			ctx.load(rangefill);
			sheet.delete();
			rangefill.color = "#FF00FF";
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
		}, reportError);
	};
	export function test_RangeFormat_DefaultFill_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "D5:F8";
		var bgcolor = "#FFFFFF";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(null);
		range.clear(null);
		ctx.sync().then(function () {
			var success = true;
			var fill = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).format.fill;
			ctx.load(fill);
			ctx.sync().then(function () {
				RichApiTest.log.comment("range.format.fill.color='" + fill.color + "'");
				if (fill.color != bgcolor) {
					RichApiTest.log.comment("color is not " + bgcolor);
					success = false;
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_RangeFormat_WrapText_cvt_JScript_V14() {
		var sheetName = "Sheet1";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.format.wrapText = true;
			var rangeFormat = range.format;
			ctx.load(rangeFormat);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, rangeFormat.wrapText, "Wrap Text");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_BoldItalic_cvt_JScript_V14() {
		var sheetName = "Sheet1";
		var rangeAddress = "M5:M8";
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange(rangeAddress);
			range.format.font.bold = true;
			range.format.font.italic = true;
			var rangeFormat = range.format;
			ctx.load(rangeFormat.font);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, rangeFormat.font.bold, "Bold");
					Util.assertCompareValues(true, rangeFormat.font.italic, "Italic");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetAndGetTextOrientationWithPositiveValue_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var values = [["Foobar", "123"], ["321", "Foobar"]];
		var setTextOrientation = 30;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.values = values;
			rangeToSet.format.textOrientation = setTextOrientation;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.format.load("textOrientation");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(setTextOrientation, rangeToGet.format.textOrientation, "TextOrientation");
					rangeToSet.clear();
				})
				.then(ctx.sync);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetAndGetTextOrientationWithNegativeValue_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var values = [["Foobar", "123"], ["321", "Foobar"]];
		var setTextOrientation = -45;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.values = values;
			rangeToSet.format.textOrientation = setTextOrientation;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.format.load("textOrientation");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(setTextOrientation, rangeToGet.format.textOrientation, "TextOrientation");
					rangeToSet.clear();
				})
				.then(ctx.sync);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetAndGetTextOrientationWithVerticalOrientation_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var values = [["Foobar", "123"], ["321", "Foobar"]];
		var setTextOrientation = 180;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.values = values;
			rangeToSet.format.textOrientation = setTextOrientation;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.format.load("textOrientation");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(setTextOrientation, rangeToGet.format.textOrientation, "TextOrientation");
					rangeToSet.clear();
				})
				.then(ctx.sync);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetNonuniformTextOrientationValue_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var values = [["Foobar", "123"], ["321", "Foobar"]];
		var setTextOrientation1 = 30;
		var setTextOrientation2 = -45;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.values = values;
			rangeToSet.getCell(0, 0).format.textOrientation = setTextOrientation1;
			rangeToSet.getCell(1, 1).format.textOrientation = setTextOrientation2;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.format.load("textOrientation");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(null, rangeToGet.format.textOrientation, "TextOrientation");
					rangeToSet.clear();
				})
				.then(ctx.sync);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetInvalidPositiveTextOrientationValue_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var setTextOrientation = 95;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.format.textOrientation = setTextOrientation;
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetInvalidNegativeTextOrientationValue_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var setTextOrientation = -100;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.format.textOrientation = setTextOrientation;
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetInvalidDataTypeTextOrientationValue_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var setTextOrientation = 4.5;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.format.textOrientation = setTextOrientation;
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetColumnWithStandardWidth_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var defaultWidth = 48;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.format.columnWidth = defaultWidth / 2;
			rangeToSet.format.load("columnWidth");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(defaultWidth / 2, rangeToSet.format.columnWidth, "UseStandardWidth");
					rangeToSet.format.useStandardWidth = true;
					var rangeToGet = worksheet.getRange(rangeAddress);
					rangeToGet.format.load("columnWidth, useStandardWidth");
					return ctx.sync()
						.then(function () {
							ExcelTest.Util.assertCompareValues(true, rangeToGet.format.useStandardWidth, "UseStandardWidth");
							ExcelTest.Util.assertCompareValues(defaultWidth, rangeToGet.format.columnWidth, "UseStandardWidth");
							rangeToSet.clear();
							return ctx.sync();
						})
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetStandardWidth_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var defaultWidth = 48;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.format.columnWidth = defaultWidth;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.format.load("useStandardWidth");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(true, rangeToGet.format.useStandardWidth, "UseStandardWidth");
					rangeToSet.clear();
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetUniformNonStandardWidth_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var defaultWidth = 48;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.format.columnWidth = defaultWidth * 2;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.format.load("useStandardWidth");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(false, rangeToGet.format.useStandardWidth, "UseStandardWidth");
					rangeToSet.clear();
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetNonUniformNonStandardWidth_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var defaultWidth = 48;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.getCell(0, 0).format.columnWidth = defaultWidth * 2;
			rangeToSet.getCell(1, 1).format.columnWidth = defaultWidth / 2;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.format.load("useStandardWidth");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(null, rangeToGet.format.useStandardWidth, "UseStandardWidth");
					rangeToSet.clear();
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetRowWithStandardHeight_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var defaultHeight = 15;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.format.rowHeight = defaultHeight / 2;
			rangeToSet.format.load("rowHeight");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(defaultHeight / 2, rangeToSet.format.rowHeight, "UseStandardHeight");
					rangeToSet.format.useStandardHeight = true;
					var rangeToGet = worksheet.getRange(rangeAddress);
					rangeToGet.format.load("rowHeight, useStandardHeight");
					return ctx.sync()
						.then(function () {
							ExcelTest.Util.assertCompareValues(true, rangeToGet.format.useStandardHeight, "UseStandardHeight");
							ExcelTest.Util.assertCompareValues(defaultHeight, rangeToGet.format.rowHeight, "UseStandardHeight");
							rangeToSet.clear();
							return ctx.sync();
						})
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetStandardHeight_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var defaultHeight = 15;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.format.rowHeight = defaultHeight;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.format.load("useStandardHeight");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(true, rangeToGet.format.useStandardHeight, "UseStandardHeight");
					rangeToSet.clear();
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetUniformNonStandardHeight_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var defaultHeight = 15;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.format.rowHeight = defaultHeight * 2;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.format.load("useStandardHeight");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(false, rangeToGet.format.useStandardHeight, "UseStandardHeight");
					rangeToSet.clear();
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetNonUniformNonStandardHeight_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A1:B2";
		var defaultHeight = 15;
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.getCell(0, 0).format.rowHeight = defaultHeight * 2;
			rangeToSet.getCell(1, 1).format.rowHeight = defaultHeight / 2;
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.format.load("useStandardHeight");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(null, rangeToGet.format.useStandardHeight, "UseStandardHeight");
					rangeToSet.clear();
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
 ?module ExcelTest {
	export function test_Range_BasicTest_bvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "=A1"], ["=B1", "=A1+B1"]];
		var rangeValuesToGet = [[rangeValue.toString(), rangeValue.toString()], [rangeValue.toString(), "24690"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = rangeValuesToSet;
		ctx.sync().then(function () {
			range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.values.length; ++i) {
					for (var j = 0; j < range.values[i].length; ++j) {
						RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j]);
						if (range.values[i][j] != rangeValuesToGet[i][j]) {
							RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j] + "  is not equal to " + rangeValuesToGet[i][j]);
							success = false;
						}
					}
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Range_BasicTestAfter10SecondsDelay_cvt_JScript_V11() {
		var timeoutSeconds = 10;
		RichApiTest.log.comment("Delaying for " + timeoutSeconds + " before invoking scripts. You could put the Excel in edit mode to check the Edit mode behavior.");
		window.setTimeout(function () {
			RichApiTest.log.comment("Invoke scripts after " + timeoutSeconds + " seconds");
			test_Range_BasicTest_bvt_JScript_V11();
		}, timeoutSeconds * 1000);
	}
	export function test_Range_RunWithUrl_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "=A1"], ["=B1", "=A1+B1"]];
		var rangeValuesToGet = [[rangeValue.toString(), rangeValue.toString()], [rangeValue.toString(), "24690"]];
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			(ctx) => {
				var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
				range.values = rangeValuesToSet;
				return ctx.sync()
					.then(() => {
						ctx.load(range);
						return ctx.sync();
					})
					.then(() => {
						Util.assertCompareArray(range.values, rangeValuesToGet);
					});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetValueWithNull_cvt_JScript_V13() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:C2";
		var rangeValuesToSet = [["a1", "a2", "a3"], ["b1", "b2", "b3"]];
		var rangeValuesToSetWithNull = [["a11", null, "a31"], [null, "b21", null]];
		var rangeValuesToGet = [["a11", "a2", "a31"], ["b1", "b21", "b3"]];
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			(ctx) => {
				var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
				range.values = rangeValuesToSet;
				ctx.load(range);
				return ctx.sync()
					.then(() => {
						Util.assertCompareArray(range.values, rangeValuesToSet);
					})
					.then(() => {
						range.values = rangeValuesToSetWithNull;
						ctx.load(range);
						return ctx.sync();
					})
					.then(() => {
						Util.assertCompareArray(range.values, rangeValuesToGet);
					})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetValueWithNonArray_cvt_JScript_V13() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:C2";
		var rangeValuesToSet: Array<any> = [["a1", "a2", "a3"], 123];
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			(ctx) => {
				var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
				range.values = rangeValuesToSet;
				ctx.load(range);
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SingleValue_bvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:C3";
		var rangeValueToGet = "teststring";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = <any>rangeValueToGet;
		ctx.sync().then(function () {
			range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.values.length; ++i) {
					for (var j = 0; j < range.values[i].length; ++j) {
						RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j]);
						if (range.values[i][j] != rangeValueToGet) {
							RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j] + "  is not equal to " + rangeValueToGet);
							success = false;
						}
					}
				}
				RichApiTest.log.done(true);
			}, ExcelTest.reportError);
		}, ExcelTest.reportError);
	}
	export function test_Range_Formulas_bvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeAddressA2 = "A2";
		var rangeValue = 12345;
		var rangeFormulas = [[rangeValue.toString(), "=A1"], ["=B1", "=RAND()"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.formulas = rangeFormulas;
		ctx.sync().then(function () {
			range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			var rangeA2 = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddressA2);
			ctx.load(rangeA2);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.formulas.length; ++i) {
					for (var j = 0; j < range.formulas[i].length; ++j) {
						RichApiTest.log.comment("formulas[" + i + "][" + j + "]=" + range.formulas[i][j]);
						if (range.formulas[i][j] != rangeFormulas[i][j]) {
							RichApiTest.log.comment("formulas[" + i + "][" + j + "]=" + range.formulas[i][j] + "  is not equal to " + rangeFormulas[i][j]);
							success = false;
						}
					}
				}
				RichApiTest.log.comment("rangeA2.values[0][0]=" + rangeA2.values[0][0]);
				if (rangeA2.values[0][0] != rangeValue) {
					RichApiTest.log.comment("Value is not " + rangeValue);
					success = false;
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Range_FormulasShouldFailOnSyntaxError_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1";
		var rangeFormulas = [["=RAND(dd)"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.formulas = rangeFormulas;
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
	}
	export function test_Range_FormulasSetA1GetR1C1_bvt_JScript_V12() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeAddressA2 = "A2";
		var rangeValue = 3333;
		var rangeFormulas = [[rangeValue.toString(), "=A1"], ["=B1", "=RAND()"]];
		var rangeFormulasR1C1 = [[rangeValue.toString(), "=RC[-1]"], ["=R[-1]C[1]", "=RAND()"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.formulas = rangeFormulas;
		ctx.sync().then(function () {
			range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.formulasR1C1.length; ++i) {
					for (var j = 0; j < range.formulasR1C1[i].length; ++j) {
						RichApiTest.log.comment("formulasR1C1[" + i + "][" + j + "]=" + range.formulasR1C1[i][j]);
						if (range.formulasR1C1[i][j] != rangeFormulasR1C1[i][j]) {
							RichApiTest.log.comment("formulasR1C1[" + i + "][" + j + "]=" + range.formulasR1C1[i][j] + "  is not equal to " + rangeFormulasR1C1[i][j]);
							success = false;
						}
					}
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Range_FormulasSetR1C1GetR1C1_cvt_JScript_V12() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeValue = 2222;
		var rangeFormulasR1C1 = [[rangeValue.toString(), "=RC[-1]"], ["=R[-1]C[1]", "=RAND()"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.formulasR1C1 = rangeFormulasR1C1;
		ctx.sync().then(function () {
			range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.formulasR1C1.length; ++i) {
					for (var j = 0; j < range.formulasR1C1[i].length; ++j) {
						RichApiTest.log.comment("formulasR1C1[" + i + "][" + j + "]=" + range.formulasR1C1[i][j]);
						if (range.formulasR1C1[i][j] != rangeFormulasR1C1[i][j]) {
							RichApiTest.log.comment("formulasR1C1[" + i + "][" + j + "]=" + range.formulasR1C1[i][j] + "  is not equal to " + rangeFormulasR1C1[i][j]);
							success = false;
						}
					}
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Range_FormulasSetR1C1GetA1_bvt_JScript_V12() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeValue = 1111;
		var rangeFormulas = [[rangeValue.toString(), "=A1"], ["=B1", "=RAND()"]];
		var rangeFormulasR1C1 = [[rangeValue.toString(), "=RC[-1]"], ["=R[-1]C[1]", "=RAND()"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.formulasR1C1 = rangeFormulasR1C1;
		ctx.sync().then(function () {
			range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.formulas.length; ++i) {
					for (var j = 0; j < range.formulas[i].length; ++j) {
						RichApiTest.log.comment("formulas[" + i + "][" + j + "]=" + range.formulas[i][j]);
						if (range.formulas[i][j] != rangeFormulas[i][j]) {
							RichApiTest.log.comment("formulas[" + i + "][" + j + "]=" + range.formulas[i][j] + "  is not equal to " + rangeFormulas[i][j]);
							success = false;
						}
					}
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Range_OneFormulasR1C1GetR1C1Array_cvt_JScript_V12() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var setRangeFormulasR1C1 = "=RC[1]";
		var getRangeFormulasR1C1 = [["=RC[1]", "=RC[1]"], ["=RC[1]", "=RC[1]"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.formulasR1C1 = <any>setRangeFormulasR1C1;
		ctx.sync().then(function () {
			range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.formulasR1C1.length; ++i) {
					for (var j = 0; j < range.formulasR1C1[i].length; ++j) {
						RichApiTest.log.comment("formulasR1C1[" + i + "][" + j + "]=" + range.formulasR1C1[i][j]);
						if (range.formulasR1C1[i][j] != getRangeFormulasR1C1[i][j]) {
							RichApiTest.log.comment("formulasR1C1[" + i + "][" + j + "]=" + range.formulasR1C1[i][j] + "  is not equal to " + getRangeFormulasR1C1[i][j]);
							success = false;
						}
					}
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Range_OneFormulasR1C1GetA1Array_cvt_JScript_V12() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var setRangeFormulasR1C1 = "=RC[1]";
		var getRangeFormulas = [["=B1", "=C1"], ["=B2", "=C2"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.formulasR1C1 = <any>setRangeFormulasR1C1;
		ctx.sync().then(function () {
			range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.formulas.length; ++i) {
					for (var j = 0; j < range.formulas[i].length; ++j) {
						RichApiTest.log.comment("formulasR1C1[" + i + "][" + j + "]=" + range.formulas[i][j]);
						if (range.formulas[i][j] != getRangeFormulas[i][j]) {
							RichApiTest.log.comment("formulasR1C1[" + i + "][" + j + "]=" + range.formulas[i][j] + "  is not equal to " + getRangeFormulas[i][j]);
							success = false;
						}
					}
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Range_ClearNull_bvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), ""], ["", "=A1"]];
		var rangeValuesToGet = [[rangeValue.toString(), ""], ["", "12345"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = rangeValuesToSet;
		ctx.sync().then(function () {
			range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.values.length; ++i) {
					for (var j = 0; j < range.values[i].length; ++j) {
						RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j]);
						if (range.values[i][j] != rangeValuesToGet[i][j]) {
							RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j] + "  is not equal to " + rangeValuesToGet[i][j]);
							success = false;
						}
					}
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Range_InvalidOperation_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A:B";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "a"], ["b", "=A1"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = rangeValuesToSet;
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidOperation);
	}
	export function test_Range_InsertInterferesWithTable_cvt_JScript_V11() {
		var sheetName = "ExistingTables";
		var rangeAddress = "B5:D5";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).insert("Down");
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.insertDeleteConflict);
	}
	export function test_Range_Insert_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "a"], ["b", "c"]];
		var rangeValuesToGet = [[rangeValue.toString(), "a"], ["", ""], ["b", "c"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = rangeValuesToSet;
		ctx.sync().then(function () {
			var rangeOriginal = ctx.workbook.worksheets.getItem(sheetName).getRange("A2:B2").insert("Down");
			ctx.load(rangeOriginal);
			ctx.sync().then(function () {
				var success = true;
				RichApiTest.log.comment("Now blank range at '" + rangeOriginal.address + "'");
				if (rangeOriginal.address != "Sheet1!A2:B2") {
					RichApiTest.log.comment("Address of now blank space not as expected. Actual: '" + rangeOriginal.address + "'");
					success = false;
				}
				rangeAddress = "A1:B3";
				range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
				ctx.load(range);
				ctx.sync().then(function () {
					for (var i = 0; i < range.values.length; ++i) {
						for (var j = 0; j < range.values[i].length; ++j) {
							RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j]);
							if (range.values[i][j] != rangeValuesToGet[i][j]) {
								RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j] + "  is not equal to " + rangeValuesToGet[i][j]);
								success = false;
							}
						}
					}
					RichApiTest.log.done(success);
				}, reportError);
			}, reportError);
		}, reportError);
	}
	export function test_Range_Delete_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeAddressSet = "A1:B3";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "a"], ["b", "c"], ["", ""]];
		var rangeValuesToGet = [[rangeValue.toString(), "a"], ["", ""]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddressSet);
		range.values = rangeValuesToSet;
		ctx.sync().then(function () {
			ctx.workbook.worksheets.getItem(sheetName).getRange("A2:B2").delete("Up");
			ctx.sync().then(function () {
				rangeAddress = "A1:B2";
				range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
				ctx.load(range);
				ctx.sync().then(function () {
					var success = true;
					for (var i = 0; i < range.values.length; ++i) {
						for (var j = 0; j < range.values[i].length; ++j) {
							RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j]);
							if (range.values[i][j] != rangeValuesToGet[i][j]) {
								RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j] + "  is not equal to " + rangeValuesToGet[i][j]);
								success = false;
							}
						}
					}
					RichApiTest.log.done(success);
				}, reportError);
			}, reportError);
		}, reportError);
	}
	export function test_Range_DeleteEncompassesTable_cvt_JScript_V14() {
		var sheetName = "Sheet1";
		var rangeAddress = "D10:F10";
		Excel.run(function (ctx) {
			ctx.workbook.worksheets.getItem(sheetName).getRange().clear();
			var table = ctx.workbook.worksheets.getItem(sheetName).tables.add(rangeAddress, true);
			table.rows.add(null, [[123, "foo", 123]]);
			table.rows.add(null, [[456, "bar", 456]]);
			var filter = table.columns.getItemAt(1).filter;
			filter.apply({
				filterOn: Excel.FilterOn.custom,
				criterion1: "bar"
			});
			return ctx.sync()
				.then(function () {
					ctx.workbook.worksheets.getItem(sheetName).getRange("C5:G20").delete(Excel.DeleteShiftDirection.up);
					var newRange = ctx.workbook.worksheets.getItem(sheetName).getRange("E11");
					ctx.load(newRange);
					return ctx.sync(newRange);
				})
				.then(function (newRange) {
					Util.assertCompareArray(newRange.text, [[""]]);
					ctx.workbook.worksheets.getItem(sheetName).getRange().clear();
					return ctx.sync();
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_DeleteFailPartialTable_cvt_JScript_V14() {
		var sheetName = "Sheet1";
		var rangeAddress = "D10:F10";
		Excel.run(function (ctx) {
			ctx.workbook.worksheets.getItem(sheetName).getRange().clear();
			var table = ctx.workbook.worksheets.getItem(sheetName).tables.add(rangeAddress, true);
			table.rows.add(null, [[123, "foo", 123]]);
			table.rows.add(null, [[456, "bar", 456]]);
			var filter = table.columns.getItemAt(1).filter;
			filter.apply({
				filterOn: Excel.FilterOn.custom,
				criterion1: "bar"
			});
			return ctx.sync()
				.then(function () {
					ctx.workbook.worksheets.getItem(sheetName).getRange("C11:G11").delete(Excel.DeleteShiftDirection.up);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.insertDeleteConflict);
				})
				.then(function () {
					var newRange = ctx.workbook.worksheets.getItem(sheetName).getRange("E11");
					ctx.load(newRange);
					return ctx.sync(newRange);
				})
				.then(function (newRange) {
					Util.assertCompareArray(newRange.text, [["foo"]]);
					ctx.workbook.worksheets.getItem(sheetName).getRange().clear();
					return ctx.sync();
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	export function test_Range_GetActiveRange_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.getSelectedRange();
		ctx.load(range);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Loaded Active Range: " + range.address);
			RichApiTest.log.done(true);
		}, reportError);
	}
	
	export function test_Range_GetActiveSheet_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var sheet = ctx.workbook.worksheets.getActiveWorksheet();
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Loaded Active Sheet: " + sheet.name);
			RichApiTest.log.done(true);
		}, reportError);
	}
	export function test_Range_SetAndGetActiveRange_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "G5:P20";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.select();
		ctx.sync().then(function () {
			var success = true;
			var activeRange = ctx.workbook.getSelectedRange();
			ctx.load(activeRange);
			ctx.sync().then(function () {
				RichApiTest.log.comment("Loaded Active Range: " + activeRange.address);
				if (activeRange.address != sheetName + "!" + rangeAddress) {
					success = false;
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Range_HideUnhideCols_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B3:C7");
		range.columnHidden = true;
		ctx.trackedObjects.add(range);
		ctx.sync().then(function () {
			ctx.load(range);
		})
			.then(ctx.sync).then(function () {
				Util.assertCompareValues(true, range.columnHidden, "Checking that columns are hidden");
				range.columnHidden = false;
			})
			.then(ctx.sync).then(function () {
				Util.assertCompareValues(false, range.columnHidden, "Checking that columns are visible");
				ctx.trackedObjects.remove(range);
				return ctx.sync();
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_HideUnhideRows_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B2:C4");
		range.rowHidden = true;
		ctx.trackedObjects.add(range);
		ctx.sync().then(function () {
			ctx.load(range);
		})
			.then(ctx.sync).then(function () {
				Util.assertCompareValues(true, range.rowHidden, "Checking that rows are hidden");
				range.rowHidden = false;
			})
			.then(ctx.sync).then(function () {
				Util.assertCompareValues(false, range.rowHidden, "Checking that rows are visible");
				ctx.trackedObjects.remove(range);
				return ctx.sync();
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetHideColsState_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("F1:E20");
		ctx.load(range);
		ctx.sync().then(function () {
			Util.assertCompareValues(false, range.columnHidden, "columnHidden");
			Util.assertCompareValues(false, range.rowHidden, "rowHidden");
			Util.assertCompareValues(false, range.hidden, "Overall Hidden");
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SelectFailOnHidden_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var globalRangeObtainedCorrectly = ctx.workbook.worksheets.getItem("Hidden3").getRange("A1").select();
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidSelection);
	}
	export function test_Range_SetAndGetActiveSheet_cvt_JScript_V11() {
		var sheetName1 = "NamedItems";
		var sheetName2 = "Sheet1";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		ctx.workbook.worksheets.getItem(sheetName1).activate();
		ctx.sync().then(function () {
			var success = true;
			var sheet = ctx.workbook.worksheets.getActiveWorksheet();
			ctx.load(sheet);
			ctx.sync().then(function () {
				RichApiTest.log.comment("Loaded Active Sheet: " + sheet.name);
				if (sheet.name != sheetName1) {
					success = false;
					RichApiTest.log.done(success);
				} else {
					ctx.workbook.worksheets.getItem(sheetName2).activate();
					var sheet2 = ctx.workbook.worksheets.getActiveWorksheet();
					ctx.load(sheet2);
					ctx.sync().then(function () {
						RichApiTest.log.comment("Loaded Active Sheet: " + sheet2.name);
						if (sheet2.name != sheetName2) {
							success = false;
						}
						RichApiTest.log.done(success);
					}, reportError);
				}
			}, reportError);
		}, reportError);
	}
	export function test_Range_ActivateHiddenSheetFail_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var globalRangeObtainedCorrectly = ctx.workbook.worksheets.getItem("Hidden3").activate();
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidReference);
	}
	export function test_Range_Binding_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "a"], ["b", "c"]];
		var rangeValuesToGet = [[rangeValue.toString(), "a"], ["", ""], ["b", "c"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = rangeValuesToSet;
		ctx.workbook.worksheets.getItem(sheetName).getRange("A2:B2").insert("Down");
		ctx.load(range);
		ctx.sync().then(function () {
			var success = true;
			if (range.address != "Sheet1!A1:B3") {
				success = false;
			}
			else {
				for (var i = 0; i < range.values.length; ++i) {
					for (var j = 0; j < range.values[i].length; ++j) {
						RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j]);
						if (range.values[i][j] != rangeValuesToGet[i][j]) {
							RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j] + "  is not equal to " + rangeValuesToGet[i][j]);
							success = false;
						}
					}
				}
			}
			RichApiTest.log.done(success);
		}, reportError);
	}
	export function test_Range_KeepRefBindingCrossRequests_bvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "a"], ["b", "c"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = rangeValuesToSet;
		ctx.trackedObjects.add(range);
		ctx.sync().then(function () {
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.values.length; ++i) {
					for (var j = 0; j < range.values[i].length; ++j) {
						RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j]);
						if (range.values[i][j] != rangeValuesToSet[i][j]) {
							RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j] + "  is not equal to " + rangeValuesToSet[i][j]);
							success = false;
						}
					}
				}
				ctx.trackedObjects.remove(range);
				ctx.sync().then(
					function () {
						RichApiTest.log.done(success);
					},
					reportError);
			}, reportError);
		}, reportError);
	}
	export function test_Range_KeepRefBindingCross2Requests_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "a"], ["b", "c"]];
		var rangeValuesToGet = [[rangeValue.toString(), "a"], ["", ""], ["b", "c"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = rangeValuesToSet;
		ctx.trackedObjects.add(range);
		ctx.sync().then(function () {
			ctx.workbook.worksheets.getItem(sheetName).getRange("A2:B2").insert("Down");
			ctx.sync().then(function () {
				ctx.load(range);
				ctx.sync().then(function () {
					var success = true;
					if (range.address != "Sheet1!A1:B3") {
						success = false;
					}
					else {
						for (var i = 0; i < range.values.length; ++i) {
							for (var j = 0; j < range.values[i].length; ++j) {
								RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j]);
								if (range.values[i][j] != rangeValuesToGet[i][j]) {
									RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j] + "  is not equal to " + rangeValuesToGet[i][j]);
									success = false;
								}
							}
						}
					}
					ctx.trackedObjects.remove(range);
					ctx.sync().then(
						function () {
							RichApiTest.log.done(success);
						},
						reportError);
				}, reportError);
			}, reportError);
		}, reportError);
	}
	export function test_Range_BindingCleanup_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "a"], ["b", "c"]];
		var rangeValuesToGet = [[rangeValue.toString(), "a"], ["", ""], ["b", "c"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange("A1:B2");
		var range2 = ctx.workbook.worksheets.getItem(sheetName).getRange("A3:B4");
		var referenceCountBefore = ctx.workbook._GetReferenceCount();
		range.values = rangeValuesToSet;
		ctx.trackedObjects.add(range);
		ctx.trackedObjects.add(range2);
		ctx.sync().then(function () {
			ctx.workbook.worksheets.getItem(sheetName).getRange("A2:B2").insert("Down");
			ctx.sync().then(function () {
				ctx.load(range);
				ctx.load(range2);
				var referenceCountAfter = ctx.workbook._GetReferenceCount();
				ctx.sync().then(function () {
					var success = true;
					if (range.address != "Sheet1!A1:B3" || (referenceCountAfter.value - referenceCountBefore.value) != 2) {
						RichApiTest.log.comment("RefernecesBefore:" + referenceCountBefore);
						RichApiTest.log.comment("RefernecesAfter:" + referenceCountAfter);
						success = false;
					}
					else {
						for (var i = 0; i < range.values.length; ++i) {
							for (var j = 0; j < range.values[i].length; ++j) {
								RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j]);
								if (range.values[i][j] != rangeValuesToGet[i][j]) {
									RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j] + "  is not equal to " + rangeValuesToGet[i][j]);
									success = false;
								}
							}
						}
					}
					
					ctx.workbook._RemoveAllReferences();
					var referenceCountFinal = ctx.workbook._GetReferenceCount();
					ctx.sync().then(
						function () {
							if (referenceCountFinal.value != 0) {
								success = false;
							}
							RichApiTest.log.done(success);
						},
						reportError);
				}, reportError);
			}, reportError);
		}, reportError);
	}
	export function test_Range_BindingNoCleanup_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "a"], ["b", "c"]];
		var rangeValuesToGet = [[rangeValue.toString(), "a"], ["", ""], ["b", "c"]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange("A1:B2");
		var range2 = ctx.workbook.worksheets.getItem(sheetName).getRange("A3:B4");
		var referenceCountBefore = ctx.workbook._GetReferenceCount();
		range.values = rangeValuesToSet;
		ctx.trackedObjects.add(range);
		ctx.trackedObjects.add(range2);
		ctx.sync().then(function () {
			ctx.workbook.worksheets.getItem(sheetName).getRange("A2:B2").insert("Down");
			ctx.sync().then(function () {
				ctx.load(range);
				ctx.load(range2);
				var referenceCountAfter = ctx.workbook._GetReferenceCount();
				ctx.sync().then(function () {
					var success = true;
					if (range.address != "Sheet1!A1:B3" || (referenceCountAfter.value - referenceCountBefore.value) != 2) {
						RichApiTest.log.comment("RefernecesBefore:" + referenceCountBefore);
						RichApiTest.log.comment("RefernecesAfter:" + referenceCountAfter);
						success = false;
					}
					else {
						for (var i = 0; i < range.values.length; ++i) {
							for (var j = 0; j < range.values[i].length; ++j) {
								RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j]);
								if (range.values[i][j] != rangeValuesToGet[i][j]) {
									RichApiTest.log.comment("values[" + i + "][" + j + "]=" + range.values[i][j] + "  is not equal to " + rangeValuesToGet[i][j]);
									success = false;
								}
							}
						}
					}
					var referenceCountFinal = ctx.workbook._GetReferenceCount();
					ctx.sync().then(
						function () {
							if (referenceCountFinal.value != 2) {
								success = false;
							}
							RichApiTest.log.done(success);
						},
						reportError);
				}, reportError);
			}, reportError);
		}, reportError);
	}
	export function test_Range_GetReferenceCount_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var count = ctx.workbook._GetReferenceCount();
		ctx.load(ctx.workbook);
		ctx.sync().then(function () {
			RichApiTest.log.comment("ReferenceCount :" + count.value);
			RichApiTest.log.done(true);
		}, ExcelTest.reportError);
	}
	export function test_Range_RemoveAllReferences_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		ctx.workbook._RemoveAllReferences();
		var count = ctx.workbook._GetReferenceCount();
		ctx.load(ctx.workbook);
		ctx.sync().then(function () {
			RichApiTest.log.comment("All removed, ReferenceCount :" + count.value);
			RichApiTest.log.done(true);
		}, ExcelTest.reportError);
	}
	export function test_Range_SheetMismatch_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var firstSheet = ctx.workbook.worksheets.getItem("Sheet1");
		var rangeOnAnotherSheet = firstSheet.getRange("NamedItems!A2")
		ctx.load(rangeOnAnotherSheet);
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
	}
	export function test_Range_EntireSheetDelBlocked_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(null);
		range.delete("up");
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidOperation);
	}
	export function test_Range_SetNumberFormat_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.getCell(0, 0).values = [[1]];
		range.numberFormat = [["0.00%"]];
		ctx.load(range);
		ctx.sync().then(function () {
			var success = true;
			if (range.text[0][0] != "100.00%") {
				RichApiTest.log.comment("The actual Range.Text is: '" + range.text + "'. The expected one is '100.00%'");
				success = false;
			}
			RichApiTest.log.done(success);
		}, ExcelTest.reportError);
	}
	export function test_Range_SetNumberFormatUniformColStr_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "B:B";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.numberFormat = <any>"0.00%";
		var rangeToGet = ctx.workbook.worksheets.getItem(sheetName).getRange("B2");
		rangeToGet.values = [[1]];
		ctx.load(rangeToGet);
		ctx.sync().then(function () {
			var success = true;
			if (rangeToGet.text[0][0] != "100.00%") {
				RichApiTest.log.comment("The actual Range.Text is: '" + rangeToGet.text + "'. The expected one is '100.00%'");
				success = false;
			}
			RichApiTest.log.done(success);
		}, ExcelTest.reportError);
	}
	export function test_Range_SetNumberFormatUniformColArr_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "B:B";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.numberFormat = [["0.00%"]];
		var rangeToGet = ctx.workbook.worksheets.getItem(sheetName).getRange("B2");
		rangeToGet.values = [[1]];
		ctx.load(rangeToGet);
		ctx.sync().then(function () {
			var success = true;
			if (rangeToGet.text[0][0] != "100.00%") {
				RichApiTest.log.comment("The actual Range.Text is: '" + rangeToGet.text + "'. The expected one is '100.00%'");
				success = false;
			}
			RichApiTest.log.done(success);
		}, ExcelTest.reportError);
	}
	export function test_Range_SetNumberFormatUniformPartColArr_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "B1:B3";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.numberFormat = [["0.00%"]];
		var rangeToGet = ctx.workbook.worksheets.getItem(sheetName).getRange("B2");
		rangeToGet.values = [[1]];
		ctx.load(rangeToGet);
		ctx.sync().then(function () {
			var success = true;
			if (rangeToGet.text[0][0] != "100.00%") {
				RichApiTest.log.comment("The actual Range.Text is: '" + rangeToGet.text + "'. The expected one is '100.00%'");
				success = false;
			}
			RichApiTest.log.done(success);
		}, ExcelTest.reportError);
	}
	export function test_Range_SetNumberFormatSizeMismatch_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "B:B";
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
				range.numberFormat = [["0.00%", "0,000"]];
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation)
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetNumberFormatLocal_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1";
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.getCell(0, 0).values = [[1]];
			rangeToSet.numberFormatLocal = [["0.00%"]];
			ctx.load(rangeToSet);
			var rangeToGet = worksheet.getRange(rangeAddress);
			rangeToGet.load("text");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(rangeToGet.text[0][0], "100.00%", "NumberFormatLocal");
					rangeToSet.clear();
				})
				.then(ctx.sync);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetNumberFormatLocalUniformColStr_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "B:B";
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.numberFormatLocal = <any>"0.00%";
			ctx.load(rangeToSet);
			var rangeToGet = worksheet.getRange("B2");
			rangeToGet.values = [[1]];
			ctx.load(rangeToGet);
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(rangeToGet.text[0][0], "100.00%", "NumberFormatLocal");
					rangeToSet.clear();
				})
				.then(ctx.sync);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetNumberFormatLocalUniformColArr_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "B:B";
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.numberFormatLocal = [["0.00%"]];
			ctx.load(rangeToSet);
			var rangeToGet = worksheet.getRange("B2");
			rangeToGet.values = [[1]];
			ctx.load(rangeToGet);
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(rangeToGet.text[0][0], "100.00%", "NumberFormatLocal");
					rangeToSet.clear();
				})
				.then(ctx.sync);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetNumberFormatLocalUniformPartColArr_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "B1:B3";
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.numberFormatLocal = [["0.00%"]];
			ctx.load(rangeToSet);
			var rangeToGet = worksheet.getRange("B2");
			rangeToGet.values = [[1]];
			ctx.load(rangeToGet);
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(rangeToGet.text[0][0], "100.00%", "NumberFormatLocal");
					rangeToSet.clear();
				})
				.then(ctx.sync);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetNumberFormatLocalSizeMismatch_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "B:B";
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var rangeToSet = worksheet.getRange(rangeAddress);
			rangeToSet.numberFormatLocal = [["0.00%", "0,000"]];
			ctx.load(rangeToSet);
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidOperation)
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetRowColumnOffsetValid_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var originalRangeAddress = "C5:F18";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(originalRangeAddress);
		var secondRow = range.getRow(1);
		var thirdColumn = range.getColumn(2);
		var offsetBy2Left1Up = range.getOffsetRange(-1, -2);
		ctx.load(secondRow, "Address");
		ctx.load(thirdColumn, "Address");
		ctx.load(offsetBy2Left1Up, "Address");
		ctx.sync().then(function () {
			var success = Util.compare(secondRow.address, "Sheet1!C6:F6") &&
				Util.compare(thirdColumn.address, "Sheet1!E5:E18") &&
				Util.compare(offsetBy2Left1Up.address, "Sheet1!A4:D17");
			RichApiTest.log.done(success);
		}, ExcelTest.reportError);
	}
	export function test_Range_DeleteSheetOnAccess_cvt_JScript_V11() {
		var strValue = "TestRngSheetAndDeleteOnAccess";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.sync().then(function () {
			ctx.load(sheet);
			var range = sheet.getCell(1, 1);
			ctx.load(range);
			sheet.delete();
			range.values = [["1234"]];
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
		}, reportError);
	};
	export function test_Range_KeepRefDeleteSheetOnAccess_cvt_JScript_V11() {
		var strValue = "TestRngSheetAndDeleteOnAccess";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.sync().then(function () {
			ctx.load(sheet);
			var range = sheet.getCell(1, 1);
			ctx.load(range);
			ctx.trackedObjects.add(range);
			sheet.delete();
			range.values = [["1234"]];
			RichApiTest.log.comment("Deleting sheet that has a reference on it");
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
		}, reportError);
	};
	export function test_Range_KeepRefDeleteSheetOnAccessThenDelRef_cvt_JScript_V11() {
		var strValue = "TestRngSheetAndDeleteOnAccess";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.sync().then(function () {
			ctx.load(sheet);
			var range = sheet.getCell(1, 1);
			ctx.load(range);
			ctx.trackedObjects.add(range);
			sheet.delete();
			range.values = [["1234"]];
			RichApiTest.log.comment("Deleting sheet that has a reference on it");
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound, null, () => {
				RichApiTest.log.comment("Going to delete reference");
				ctx.trackedObjects.remove(range);
				ctx.sync().then(function () {
					RichApiTest.log.comment("Deleted reference");
					RichApiTest.log.done(true);
				}, reportError);
			});
		}, reportError);
	};
	export function test_Range_KeepRefDeleteSheetThenDelRef_cvt_JScript_V11() {
		var strValue = "TestRngSheetAndDeleteOnAccess";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.sync().then(function () {
			ctx.load(sheet);
			var range = sheet.getCell(1, 1);
			ctx.load(range);
			ctx.trackedObjects.add(range);
			sheet.delete();
			RichApiTest.log.comment("Deleting sheet that has a reference on it");
			ctx.sync().then(function () {
				RichApiTest.log.comment("removing reference to range");
				ctx.trackedObjects.remove(range);
				ctx.sync().then(function () {
					RichApiTest.log.comment("Reference removed");
					RichApiTest.log.done(true);
				}, reportError);
			});
		}, reportError);
	};
	export function test_Range_KeepRefDeleteSheetDontDelRef_cvt_JScript_V11() {
		var strValue = "TestRngSheetAndDeleteOnAccess";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.sync().then(function () {
			ctx.load(sheet);
			var range = sheet.getCell(1, 1);
			ctx.load(range);
			ctx.trackedObjects.add(range);
			sheet.delete();
			RichApiTest.log.comment("Deleting sheet that has a reference on it");
			ctx.sync().then(function () {
				RichApiTest.log.done(true);
			}, reportError);
		}, reportError);
	};
	export async function test_Range_KeepRefDeleteBackingRange_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "B2:C4";
		var entireColumnsAddress = "A:D";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		ctx.trackedObjects.add(range);
		await ctx.sync();
		RichApiTest.log.comment("Deleting entire columns containing KeepRef'ed range");
		ctx.workbook.worksheets.getItem(sheetName).getRange(entireColumnsAddress).delete(Excel.DeleteShiftDirection.left);
		await ctx.sync();
		range.format.fill.color = "red";
		await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound);
		ctx.workbook._RemoveAllReferences();
		await ctx.sync();
	};
	export function test_Range_IntersectionValidUsingRangeObject_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var intersection = worksheet.getRange("C:E").getIntersection(worksheet.getRange("5:10"));
		ctx.load(intersection);
		ctx.sync().then(function () {
			RichApiTest.log.done(intersection.address == "Sheet1!C5:E10");
		}, ExcelTest.reportError);
	}
	export function test_Range_IntersectionOrNullValidUsingRangeObject_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var intersection = worksheet.getRange("C:E").getIntersectionOrNullObject(worksheet.getRange("5:10"));
		ctx.load(intersection);
		ctx.sync().then(function () {
			RichApiTest.log.done(intersection.address == "Sheet1!C5:E10");
		}, ExcelTest.reportError);
	}
	export function test_Range_IntersectionValidUsingAddress_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var intersection = worksheet.getRange("C:E").getIntersection("5:10");
		ctx.load(intersection);
		ctx.sync().then(function () {
			RichApiTest.log.done(intersection.address == "Sheet1!C5:E10");
		}, ExcelTest.reportError);
	}
	export function test_Range_IntersectionOrNullValidUsingAddress_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var intersection = worksheet.getRange("C:E").getIntersectionOrNullObject("Sheet1!5:10");
		ctx.load(intersection);
		ctx.sync().then(function () {
			RichApiTest.log.done(intersection.address == "Sheet1!C5:E10");
		}, ExcelTest.reportError);
	}
	export function test_Range_IntersectionAcrossWorksheetsShouldFailUsingRangeObject_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var anotherWorksheet = ctx.workbook.worksheets.getItem("Charts");
		var intersection = worksheet.getRange("C:E").getIntersection(anotherWorksheet.getRange("5:10"));
		ctx.load(intersection);
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
	}
	export function test_Range_IntersectionAcrossWorksheetsShouldFailUsingAddress_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var intersection = worksheet.getRange("C:E").getIntersection("Charts!5:10");
		ctx.load(intersection);
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
	}
	export function test_Range_IntersectionShouldFailIfNoIntersectionIsPossible_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var intersection = worksheet.getRange("C:E").getIntersection("H:I");
		ctx.load(intersection);
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
	}
	export function test_Range_IntersectionFailsOnNull_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var intersection = worksheet.getRange("C:E").getIntersection(null);
		ctx.load(intersection);
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
	}
	export function test_Range_IntersectionFailsOnWrongArgTypePassedIn_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		
		var intersection = (<any>worksheet.getRange("C:E")).getIntersection(worksheet);
		ctx.load(intersection);
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
	}
	export function test_Range_IntersectionOrNullWhenNoIntersectionPossible$Load_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var intersection = worksheet.getRange("C:E").getIntersectionOrNullObject("H:I");
		ctx.load(intersection);
		ctx.sync().then(function () {
			RichApiTest.log.done(intersection.address === undefined);
		}, ExcelTest.reportError);
	}
	export function test_Range_IntersectionOrNullWhenNoIntersectionPossible$Chain_cvt_JScript_V11() {
		Excel.run(function (ctx) {
			var worksheetCount;
			ctx.workbook.worksheets.load("Name");
			return ctx.sync()
				.then(function () {
					worksheetCount = ctx.workbook.worksheets.items.length;
					var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
					var intersection = worksheet.getRange("C:E").getIntersectionOrNullObject("H:I");
					intersection.worksheet.delete();
					ctx.workbook.worksheets.load("Name");
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(worksheetCount, ctx.workbook.worksheets.items.length,
						"Before and after should match, since delete operation should have no-op-ed");
					ctx.workbook._RemoveAllReferences();
					return ctx.sync();
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_IntersectionOrNullWhenNoIntersectionPossible$IsNull_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var resultingRange = worksheet.getRange("C:E").getIntersectionOrNullObject("H:I");
		ctx.sync()
			.then(function () {
				Util.assertCompareValues(true, resultingRange.isNull);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetBoundingRectUsingRangeObject_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var intersection = worksheet.getRange("A5:B6").getBoundingRect(worksheet.getRange("E2:E10"));
		ctx.load(intersection);
		ctx.sync().then(function () {
			RichApiTest.log.done(intersection.address == "Sheet1!A2:E10");
		}, ExcelTest.reportError);
	}
	export function test_Range_GetBoundingRectUnboundedUsingRangeObject_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var intersection = worksheet.getRange("C:E").getBoundingRect(worksheet.getRange("5:10"));
		ctx.load(intersection);
		ctx.sync().then(function () {
			RichApiTest.log.done(intersection.address == "Sheet1!1:1048576");
		}, ExcelTest.reportError);
	}
	
	export function test_Range_GetInvalidCellCountOfEntireWorksheet_cvt_JScript_V14() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var entireWorksheetRange = worksheet.getRange(null);
		ctx.load(entireWorksheetRange, "cellCount");
		ctx.sync().then(function () {
			RichApiTest.log.done(entireWorksheetRange.cellCount == -1);
		}, ExcelTest.reportError);
	}
	export function test_Range_GetValidCellCountOfSmallerRange_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var smallerRange = worksheet.getRange("A1:P1048576");
		ctx.load(smallerRange, "cellCount");
		ctx.sync().then(function () {
			RichApiTest.log.done(smallerRange.cellCount == 0x1000000);
		}, ExcelTest.reportError);
	}
	export function test_Range_MergeUnmerge_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem("Merge");
		var usedNumber = 1;
		var usedNumber2 = 2;
		var A1 = worksheet.getRange("A1");
		var A4 = worksheet.getRange("A4");
		var A1E5 = worksheet.getRange("A1:E5");
		A1.values = [[usedNumber]];
		A4.values = [[usedNumber2]];
		ctx.load(A1);
		ctx.load(A4);
		ctx.load(A1E5);
		A1E5.merge(false);
		A1 = worksheet.getRange("A1");
		A4 = worksheet.getRange("A4");
		A1E5 = worksheet.getRange("A1:E5");
		ctx.load(A1);
		ctx.load(A4);
		ctx.load(A1E5);
		ctx.sync()
			.then(function () {
				
				
				if (A1.values[0][0] != usedNumber) {
					throw new Error("FAIL:A1 value after merge should be " + usedNumber + " but is:" + A1.values[0][0]);
				}
				RichApiTest.log.comment("A1 value after merge (should be " + usedNumber + "):" + A1.values[0][0]);
				RichApiTest.log.comment("A4 value after merge (should be nothing):" + A4.values[0][0]);
				if (A4.values[0][0] != "") {
					throw new Error("FAIL:A4 value after merge should be " + "" + " but is:" + A4.values[0][0]);
				}
			})
			.then(function () {
				A1 = worksheet.getRange("A1");
				A4 = worksheet.getRange("A4");
				A1E5 = worksheet.getRange("A1:E5");
				A1E5.unmerge();
				A4.values = [[usedNumber2]];
				ctx.load(A1);
				ctx.load(A4);
				ctx.load(A1E5);
				return ctx.sync();
			})
			.then(function () {
				
				if (A1.values[0][0] != usedNumber) {
					throw new Error("FAIL:A1 value after unmerge should be " + usedNumber + " but is:" + A1.values[0][0]);
				}
				
				if (A4.values[0][0] != usedNumber2) {
					throw new Error("FAIL:A4value after unmerge should be " + usedNumber2 + " but is:" + A4.values[0][0]);
				}
				
				RichApiTest.log.comment("A1 value after unmerge (should be " + usedNumber + "):" + A1.values[0][0]);
				RichApiTest.log.comment("A4 value after unmerge (should be " + usedNumber2 + "):" + A4.values[0][0]);
			})
			.then(function () {
				
				RichApiTest.log.comment("Cleaning up.");
				A1E5 = worksheet.getRange("A1:E5");
				A1E5.clear();
				return ctx.sync();
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_MergeUnmergeAcross_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem("Merge");
			var usedNumber = 1;
			var usedNumber2 = 2;
			var usedNumber3 = 3;
			var empty = Excel.RangeValueType.empty;
			var success = true;
			var A1 = worksheet.getRange("A1");
			var A2 = worksheet.getRange("A2");
			var B2 = worksheet.getRange("B2");
			var A1E5 = worksheet.getRange("A1:E5");
			A1.values = [[usedNumber]];
			B2.values = [[usedNumber2]];
			A1E5.merge(true);
			ctx.load(A1);
			ctx.load(A2);
			ctx.load(B2);
			ctx.load(A1E5);
			return ctx.sync()
				.then(function () {
					
					if (A1.values[0][0] != usedNumber) {
						throw new Error("FAIL:A1 value after merge across should be " + usedNumber + " but is:" + A1.values[0][0]);
					}
					
					
					if (A2.valueTypes[0][0] != empty) {
						throw new Error("FAIL:A2 value after merge across should be: " + empty + " but is:" + A2.values[0][0]);
					}
					
					if (B2.valueTypes[0][0] != empty) {
						throw new Error("FAIL:B2 value after merge across should be empty: " + empty + " but is:" + B2.values[0][0]);
					}
					RichApiTest.log.comment("A1 value after merge across expected: " + usedNumber + "actual:" + A1.values[0][0]);
					RichApiTest.log.comment("A2 value after merge across expected: " + "" + "actual:" + A2.values[0][0]);
					RichApiTest.log.comment("B2 value after merge across expected: " + "" + "actual:" + B2.values[0][0]);
					B2 = worksheet.getRange("B2");
					B2.values = [[usedNumber2]];
					A2.values = [[usedNumber3]];
					
					A1E5.unmerge();
					ctx.load(A2);
					ctx.load(B2);
					return ctx.sync();
				})
				.then(function () {
					
					if (A1.values[0][0] != usedNumber) {
						throw new Error("FAIL:A1 value after unmerge across should be " + "" + " but is:" + A1.values[0][0]);
					}
					
					
					if (A2.values[0][0] != usedNumber3) {
						throw new Error("FAIL:A2 value after unmerge across should be " + usedNumber3 + " but is:" + A2.values[0][0]);
					}
					
					RichApiTest.log.comment("A1 value after unmerge across expected:" + usedNumber + "actual:" + A1.values[0][0]);
					RichApiTest.log.comment("A2 value after unmerge across expected:" + usedNumber3 + "actual:" + A2.values[0][0]);
					RichApiTest.log.comment("B2 value after unmerge across expected:" + "" + "actual:" + B2.values[0][0]);
				})
				.then(function () {
					A1E5.clear();
					return ctx.sync();
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_ValueTypes_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:E1";
		var rangeValuesToSet = [[12345.67890, "", "teststring", "=5/0", true]];
		var rangeTypesToGet = [[Excel.RangeValueType.double, Excel.RangeValueType.empty, Excel.RangeValueType.string, Excel.RangeValueType.error, Excel.RangeValueType.boolean]];
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = rangeValuesToSet;
		ctx.sync().then(function () {
			range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				for (var i = 0; i < range.valueTypes.length; ++i) {
					for (var j = 0; j < range.valueTypes[i].length; ++j) {
						RichApiTest.log.comment("valuetypes[" + i + "][" + j + "]=" + range.valueTypes[i][j]);
						if (range.valueTypes[i][j] != rangeTypesToGet[i][j]) {
							RichApiTest.log.comment("valuetypes[" + i + "][" + j + "]=" + range.valueTypes[i][j] + "  is not equal to " + rangeTypesToGet[i][j]);
							success = false;
						}
					}
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Range_LargeData_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:Z100";
		var rangeValuesToSet = [];
		for (var row = 0; row < 100; row++) {
			var rowValue = [];
			for (var col = 0; col < 26; col++) {
				rowValue.push(row * col);
			}
			rangeValuesToSet.push(rowValue);
		}
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
				var nextIdPrevious = ctx._nextId();
				range.values = rangeValuesToSet;
				if (Office.context.requirements.isSetSupported("ExcelApi", 1.3)) {
					var nextIdAfter = ctx._nextId();
					Util.assert(nextIdAfter - nextIdPrevious > 5,
						"Extra objects should have been created when splitting the values into chunks");
				}
				return ctx.sync()
					.then(function () {
						range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
						ctx.load(range);
						return ctx.sync();
					})
					.then(function () {
						if (!Util.compareArray(range.values, rangeValuesToSet)) {
							throw "Values were not as expected: '" + rangeValuesToSet + "' Actual: '" + range.values + "'";
						}
					})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_CreateFromMultiRangeFails_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = ctx.workbook.worksheets.getItem(sheetName);
		
		var range = worksheet.getRange(sheetName + "!" + "E2:E5" + "," +
			sheetName + "!" + "F2:F5" + "," +
			sheetName + "!" + "H2:H5");
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
	}
	
	export function usedRangeSetupHelper(ctx: Excel.RequestContext): Excel.Worksheet {
		var sheetName = "Sheet1";
		var valuesRangeAddress = "A1:B2";
		var rangeValuesToSet = [["foo", "bar"], ["zar", "doz"]];
		var formatRangeAddress = "A4:C4";
		var worksheet = ctx.workbook.worksheets.getItem(sheetName);
		worksheet.getRange().clear();
		worksheet.getRange(valuesRangeAddress).values = rangeValuesToSet;
		worksheet.getRange(formatRangeAddress).format.fill.color = "red";
		return worksheet;
	}
	
	
	export function test_Range_GetUsedRange$$ValuesOnly$Null_cvt_JScript_V11() {
		var expectedUsedRangeAddress = "Sheet1!A1:C4"; 
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = usedRangeSetupHelper(ctx);
		var usedRange = worksheet.getRange().getUsedRange();
		ctx.load(usedRange);
		ctx.sync()
			.then(function () {
				Util.assert(usedRange.address == expectedUsedRangeAddress);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_Range_GetUsedRange$$ValuesOnly$False_cvt_JScript_V12() {
		var expectedUsedRangeAddress = "Sheet1!A1:C4"; 
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var worksheet = usedRangeSetupHelper(ctx);
		var usedRange = worksheet.getRange().getUsedRange(false);
		ctx.load(usedRange);
		ctx.sync()
			.then(function () {
				Util.assert(usedRange.address == expectedUsedRangeAddress);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetUsedRange$SingleColumn$$BothRegularAndNullObject_cvt_JScript_V12() {
		var expectedUsedRangeAddress = "Sheet1!C4"; 
		Excel.run(function (ctx) {
			var worksheet = usedRangeSetupHelper(ctx);
			var usedRange = worksheet.getRange("C:C").getUsedRange().load("address");
			var usedRangeOrNullObj = worksheet.getRange("C:C").getUsedRangeOrNullObject().load("address");
			return ctx.sync()
				.then(function () {
					Util.assert(usedRange.address == expectedUsedRangeAddress);
					Util.assert(usedRangeOrNullObj.address == expectedUsedRangeAddress);
					Util.assert(!usedRangeOrNullObj.isNullObject);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetUsedRange$$BothRegularAndNullObject$$ValuesOnly$True_cvt_JScript_V12() {
		var expectedUsedRangeAddress = "Sheet1!A1:B2"; 
		Excel.run(function (ctx) {
			var worksheet = usedRangeSetupHelper(ctx);
			var usedRange = worksheet.getRange().getUsedRange(true).load("address");
			var usedRangeOrNullObj = worksheet.getRange().getUsedRangeOrNullObject(true).load("address");
			return ctx.sync()
				.then(function () {
					Util.assert(usedRange.address == expectedUsedRangeAddress);
					Util.assert(usedRangeOrNullObj.address == expectedUsedRangeAddress);
					Util.assert(!usedRangeOrNullObj.isNullObject);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetUsedRange$$NoUsedRange$ValuesOnly_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var worksheet = usedRangeSetupHelper(ctx);
			var usedRange = worksheet.getRange("C:C").getUsedRange(true).load("address");
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetUsedRangeOrNullObj$$NoUsedRange$ValuesOnly_cvt_JScript_V12() {
		Excel.run(function (ctx) {
			var worksheet = usedRangeSetupHelper(ctx);
			var usedRangeOrNullObj = worksheet.getRange("C:C").getUsedRangeOrNullObject(true).load("address");
			return ctx.sync()
				.then(function () {
					Util.assert(usedRangeOrNullObj.isNullObject);
					Util.assert(typeof (usedRangeOrNullObj.address) === "undefined");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetWorksheet_cvt_JScript_V12() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		ctx.load(range.worksheet);
		ctx.sync()
			.then(function () {
				Util.assertCompareValues(sheetName, range.worksheet.name);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsAbove$normalCase_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("Sheet1!D7:G10");
				var newRange = originalRange.getRowsAbove(3);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D4:G6", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsAbove$negativeNumbers_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("Sheet1!D7:G10");
				var newRange = originalRange.getRowsAbove(-2);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D7:G8", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsAbove$negativeNumbersLargerThanRangeItself_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("Sheet1!D7:G10");
				var newRange = originalRange.getRowsAbove(-10);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D7:G16", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsAbove$noArgumentMeansOneRow_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getRowsAbove();
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D6:G6", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsAbove$MinusOne_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getRowsAbove(-1);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D7:G7", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsAbove$goingOutOfRange_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getRowsAbove(10);
				newRange.load("address");
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsAbove$zeroFail_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				if ((<any>window).Office.context.requirements.isSetSupported("ExcelApi", 1.3)) {
					var newRange = originalRange.getRowsAbove(0);
					newRange.load("address");
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				} else {
					try {
						var newRange = originalRange.getRowsAbove(0);
						throw new Error("Should have failed before getting here")
					} catch (e) {
						if (e instanceof OfficeExtension.Error && e.code == Excel.ErrorCodes.invalidArgument) {
							
						} else {
							throw new Error("Caught Exception, but not the expected one");
						}
					}
				}
				return ctx.sync();
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsAbove$nonNumeric_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange = sheet1.getRange("D7:G10");
			
				
				if ((<any>window).Office.context.requirements.isSetSupported("ExcelApi", 1.3)) {
					var newRange = originalRange.getRowsAbove(<any>"foo");
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				} else {
					
					try {
						var newRange = originalRange.getRowsAbove(<any>"foo");
						throw new Error("Should have failed before getting here")
					} catch (e) {
						if (e instanceof OfficeExtension.Error && e.code == Excel.ErrorCodes.invalidArgument) {
							
						} else {
							throw new Error("Caught Exception, but not the expected one");
						}
					}
				}
				return ctx.sync();
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsBelow_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getRowsBelow(3);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D11:G13", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsBelow$negative_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getRowsBelow(-3);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D8:G10", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsBelow$One_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getRowsBelow(1);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D11:G11", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsBelow$MinusOne_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getRowsBelow(-1);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D10:G10", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getRowsBelow$zeroFail_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				if ((<any>window).Office.context.requirements.isSetSupported("ExcelApi", 1.3)) {
					var newRange = originalRange.getRowsBelow(0);
					newRange.load("address");
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				} else {
					try {
						var newRange = originalRange.getRowsBelow(0);
						throw new Error("Should have failed before getting here")
					} catch (e) {
						if (e instanceof OfficeExtension.Error && e.code == Excel.ErrorCodes.invalidArgument) {
							
						} else {
							throw new Error("Caught Exception, but not the expected one");
						}
					}
				}
				return ctx.sync();
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getColumnsBefore_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getColumnsBefore(2);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!B7:C10", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getColumnsBefore$negative_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getColumnsBefore(-2);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D7:E10", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getColumnsBefore$One_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getColumnsBefore(1);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!C7:C10", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getColumnsBefore$MinusOne_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getColumnsBefore(-1);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D7:D10", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getColumnsBefore$zeroFail_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				if ((<any>window).Office.context.requirements.isSetSupported("ExcelApi", 1.3)) {
					var newRange = originalRange.getColumnsBefore(0);
					newRange.load("address");
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				} else {
					try {
						var newRange = originalRange.getColumnsBefore(0);
						throw new Error("Should have failed before getting here")
					} catch (e) {
						if (e instanceof OfficeExtension.Error && e.code == Excel.ErrorCodes.invalidArgument) {
							
						} else {
							throw new Error("Caught Exception, but not the expected one");
						}
					}
				}
				return ctx.sync();
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getColumnsAfter_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getColumnsAfter(2);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!H7:I10", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getColumnsAfter$negative_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getColumnsAfter(-2);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!F7:G10", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getColumnsAfter$One_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getColumnsAfter(1);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!H7:H10", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getColumnsAfter$MinusOne_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getColumnsAfter(-1);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!G7:G10", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getColumnsAfter$zeroFail_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				if ((<any>window).Office.context.requirements.isSetSupported("ExcelApi", 1.3)) {
					var newRange = originalRange.getColumnsAfter(0);
					newRange.load("address");
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
				} else {
					try {
						var newRange = originalRange.getColumnsAfter(0);
						throw new Error("Should have failed before getting here")
					} catch (e) {
						if (e instanceof OfficeExtension.Error && e.code == Excel.ErrorCodes.invalidArgument) {
							
						} else {
							throw new Error("Caught Exception, but not the expected one");
						}
					}
				}
				return ctx.sync();
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getResizedRange_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getResizedRange(4, 2);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D7:I14", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getResizedRange$negative_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getResizedRange(-1, -2);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D7:E9", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getResizedRange$negativeBeyondBounds_cvt_JScript_V11() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange: Excel.Range = sheet1.getRange("D7:G10");
				var newRange = originalRange.getResizedRange(-6, -5);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!B4:D7", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getAbsoluteResizedRange_cvt_JScript_V17() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange = sheet1.getRange("D7:G10");
				var newRange = originalRange.getAbsoluteResizedRange(3, 6);
				newRange.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Sheet1!D7:I9", newRange.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getAbsoluteResizedRange$zeroSize_cvt_JScript_V17() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange = sheet1.getRange("D7:G10");
				var newRange = originalRange.getAbsoluteResizedRange(0, 6);
				newRange.load("address");
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getAbsoluteResizedRange$negativeSize_cvt_JScript_V17() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange = sheet1.getRange("D7:G10");
				var newRange = originalRange.getAbsoluteResizedRange(3, -2);
				newRange.load("address");
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_getAbsoluteResizedRange$outOfRange_cvt_JScript_V17() {
		Excel.run(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri),
			function (ctx) {
				var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
				var originalRange = sheet1.getRange("D7:G10");
				var newRange = originalRange.getAbsoluteResizedRange(1048577, 6);
				newRange.load("address");
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_Calculate_cvt_JScript_V16() {
		Excel.run(function (ctx: Excel.RequestContext) {
			var sheet: Excel.Worksheet;
			var rangeWithFormula1: Excel.Range;
			var rangeWithFormula2: Excel.Range;
			var rangeWithoutFormula1: Excel.Range;
			var rangeWithoutFormula2: Excel.Range;
			var rangeAddressWithFormula1 = "A5:C5";
			var rangeAddressWithFormula2 = "A6:C6";
			var rangeAddressWithoutFormula1 = "A5:B5";
			var rangeAddressWithoutFormula2 = "A6:B6";
			var rangeValuesToSetWithFormula1 = [["10", "20", "=A5+B5"]];
			var rangeValuesToSetWithFormula2 = [["11", "21", "=A6+B6"]];
			var rangeValuesToSetWithoutFormula1 = [["30", "40"]];
			var rangeValuesToSetWithoutFormula2 = [["31", "41"]];
			var rangeValuesToGetBeforeCalculate1 = [["30", "40", "30"]];
			var rangeValuesToGetBeforeCalculate2 = [["31", "41", "32"]];
			var rangeValuesToGetAfterCalculate1 = [["30", "40", "70"]];
			var rangeValuesToGetAfterCalculate2 = [["31", "41", "32"]];
			var app = ctx.workbook.application;
			app.load("calculationMode");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.CalculationMode.automatic, app.calculationMode, "calculation mode");
					
					sheet = ctx.workbook.worksheets.getItem("Sheet1");
					rangeWithFormula1 = sheet.getRange(rangeAddressWithFormula1);
					rangeWithFormula2 = sheet.getRange(rangeAddressWithFormula2);
					rangeWithoutFormula1 = sheet.getRange(rangeAddressWithoutFormula1);
					rangeWithoutFormula2 = sheet.getRange(rangeAddressWithoutFormula2);
					
					rangeWithFormula1.values = rangeValuesToSetWithFormula1;
					
					rangeWithFormula2.values = rangeValuesToSetWithFormula2;
					return ctx.sync();
				})
				.then(function () {
					
					ctx.workbook.application.suspendApiCalculationUntilNextSync();
					
					rangeWithoutFormula1.values = rangeValuesToSetWithoutFormula1;
					
					rangeWithoutFormula2.values = rangeValuesToSetWithoutFormula2;
					
					ctx.load(rangeWithFormula1);
					
					ctx.load(rangeWithFormula2);
					return ctx.sync();
				})
				.then(function () {
					
					Util.assertCompareArray(rangeWithFormula1.values, rangeValuesToGetBeforeCalculate1);
					
					Util.assertCompareArray(rangeWithFormula2.values, rangeValuesToGetBeforeCalculate2);
					
					ctx.workbook.application.suspendApiCalculationUntilNextSync();
					
					rangeWithFormula1.calculate();
					return ctx.sync();
				})
				.then(function () {
					
					ctx.load(rangeWithFormula1);
					
					ctx.load(rangeWithFormula2);
					return ctx.sync();
				})
				.then(function () {
					
					Util.assertCompareArray(rangeWithFormula1.values, rangeValuesToGetAfterCalculate1);
					
					
					
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetIsEntireRow_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B3";
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			var rangeFull = range.getEntireRow();
			ctx.load(range);
			ctx.load(rangeFull);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(false, range.isEntireRow, "Range isEntireRow");
					Util.assertCompareValues(true, rangeFull.isEntireRow, "Range isEntireRow");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetIsEntireColumn_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B3";
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			var rangeFull = range.getEntireColumn();
			ctx.load(range);
			ctx.load(rangeFull);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(false, range.isEntireColumn, "Range isEntireColumn");
					Util.assertCompareValues(true, rangeFull.isEntireColumn, "Range isEntireColumn");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_BasicHyperlinkTest_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var testHyperlink = {
			textToDisplay: "This is an example link",
			screenTip: "This is a test screen tip",
			address: "https://bing.com/"
		}
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			range.hyperlink = testHyperlink;
			ctx.load(range);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(range.hyperlink.textToDisplay, testHyperlink.textToDisplay, "Text to display should match");
					Util.assertCompareValues(range.hyperlink.screenTip, testHyperlink.screenTip, "Screen tip should match");
					Util.assertCompareValues(range.hyperlink.address, testHyperlink.address, "Address should match");
					Util.assertCompareValues(null, range.hyperlink.documentReference, "Document reference should be null");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetHyperlinkNoTextToDisplayOrScreenTip_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var testHyperlink = {
			address: "https://bing.com/"
		}
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			range.hyperlink = testHyperlink;
			ctx.load(range);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(range.hyperlink.textToDisplay, testHyperlink.address, "Text to display should match");
					Util.assertCompareValues(null, range.hyperlink.screenTip, "Screen tip should match");
					Util.assertCompareValues(range.hyperlink.address, testHyperlink.address, "Address should match");
					Util.assertCompareValues(null, range.hyperlink.documentReference, "Document reference should be null");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetDocRefNoTextToDisplayOrScreenTip_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var testHyperlink = {
			documentReference: "B4"
		}
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			range.hyperlink = testHyperlink;
			ctx.load(range);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(range.hyperlink.textToDisplay, testHyperlink.documentReference, "Text to display should match");
					Util.assertCompareValues(null, range.hyperlink.screenTip, "Screen tip should match");
					Util.assertCompareValues(null, range.hyperlink.address, "Address should match");
					Util.assertCompareValues(testHyperlink.documentReference, range.hyperlink.documentReference, "Document reference should be null");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_HyperlinkInvalidArgsTest_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var testHyperlink = {
		}
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			range.hyperlink = testHyperlink;
			ctx.load(range);
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_BasicDocumentReferenceTest_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var testHyperlink = {
			textToDisplay: "This is an example link",
			screenTip: "This is a test screen tip",
			documentReference: "B4",
		}
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			range.hyperlink = testHyperlink;
			ctx.load(range);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(range.hyperlink.textToDisplay, testHyperlink.textToDisplay, "Text to display should match");
					Util.assertCompareValues(range.hyperlink.screenTip, testHyperlink.screenTip, "Screen tip should match");
					Util.assertCompareValues(range.hyperlink.documentReference, testHyperlink.documentReference, "Document references should match");
					Util.assertCompareValues(null, range.hyperlink.address, "Address should be null");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_ClearHyperlinkTest_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "B3:C8";
		var testHyperlink = {
			textToDisplay: "This is an example link",
			screenTip: "This is a test screen tip",
			address: "https://bing.com/"
		}
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			range.hyperlink = testHyperlink;
			ctx.load(range);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(range.hyperlink.textToDisplay, testHyperlink.textToDisplay, "Text to display should match");
					Util.assertCompareValues(range.hyperlink.screenTip, testHyperlink.screenTip, "Screen tip should match");
					Util.assertCompareValues(range.hyperlink.address, testHyperlink.address, "Address should match");
					Util.assertCompareValues(null, range.hyperlink.documentReference, "Document reference should be null");
					range.clear(Excel.ClearApplyTo.hyperlinks);
					ctx.load(range);
					return ctx.sync();
				}).then(function () {
					ExcelTest.Util.assertCompareValues(null, range.hyperlink, "Hyperlink should be cleared");
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export async function test_Range_RemoveHyperlink_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "B3:C8";
		var testHyperlink = {
			textToDisplay: "www.bing.com",
			screenTip: "This is a test screen tip",
			address: "https://www.bing.com/"
		}
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = worksheet.getRange(rangeAddress);
			range.hyperlink = testHyperlink;
			range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);
			ctx.load(range);
			await ctx.sync();
			Util.assertCompareValues(range.hyperlink.textToDisplay, testHyperlink.textToDisplay, "Text to display should match");
			Util.assertCompareValues(range.hyperlink.screenTip, testHyperlink.screenTip, "Screen tip should match");
			Util.assertCompareValues(range.hyperlink.address, testHyperlink.address, "Address should match");
			Util.assertCompareValues(null, range.hyperlink.documentReference, "Document reference should be null");
			range.clear(Excel.ClearApplyTo.removeHyperlinks);
			ctx.load(range);
			var condFmt = range.conditionalFormats.getItemAt(0);
			ctx.load(condFmt);
			await ctx.sync();
			ExcelTest.Util.assertCompareValues(null, range.hyperlink, "Hyperlink should be cleared");
			ExcelTest.Util.assertCompareValues(Excel.ConditionalFormatType.presetCriteria, condFmt.type, "Conditional Format still present");
			range.conditionalFormats.clearAll();
			await ctx.sync();
		});
	}
	export function surroundingRegionSetupHelper(ctx: Excel.RequestContext): Excel.Worksheet {
		var sheetName = "Sheet1";
		var valuesRangeAddress = "C3:E5";
		var rangeValuesToSet = [["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"]];
		var worksheet = ctx.workbook.worksheets.getItem(sheetName);
		worksheet.getRange().clear();
		worksheet.getRange(valuesRangeAddress).values = rangeValuesToSet;
		return worksheet;
	}
	export function test_Range_GetSurroundingRegionWithExpansion_cvt_JScript_V17() {
		var expectedRangeAddress = "Sheet1!C3:E5";
		Excel.run(function (ctx) {
			var worksheet = surroundingRegionSetupHelper(ctx);
			var startingRange = worksheet.getRange("D4");
			var surroundingRegion = startingRange.getSurroundingRegion();
			surroundingRegion.load("address");
			return ctx.sync().then(function () {
				Util.assertCompareValues(expectedRangeAddress, surroundingRegion.address);
			});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Range_GetSurroundingRegionWithoutExpansion_cvt_Jscript_V17() {
		var expectedRangeAddress = "Sheet1!C3:E5";
		Excel.run(function (ctx) {
			var worksheet = surroundingRegionSetupHelper(ctx);
			var startingRange = worksheet.getRange("C3:E5");
			var surroundingRegion = startingRange.getSurroundingRegion();
			surroundingRegion.load("address");
			return ctx.sync().then(function () {
				Util.assertCompareValues(expectedRangeAddress, surroundingRegion.address);
			});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Range_GetImage_cvt_JScript_V18() {
		var rangeAddress = "Sheet1!C3:E5";
		Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
			var range = worksheet.getRange(rangeAddress);
			var image = range.getImage();
			return ctx.sync().then(function () {
				Util.assert(image.value.length > 1000, "Range image is large enough");
			});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Range_GetSurroundingRegionWithNoData_cvt_Jscript_V17() {
		Excel.run(function (ctx) {
			var worksheet = surroundingRegionSetupHelper(ctx);
			var startingRange = worksheet.getRange("G7:M13");
			var surroundingRegion = startingRange.getSurroundingRegion();
			surroundingRegion.load("address");
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound);
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	
	export function test_Range_ShowCard_cvt_JScript_V18() {
		return Excel.run(function (ctx) {
			var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
			var testTable = worksheet.tables.add(worksheet.getRange("C5:D7"), true);
			var testData = [
				["Row1, Column1", "Row1, Column2"],
				["Row2, Column1", "Row2, Column2"]
			];
			testTable.getDataBodyRange().values = testData;
			return ctx.sync().then(function () {
				worksheet.getRange("C6:D7").showCard();
			})
		})
	}
	export async function test_Range_Areas_cvt_JScript_V18() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var rangeAddress = "Sheet1!C3:E5";
		var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
		var areas = worksheet.getRange(rangeAddress).areas;
		ctx.load(areas);
		await ctx.sync();
		Util.assertCompareValues(areas.items.length, 1,  "There should be only one area in this range");
		Util.assertCompareValues(areas.items[0].address, rangeAddress, "The area address should match the range");
	}
	
	export function test_Range_Clear_bvt_JScript_V11() {
		var sheetName = "Sheet1";
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri));
		RichApiTest.RestUtility.updateRequestHeaders(ctx.requestHeaders);
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(null);
		range.clear(null);
		ctx.sync().then(function () {
			RichApiTest.log.done(true);
		}, reportError);
	}
}
?module ExcelTest {
	export function test_RangeView_HiddenRowsValuesGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [[1, 2], [1, 3], [7, 8], [9, 10]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.values));
						Util.assertCompareArray(visibleRange.values, rangeValuesToGet);
						Util.assertCompareNumeric(4, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsValuesPut_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [[1, 2], [1, 3], [7, 8], [9, 10]];
		var rangeValuesToSetVisible = [["a", "b"], [11, 12], [13, 14], [15, 16]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				visibleRange.values = rangeValuesToSetVisible;
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.values));
						Util.assertCompareArray(visibleRange.values, rangeValuesToSetVisible);
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsNumfmtPut_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeNumfmtToSetVisible = [["0.0%", "0.0%"], ["0,000.00", "0.00%"], ["0.00%", "0.00%"], ["0.00%", "0.00%"]];
		var rangeNumfmtToGetTotal = [["0.0%", "0.0%"], ["0,000.00", "0.00%"], ["0.0", "0.0"], ["0.00%", "0.00%"], ["0.00%", "0.00%"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				range.numberFormat = [["0.0"]];
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				visibleRange.numberFormat = rangeNumfmtToSetVisible;
				ctx.load(visibleRange);
				ctx.load(range);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.numberFormat));
						Util.assertCompareArray(range.numberFormat, rangeNumfmtToGetTotal);
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsNumfmtPut_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, 19], ["=A1", "=SUM(A1:B1)", 20], [5, 6, 21], [7, 8, 22], [9, 10, 23]];
		var rangeNumfmtToSetVisible = [["0.0%", "0.0%"], ["0,000.00", "0.00%"], ["0.00%", "0.00%"], ["00.00", "00.00"] , ["0.00%", "0.00%"]];
		var rangeNumfmtToGetTotal = [["0.0%", "0.0", "0.0%"], ["0,000.00", "0.0", "0.00%"], ["0.00%", "0.0", "0.00%"], ["00.00", "0.0", "00.00"], ["0.00%", "0.0", "0.00%"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				range.numberFormat = [["0.0"]];
				ctx.workbook.worksheets.getItem("Sheet1").getRange("B3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				visibleRange.numberFormat = rangeNumfmtToSetVisible;
				ctx.load(visibleRange);
				ctx.load(range);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.numberFormat));
						Util.assertCompareArray(range.numberFormat, rangeNumfmtToGetTotal);
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsValuesGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, "a"], ["=A1", "=SUM(A1:B1)", "b"], [5, 6, "c"], [7, 8, "d"], [9, 10, "e"]];
		var rangeTextToGet = [[1, "a"], [1, "b"], [5, "c"], [7, "d"], [9, "e"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("B3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.values));
						Util.assertCompareArray(visibleRange.values, rangeTextToGet);
						Util.assertCompareNumeric(5, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsTextGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeNumfmtToSet = [["0.0"]];
		var rangeTextToGet = [["1.0", "2.0"], ["1.0", "3.0"], ["7.0", "8.0"], ["9.0", "10.0"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				range.numberFormat = rangeNumfmtToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.text));
						Util.assertCompareArray(visibleRange.text, rangeTextToGet);
						Util.assertCompareNumeric(4, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsFirstTextGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeTextToGet = [["1.0", "3.0"], ["5.0", "6.0"], ["7.0", "8.0"], ["9.0", "10.0"]];
		var rangeNumfmtToSet = [["0.0"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				range.numberFormat = rangeNumfmtToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A1").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.text));
						Util.assertCompareArray(visibleRange.text, rangeTextToGet);
						Util.assertCompareNumeric(4, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsLastTextGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeTextToGet = [["1.0", "2.0"], ["1.0", "3.0"], ["5.0", "6.0"], ["7.0", "8.0"]];
		var rangeNumfmtToSet = [["0.0"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				range.numberFormat = rangeNumfmtToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A5").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.text));
						Util.assertCompareArray(visibleRange.text, rangeTextToGet);
						Util.assertCompareNumeric(4, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsAllHiddenTextGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeTextToGet = [[]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A5").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.text));
						Util.assertCompareArray(visibleRange.text, rangeTextToGet);
						Util.assertCompareNumeric(0, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(0, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsTextGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, "a"], ["=A1", "=SUM(A1:B1)", "b"], [5, 6, "c"], [7, 8, "d"], [9, 10, "e"]];
		var rangeTextToGet = [["1.0", "a"], ["1.0", "b"], ["5.0", "c"], ["7.0", "d"], ["9.0", "e"]];
		var rangeNumfmtToSet = [["0.0"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				range.numberFormat = rangeNumfmtToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("B3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.text));
						Util.assertCompareArray(visibleRange.text, rangeTextToGet);
						Util.assertCompareNumeric(5, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsLastTextGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, "a"], ["=A1", "=SUM(A1:B1)", "b"], [5, 6, "c"], [7, 8, "d"], [9, 10, "e"]];
		var rangeTextToGet = [["1.0", "2.0"], ["1.0", "3.0"], ["5.0", "6.0"], ["7.0", "8.0"], ["9.0", "10.0"]];
		var rangeNumfmtToSet = [["0.0"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				range.numberFormat = rangeNumfmtToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("C3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.text));
						Util.assertCompareArray(visibleRange.text, rangeTextToGet);
						Util.assertCompareNumeric(5, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsFirstTextGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, "a"], ["=A1", "=SUM(A1:B1)", "b"], [5, 6, "c"], [7, 8, "d"], [9, 10, "e"]];
		var rangeTextToGet = [["2.0", "a"], ["3.0", "b"], ["6.0", "c"], ["8.0", "d"], ["10.0", "e"]];
		var rangeNumfmtToSet = [["0.0"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				range.numberFormat = rangeNumfmtToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.text));
						Util.assertCompareArray(visibleRange.text, rangeTextToGet);
						Util.assertCompareNumeric(5, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsAllHiddenTextGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, "a"], ["=A1", "=SUM(A1:B1)", "b"], [5, 6, "c"], [7, 8, "d"], [9, 10, "e"]];
		var rangeTextToGet = [[]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C1").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.text));
						Util.assertCompareArray(visibleRange.text, rangeTextToGet);
						Util.assertCompareNumeric(0, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(0, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsFormulaGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeFormulaToGet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [7, 8], [9, 10]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.formulas));
						Util.assertCompareArray(visibleRange.formulas, rangeFormulaToGet);
						Util.assertCompareNumeric(4, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsFormulaPut_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [[1, 2], [1, 3], [7, 8], [9, 10]];
		var rangeValuesToSetVisible = [["a", "b"], ["=A1", 12], ["=SUM(A5:B5)", 14], [15, 16]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				visibleRange.formulas = rangeValuesToSetVisible;
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.formulas));
						Util.assertCompareArray(visibleRange.formulas, rangeValuesToSetVisible);
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsFormulaGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, "a"], ["=A1", "=SUM(A1:B1)", "b"], [5, 6, "c"], [7, 8, "d"], [9, 10, "e"]];
		var rangeTextToGet = [[1, "a"], ["=A1", "b"], [5, "c"], [7, "d"], [9, "e"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("B3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.formulas));
						Util.assertCompareArray(visibleRange.formulas, rangeTextToGet);
						Util.assertCompareNumeric(5, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsFormulaR1C1Get_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=A1+B1"], [5, 6], [7, 8], [9, 10]];
		var rangeFormulaToGet = [[1, 2], ["=R[-1]C", "=R[-1]C[-1]+R[-1]C"], [7, 8], [9, 10]]
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.formulasR1C1));
						Util.assertCompareArray(visibleRange.formulasR1C1, rangeFormulaToGet);
						Util.assertCompareNumeric(4, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsFormulaR1C1Put_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=A1+B1"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [[1, 2], [1, 3], [7, 8], [9, 10]];
		var rangeValuesToSetVisible = [[3, 4], ["=R[-1]C", 12], [13, "=R[-1]C[-1]+R[-1]C"], [15, 16]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A2").rowHidden = true;
				var visibleRange = range.getVisibleView();
				visibleRange.formulasR1C1 = rangeValuesToSetVisible;
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.formulasR1C1));
						Util.assertCompareArray(visibleRange.formulasR1C1, rangeValuesToSetVisible);
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsFormulaR1C1Get_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, "a"], ["=A1", "=SUM(A1:B1)", "b"], [5, 6, "c"], [7, 8, "d"], [9, 10, "e"]];
		var rangeTextToGet = [[1, "a"], ["=R[-1]C", "b"], [5, "c"], [7, "d"], [9, "e"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("B3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.formulasR1C1));
						Util.assertCompareArray(visibleRange.formulasR1C1, rangeTextToGet);
						Util.assertCompareNumeric(5, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsFormulaLocalGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeFormulaToGet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [7, 8], [9, 10]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.formulasLocal));
						Util.assertCompareArray(visibleRange.formulasLocal, rangeFormulaToGet);
						Util.assertCompareNumeric(4, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsFormulaLocalPut_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [[1, 2], [1, 3], [7, 8], [9, 10]];
		var rangeValuesToSetVisible = [["a", "b"], ["=A1", 12], ["=SUM(A5:B5)", 14], [15, 16]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				visibleRange.formulasLocal = rangeValuesToSetVisible;
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.formulasLocal));
						Util.assertCompareArray(visibleRange.formulasLocal, rangeValuesToSetVisible);
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsFormulaLocalGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, "a"], ["=A1", "=SUM(A1:B1)", "b"], [5, 6, "c"], [7, 8, "d"], [9, 10, "e"]];
		var rangeTextToGet = [[1, "a"], ["=A1", "b"], [5, "c"], [7, "d"], [9, "e"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("B3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.formulasLocal));
						Util.assertCompareArray(visibleRange.formulasLocal, rangeTextToGet);
						Util.assertCompareNumeric(5, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsNumberFormatGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeNumfmtToGet = [["0.0", "0.0"], ["0.0", "0.0"], ["0.0", "0.0"], ["0.0", "0.0"]]
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				range.numberFormat = [["0.0"]];
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.numberFormat));
						Util.assertCompareArray(visibleRange.numberFormat, rangeNumfmtToGet);
						Util.assertCompareNumeric(4, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsNumFmtGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, "a"], ["=A1", "=SUM(A1:B1)", "b"], [5, 6, "c"], [7, 8, "d"], [9, 10, "e"]];
		var rangeTextToGet = [["0.0", "0.0"], ["0.0", "0.0"], ["0.0", "0.0"], ["0.0", "0.0"], ["0.0", "0.0"]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				range.numberFormat = [["0.0"]];
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("B3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.numberFormat));
						Util.assertCompareArray(visibleRange.numberFormat, rangeTextToGet);
						Util.assertCompareNumeric(5, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsValueTypesGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], ["foo", "bar"], [9, 10]];
		var rangeValueTypesToGet = [[Excel.RangeValueType.double, Excel.RangeValueType.double], [Excel.RangeValueType.double, Excel.RangeValueType.double], [Excel.RangeValueType.string, Excel.RangeValueType.string], [Excel.RangeValueType.double, Excel.RangeValueType.double]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.valueTypes));
						Util.assertCompareArray(visibleRange.valueTypes, rangeValueTypesToGet);
						Util.assertCompareNumeric(4, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsValueTypesGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2, "a"], ["=A1", "=SUM(A1:B1)", "b"], [5, 6, "c"], [7, 8, "d"], [9, 10, "e"]];
		var rangeTextToGet = [[Excel.RangeValueType.double, Excel.RangeValueType.string], [Excel.RangeValueType.double, Excel.RangeValueType.string], [Excel.RangeValueType.double, Excel.RangeValueType.string], [Excel.RangeValueType.double, Excel.RangeValueType.string], [Excel.RangeValueType.double, Excel.RangeValueType.string]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("B3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.valueTypes));
						Util.assertCompareArray(visibleRange.valueTypes, rangeTextToGet);
						Util.assertCompareNumeric(5, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenRowsCellAddrGet_cvt_JScript_V13() {
		var rangeCellAddrToGet = [["A1", "B1"], ["A2", "B2"], ["A4", "B4"], ["A5", "B5"]]
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.cellAddresses));
						Util.assertCompareArray(visibleRange.cellAddresses, rangeCellAddrToGet);
						Util.assertCompareNumeric(4, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_HiddenColumnsCellAddrGet_cvt_JScript_V13() {
		var rangeCellAddrToGet = [["A1", "C1"], ["A2", "C2"], ["A3", "C3"], ["A4", "C4"], ["A5", "C5"]]
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:C5");
				range.rowHidden = false;
				range.columnHidden = false;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("B3").columnHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.cellAddresses));
						Util.assertCompareArray(visibleRange.cellAddresses, rangeCellAddrToGet);
						Util.assertCompareNumeric(5, visibleRange.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRange.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_GetRange_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [[1, 2], [1, 3], [7, 8], [9, 10]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						RichApiTest.log.comment(JSON.stringify(visibleRange.values));
						Util.assertCompareArray(visibleRange.values, rangeValuesToGet);
						var parentRange = visibleRange.getRange();
						ctx.load(parentRange);
						return ctx.sync(parentRange);
					})
					.then(function (parentRange) {
						Util.assertCompareValues(range.address, parentRange.address, "Parent range Address");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_RowsValuesGet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [[9, 10]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						var visibleRows = visibleRange.rows;
						ctx.load(visibleRows);
						return ctx.sync(visibleRows);
					})
					.then(function (visibleRows) {
						Util.assertCompareArray(visibleRows.items[3].values, rangeValuesToGet);
						Util.assertCompareNumeric(1, visibleRows.items[3].rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleRows.items[3].columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_RowsValuesSet_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A2", "=SUM(A2:B2)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToSetAndGetForRow = [[15, 20]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B6");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A4").rowHidden = true;
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A1").getEntireRow().insert(Excel.InsertShiftDirection.down);
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						var visibleRows = visibleRange.rows;
						ctx.load(visibleRows);
						return ctx.sync(visibleRows);
					})
					.then(function (visibleRows) {
						var visibleSingleRow = visibleRows.getItemAt(3);
						visibleSingleRow.values = rangeValuesToSetAndGetForRow;
						ctx.load(visibleSingleRow);
						return ctx.sync(visibleSingleRow);
					})
					.then(function (visibleSingleRow) {
						Util.assertCompareArray(visibleSingleRow.values, rangeValuesToSetAndGetForRow);
						Util.assertCompareNumeric(1, visibleSingleRow.rowCount, 0, "RowCount");
						Util.assertCompareNumeric(2, visibleSingleRow.columnCount, 0, "ColumnCount");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_RowsGetItemGetParentRange_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [[9, 10]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						var visibleRows = visibleRange.rows;
						var parentRange = visibleRows.getItemAt(3).getRange();
						ctx.load(parentRange);
						return ctx.sync(parentRange);
					})
					.then(function (parentRange) {
						Util.assertCompareValues("Sheet1!A5:B5", parentRange.address, "Parent range Address");
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_RangeView_RowsGetItemBounds_cvt_JScript_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [[9, 10]];
		Util.clearSheetBefore("Sheet1", () => {
			Excel.run(function (ctx) {
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B5");
				range.rowHidden = false;
				range.columnHidden = false;
				range.values = rangeValuesToSet;
				ctx.load(range);
				ctx.workbook.worksheets.getItem("Sheet1").getRange("A3").rowHidden = true;
				var visibleRange = range.getVisibleView();
				ctx.load(visibleRange);
				return ctx.sync()
					.then(function () {
						var visibleRow = visibleRange.rows.getItemAt(10);
						ctx.load(visibleRow);
						return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
					})
					.then(function () {
						range.rowHidden = false;
						range.columnHidden = false;
						return ctx.sync();
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	
	export function test_RangeView_Clear_bvt_JScript_V11() {
		var sheetName = "Sheet1";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(null);
		range.clear(null);
		ctx.sync().then(function () {
			RichApiTest.log.done(true);
		}, reportError);
	}
}
?
module ExcelTest {
	export function test_ROAgave_Read_bvt_JScript_V11() {
		var sheetName = "ROAgave";
		var rangeAddress = "A1:B2";
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, sheetName, () => {
			var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.load(range);
			ctx.sync().then(function () {
				RichApiTest.log.comment("Address:" + range.address);
				RichApiTest.log.done(true);
			}, ExcelTest.reportError);
		});
	}
	export function test_ROAgave_ReadCrossRequest_bvt_JScript_V11() {
		var sheetName = "ROAgave";
		var rangeAddress = "A1:B2";
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, sheetName, () => {
			var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			ctx.trackedObjects.add(range);
			ctx.sync().then(function () {
				ctx.load(range);
				ctx.sync().then(function () {
					RichApiTest.log.comment("Address:" + range.address);
					ctx.trackedObjects.remove(range);
					ctx.sync().then(function () {
						RichApiTest.log.done(true);
					}, ExcelTest.reportError);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_ROAgave_WriteBasicTest_bvt_JScript_V11() {
		var sheetName = "ROAgave";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "=A1"], ["=B1", "=A1+B1"]];
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, sheetName, () => {
			var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			range.values = rangeValuesToSet;
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.accessDenied);
		});
	}
	export function test_ROAgave_WriteHackRequestFlag_bvt_JScript_V11() {
		var sheetName = "ROAgave";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "=A1"], ["=B1", "=A1+B1"]];
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, sheetName, () => {
			var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
			range.values = rangeValuesToSet;
			var pendingRequest: any = (<any>ctx)._pendingRequest;
			if (!pendingRequest) {
				pendingRequest = (<any>ctx).pendingRequest;
			}
			RichApiTest.log.comment("RequestFlag=" + pendingRequest.flags);
		
			
			RichApiTest.log.comment("Reset flag to be none");
			pendingRequest.m_flags = OfficeExtension.ClientRequestFlags.None;
			RichApiTest.log.comment("Verify the flag is none");
			RichApiTest.log.comment("RequestFlag=" + pendingRequest.flags);
			if (pendingRequest.flags != OfficeExtension.ClientRequestFlags.None) {
				RichApiTest.log.fail("The flag is not set to none");
				return;
			}
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.accessDenied);
		});
	}
}
?
module ExcelTest {
	export function test_ROSheet_BasicTest_bvt_JScript_V11() {
		var sheetName = "ROSheet";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "=A1"], ["=B1", "=A1+B1"]];
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = rangeValuesToSet;
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.accessDenied);
	}
}
module ExcelTest {
	export async function test_RichApiEvent_Worksheet$SheetActivated_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			worksheet.load();
			
			eventResult = worksheet.onActivated.add(
				(event) => {
					eventCount++;
					RichApiTest.log.comment("WorksheetActivatedEvent fired - eventCount=" + eventCount);
					return null;
				});
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onActivated._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("activate the last visible sheet");
			var lastsheet = ctx.workbook.worksheets.getLast(true);
			lastsheet.activate();
			await ctx.sync();
			
			RichApiTest.log.comment("activate the first visible sheet");
			worksheet.activate();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 2 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(2000);
			
			Util.assertCompareValues(1, eventCount, "Worksheet activated event should be fired.");
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			
			Util.assertCompareValues(0, worksheet.onActivated._handlers.length, "Event handlers should be empty");
		});
	}
	export async function test_RichApiEvent_Worksheet$SheetDeactivated_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			
			eventResult = worksheet.onDeactivated.add(
				(event) => {
					eventCount++;
					RichApiTest.log.comment("WorksheetDeactivatedEvent fired - eventCount=" + eventCount);
					return null;
				});
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onDeactivated._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("activate the first visible sheet");
			worksheet.activate();
			await ctx.sync();
			
			RichApiTest.log.comment("activate the last visible sheet from the first sheet");
			var lastsheet = ctx.workbook.worksheets.getLast(true);
			lastsheet.activate();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 2 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(2000);
			
			Util.assertCompareValues(1, eventCount, "Worksheet deactivated event should be fired.");
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			
			Util.assertCompareValues(0, worksheet.onDeactivated._handlers.length, "Event handlers should be empty");
		});
	}
	export async function test_RichApiEvent_WorksheetCollection$AddRemoveAddedEvent_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var handlercount = -1;
		var expectedSheetName = "AddedSheet";
		var actualSheetName;
		await Excel.run(async (ctx) => {
			
			var worksheets = ctx.workbook.worksheets;
			eventResult = worksheets.onAdded.add(
				async function onWorksheetAdded(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetAddedEvent fired - eventCount=" + eventCount);
						var addedSheet = ctx.workbook.worksheets.getItem(event.worksheetId);
						addedSheet.load("name");
						await ctx.sync();
						RichApiTest.log.comment("[EventHandler]Record the worksheet name.");
						actualSheetName = addedSheet.name;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheets.onAdded._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Add a worksheet");
			var worksheet = ctx.workbook.worksheets.add(expectedSheetName);
			worksheet.activate();
			await ctx.sync();
		
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			RichApiTest.log.comment("Remove event.");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheets.onAdded._handlers.length;
			RichApiTest.log.comment("Delete the worksheet.");
			worksheet.delete();
			await ctx.sync();
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty");
			Util.assertCompareValues(expectedSheetName, actualSheetName, "The worksheet name should be expected.");
			Util.assertCompareValues(1, eventCount, "WorksheetAdded event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$AddRemoveDataChanged_cvt_JScript_V17(){
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var oldValue;
		var operationAddress = "A1:A1";
		await Excel.run(async(ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			worksheet.activate();
			
			eventResult = worksheet.onDataChanged.add(
				async function onWorksheetDataChanged(event)
				{
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("WorksheetDataChangedEvent fired - eventCount" + eventCount);
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onDataChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Clear the range A1");
			var range = worksheet.getRange(operationAddress);
			range.load("values");
			await ctx.sync();
			oldValue = range.values;
			range.clear();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			
			range = worksheet.getRange(operationAddress);
			range.values = oldValue;
			await ctx.sync();
			
			Util.assertCompareValues(0, worksheet.onDataChanged._handlers.length, "Event handlers should be empty");
			
			Util.assertCompareValues(1, eventCount, "Added event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$DataChangedByCleaningText_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "B3";
		var actualAddress;
		var changeType;
		var handlercount = -1;
		var oldValue;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			worksheet.activate();
			
			eventResult = worksheet.onDataChanged.add(
				async function onWorksheetDataChanged(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetDataChangedEvent fired - eventCount=" + eventCount);
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = event.address;
						RichApiTest.log.comment("[EventHandler]Record the change type.");
						changeType = event.changeType;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onDataChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Clear the range B3");
			var range = worksheet.getRange(expectedAddress);
			range.load("values");
			await ctx.sync();
			oldValue = range.values;
			range.clear();
			await ctx.sync();
			
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onDataChanged._handlers.length;
			
			range = worksheet.getRange(expectedAddress);
			range.values = oldValue;
			await ctx.sync();
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty.");
			Util.assertCompareValues(expectedAddress, actualAddress, "The affected address should be expected.");
			Util.assertCompareValues(Excel.DataChangeType.rangeEdited, changeType, "The changeType should be expected.");
			Util.assertCompareValues(1, eventCount, "DataChanged event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$DataChangedBySettingText_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "B3";
		var actualAddress;
		var changeType;
		var handlercount = -1;
		var oldValue;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			worksheet.activate();
			
			eventResult = worksheet.onDataChanged.add(
				async function onWorksheetDataChanged(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetDataChangedEvent fired - eventCount=" + eventCount);
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = event.address;
						RichApiTest.log.comment("[EventHandler]Record the change type.");
						changeType = event.changeType;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onDataChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Set text value 'abc' to range B3");
			var range = worksheet.getRange(expectedAddress);
			range.load("values");
			await ctx.sync();
			oldValue = range.values;
			range.values = [["abc"]];
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onDataChanged._handlers.length;
			
			range = worksheet.getRange(expectedAddress);
			range.values = oldValue;
			await ctx.sync();
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty.");
			Util.assertCompareValues(expectedAddress, actualAddress, "The affected address should be expected.");
			Util.assertCompareValues(Excel.DataChangeType.rangeEdited, changeType, "The changeType should be expected.");
			Util.assertCompareValues(1, eventCount, "DataChanged event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$DataChangedByInsertingCells_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "B3";
		var actualAddress;
		var changeType;
		var handlercount = -1;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			worksheet.activate();
			
			eventResult = worksheet.onDataChanged.add(
				async function onWorksheetDataChanged(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetDataChangedEvent fired - eventCount=" + eventCount);
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = event.address;
						RichApiTest.log.comment("[EventHandler]Record the change type.");
						changeType = event.changeType;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onDataChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("insert cell in B3");
			var range = worksheet.getRange(expectedAddress);
			range.insert("down");
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onDataChanged._handlers.length;
			
			range = worksheet.getRange(expectedAddress);
			range.delete("up");
			await ctx.sync();
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty.");
			Util.assertCompareValues(expectedAddress, actualAddress, "The affected address should be expected.");
			Util.assertCompareValues(Excel.DataChangeType.cellInserted, changeType, "The changeType should be expected.");
			Util.assertCompareValues(1, eventCount, "Data event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$DataChangedByDeletingCells_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "B3";
		var actualAddress;
		var changeType;
		var handlercount = -1;
		var oldValue;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			worksheet.activate();
			
			eventResult = worksheet.onDataChanged.add(
				async function onWorksheetDataChanged(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetDataChangedEvent fired - eventCount=" + eventCount);
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = event.address;
						RichApiTest.log.comment("[EventHandler]Record the change type.");
						changeType = event.changeType;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onDataChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("delete cell in B3");
			var range = worksheet.getRange(expectedAddress);
			range.load("values");
			await ctx.sync();
			oldValue = range.values;
			range.delete("up");
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onDataChanged._handlers.length;
			
			range = worksheet.getRange(expectedAddress);
			range.insert("down");
			range = worksheet.getRange(expectedAddress);
			range.values = oldValue;
			await ctx.sync();
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty.");
			Util.assertCompareValues(expectedAddress, actualAddress, "The affected address should be expected.");
			Util.assertCompareValues(Excel.DataChangeType.cellDeleted, changeType, "The changeType should be expected.");
			Util.assertCompareValues(1, eventCount, "DataChanged event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$DataChangedByInsertingColumn_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "B:B";
		var actualAddress;
		var changeType;
		var handlercount = -1;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			worksheet.activate();
			
			eventResult = worksheet.onDataChanged.add(
				async function onWorksheetDataChanged(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetDataChangedEvent fired - eventCount=" + eventCount);
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = event.address;
						RichApiTest.log.comment("[EventHandler]Record the change type.");
						changeType = event.changeType;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onDataChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("insert cell in B:B");
			var range = worksheet.getRange(expectedAddress);
			range.insert("right");
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onDataChanged._handlers.length;
			
			var range = worksheet.getRange(expectedAddress);
			range.delete("left");
			await ctx.sync();
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty.");
			Util.assertCompareValues(expectedAddress, actualAddress, "The affected address should be expected.");
			Util.assertCompareValues(Excel.DataChangeType.columnInserted, changeType, "The changeType should be expected.");
			Util.assertCompareValues(1, eventCount, "Data event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$DataChangedByDeletingColumn_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "B:B";
		var actualAddress;
		var changeType;
		var handlercount = -1;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			worksheet.activate();
			var range = worksheet.getRange("B:B");
			range.insert("right");
			await ctx.sync();
			
			eventResult = worksheet.onDataChanged.add(
				async function onWorksheetDataChanged(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetDataChangedEvent fired - eventCount=" + eventCount);
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = event.address;
						RichApiTest.log.comment("[EventHandler]Record the change type.");
						changeType = event.changeType;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onDataChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("delete cell in B3");
			range = worksheet.getRange(expectedAddress);
			range.delete("left");
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onDataChanged._handlers.length;
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty.");
			Util.assertCompareValues(expectedAddress, actualAddress, "The affected address should be expected.");
			Util.assertCompareValues(Excel.DataChangeType.columnDeleted, changeType, "The changeType should be expected.");
			Util.assertCompareValues(1, eventCount, "DataChanged event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$DataChangedByInsertingRow_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "10:10";
		var actualAddress;
		var changeType;
		var handlercount = -1;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			worksheet.activate();
			
			eventResult = worksheet.onDataChanged.add(
				async function onWorksheetDataChanged(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetDataChangedEvent fired - eventCount=" + eventCount);
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = event.address;
						RichApiTest.log.comment("[EventHandler]Record the change type.");
						changeType = event.changeType;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onDataChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("insert a row before 10:10");
			var range = worksheet.getRange(expectedAddress);
			range.insert("down");
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onDataChanged._handlers.length;
			
			range = worksheet.getRange(expectedAddress);
			range.delete("up");
			await ctx.sync();
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty.");
			Util.assertCompareValues(expectedAddress, actualAddress, "The affected address should be expected.");
			Util.assertCompareValues(Excel.DataChangeType.rowInserted, changeType, "The changeType should be expected.");
			Util.assertCompareValues(1, eventCount, "Data event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$DataChangedByDeletingRow_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "10:10";
		var actualAddress;
		var changeType;
		var handlercount = -1;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getFirst(true);
			worksheet.activate();
			
			var range = worksheet.getRange("10:10");
			range.insert("down");
			await ctx.sync();
			
			eventResult = worksheet.onDataChanged.add(
				async function onWorksheetDataChanged(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetDataChangedEvent fired - eventCount=" + eventCount);
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = event.address;
						RichApiTest.log.comment("[EventHandler]Record the change type.");
						changeType = event.changeType;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onDataChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("delete a row before 10:10");
			range = worksheet.getRange(expectedAddress);
			range.delete("up");
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onDataChanged._handlers.length;
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty.");
			Util.assertCompareValues(expectedAddress, actualAddress, "The affected address should be expected.");
			Util.assertCompareValues(Excel.DataChangeType.rowDeleted, changeType, "The changeType should be expected.");
			Util.assertCompareValues(1, eventCount, "DataChanged event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$AddRemoveSelectionChanged_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "Sheet1!B3";
		var actualAddress;
		var handlercount = -1;
		await Excel.run(async(ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem("Sheet1");
			worksheet.activate();
			var range = worksheet.getRange("A1:A1");
			range.select();
			RichApiTest.log.comment("Select A1:A1");
			await ctx.sync();
			
			eventResult = worksheet.onSelectionChanged.add(
				async function onWorksheetSelectionChanged(event)
				{
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]SelectionChangedEvent fired - eventCount=" + eventCount);
						var range = ctx.workbook.worksheets.getItem(event.worksheetId).getRange(event.address);
						range.load();
						await ctx.sync();
						
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = range.address;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onSelectionChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Select another cell");
			var range = ctx.workbook.worksheets.getItem("sheet1").getRange("B3:B3");
			range.select();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("[EventHandler]Remove event.");
			eventResult.remove();
			await ctx.sync();
			
			RichApiTest.log.comment("[EventHandler]Record the count of handlers.");
			handlercount = worksheet.onSelectionChanged._handlers.length;
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty");
			Util.assertCompareValues(expectedAddress, actualAddress, "The event address should be expected.");
			Util.assertCompareValues(1, eventCount, "SelectionChanged event should be fired.");
		});
	}
	export async function test_RichApiEvent_Worksheet$SelectionChangedViaSwitchingSheets_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		await Excel.run(async(ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem("sheet1");
			worksheet.activate();
			var range = worksheet.getRange("A1:A1");
			range.select();
			RichApiTest.log.comment("Select A1:A1");
			await ctx.sync();
			
			eventResult = worksheet.onSelectionChanged.add(
				(event) => {
					eventCount++;
					RichApiTest.log.comment("SelectionChangedEvent fired - eventCount=" + eventCount);
					return null;
				});
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheet.onSelectionChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Switch to [Sheet2] and select new cell");
			var worksheet2 = ctx.workbook.worksheets.getItem("sheet2");
			worksheet2.activate();
			var range1 = worksheet2.getRange("B3:B3");
			range1.select();
			await ctx.sync();
			
			RichApiTest.log.comment("Switch back to original sheet");
			worksheet.activate();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 2 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(2000);
			
			Util.assertCompareValues(0, eventCount, "SelectionChanged event should not be fired.");
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			
			Util.assertCompareValues(0, worksheet.onSelectionChanged._handlers.length, "Event handlers should be empty");
		});
	}
	export async function test_RichApiEvent_WorksheetCollection$AddRemoveActivate_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var handlercount = -1;
		var sheetname = "";
		var sheet1 = "Sheet1";
		var sheet2 = "Sheet2";
		await Excel.run(async(ctx) => {
			var worksheet1 = ctx.workbook.worksheets.getItem(sheet1);
			var worksheet2 = ctx.workbook.worksheets.getItem(sheet2);
			worksheet1.activate();
			
			var worksheets = ctx.workbook.worksheets;
			eventResult = worksheets.onActivated.add(
				async function onWorksheetActivated(event) {
					return await Excel.run(async(ctx) => {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]ActivateEvent fired - eventCount=" + eventCount);
						var worksheet =  ctx.workbook.worksheets.getItem(event.worksheetId);
						worksheet.load("name");
						await ctx.sync();
						
						RichApiTest.log.comment("[EventHandler]Record the worksheet name.");
						sheetname = worksheet.name;
					});
				}
				);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, ctx.workbook.worksheets.onActivated._handlers.length, "The number of event handlers should be 1.");
			
			worksheet2.activate();
			await ctx.sync();
			
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheets.onActivated._handlers.length;
			
			Util.assertCompareValues(1, eventCount, "activate event should be fired.");
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty");
			
			Util.assertCompareValues(sheet2, sheetname, "worksheet name should be 'Sheet2'.");
		});
	}
	export async function test_RichApiEvent_WorksheetCollection$AddRemoveDeactivate_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var handlercount = -1;
		var sheetname = "";
		var sheet1 = "Sheet1";
		var sheet2 = "Sheet2";
		await Excel.run(async(ctx) => {
			var worksheet1 = ctx.workbook.worksheets.getItem(sheet1);
			var worksheet2 = ctx.workbook.worksheets.getItem(sheet2);
			worksheet1.activate();
			
			var worksheets = ctx.workbook.worksheets;
			eventResult = worksheets.onDeactivated.add(
				async function onWorksheetActivated(event) {
					return await Excel.run(async(ctx) => {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]DeactivateEvent fired - eventCount=" + eventCount);
						var worksheet = ctx.workbook.worksheets.getItem(event.worksheetId);
						worksheet.load("name");
						await ctx.sync();
						RichApiTest.log.comment("[EventHandler]Record the worksheet name.");
						sheetname = worksheet.name;
					});
				});
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, ctx.workbook.worksheets.onDeactivated._handlers.length, "The number of event handlers should be 1.");
			
			worksheet2.activate();
			await ctx.sync();
			
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
		
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheets.onActivated._handlers.length;
			
			Util.assertCompareValues(1, eventCount, "deactivate event should be fired.");
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty");
			
			Util.assertCompareValues(sheet1, sheetname, "worksheet name should be 'Sheet1'.");
		});
	}
	export async function test_RichApiEvent_Table$AddRemoveSelectionChanged_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "ExistingTables!D4:D6";
		var actualAddress;
		var handlercount = -1;
		await Excel.run(async(ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem("ExistingTables");
			var table = worksheet.tables.getItem("Table1");
			var range = worksheet.getRange("A1:A1");
			var isInsideTable = false;
			
			worksheet.activate();
			range.select();
			RichApiTest.log.comment("Select A1:A1");
			await ctx.sync();
			
			eventResult = table.onSelectionChanged.add(
				async function onWorksheetSelectionChanged(event)
				{
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]SelectionChangedEvent fired - eventCount=" + eventCount);
						var worksheet = ctx.workbook.worksheets.getItem(event.worksheetId);
						var tableRange = worksheet.getRange(event.address);
						tableRange.load();
						await ctx.sync();
						
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = tableRange.address;
						isInsideTable = event.isInsideTable;
					});
			});
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, table.onSelectionChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Select another range");
			range = worksheet.getRange("D4:D6");
			range.select();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			RichApiTest.log.comment("Remove event.");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onSelectionChanged._handlers.length;
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty");
			Util.assertCompareValues(expectedAddress, actualAddress, "The event address should be expected.");
			Util.assertCompareValues(1, eventCount, "SelectionChanged event should be fired.");
			Util.assertCompareValues(true, isInsideTable, "Selection should be inside the table.");
		});
	}
	export async function test_RichApiEvent_Table$AddRemoveSelectionChangedIntersectedRange_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "ExistingTables!D4:E8";
		var actualAddress;
		var handlercount = -1;
		var isInsideTable = false;
		await Excel.run(async(ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem("ExistingTables");
			var table = worksheet.tables.getItem("Table1");
			var range = worksheet.getRange("A1:A1");
			
			worksheet.activate();
			range.select();
			RichApiTest.log.comment("Select A1:A1");
			await ctx.sync();
			
			eventResult = table.onSelectionChanged.add(
				async function onWorksheetSelectionChanged(event)
				{
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]SelectionChangedEvent fired - eventCount=" + eventCount);
						var worksheet = ctx.workbook.worksheets.getItem(event.worksheetId);
						var tableRange = worksheet.getRange(event.address);
						tableRange.load();
						await ctx.sync();
						
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = tableRange.address;
						isInsideTable = event.isInsideTable;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, table.onSelectionChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Select another range");
			range = worksheet.getRange("D4:F10");
			range.select();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			RichApiTest.log.comment("Remove event.");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onSelectionChanged._handlers.length;
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty");
			Util.assertCompareValues(expectedAddress, actualAddress, "The event address should be expected.");
			Util.assertCompareValues(1, eventCount, "SelectionChanged event should be fired.");
			Util.assertCompareValues(true, isInsideTable, "Selection should be inside the table.");
		});
	}
	export async function test_RichApiEvent_Table$AddRemoveSelectionChangedActiveCellNotInTable_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var actualAddress;
		var handlercount = -1;
		await Excel.run(async(ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem("ExistingTables");
			var table = worksheet.tables.getItem("Table1");
			var range = worksheet.getRange("A1:A1");
			
			worksheet.activate();
			range.select();
			RichApiTest.log.comment("Select A1:A1");
			await ctx.sync();
			
			eventResult = table.onSelectionChanged.add(
				(event) => {
					eventCount++;
					RichApiTest.log.comment("SelectionChangedEvent fired - eventCount=" + eventCount);
					return null;
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, table.onSelectionChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Select another range");
			range = worksheet.getRange("B4:F10");
			range.select();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			Util.assertCompareValues(0, eventCount, "SelectionChanged event should not be fired.");
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			
			Util.assertCompareValues(0, table.onSelectionChanged._handlers.length, "Event handlers should be empty");
		});
	}
	export async function test_RichApiEvent_Table$AddRemoveSelectionChangedJumpOutFromTable_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var handlercount = -1;
		var isInsideTable = true;
		await Excel.run(async(ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem("ExistingTables");
			var table = worksheet.tables.getItem("Table1");
			var range = worksheet.getRange("C4");
			
			worksheet.activate();
			range.select();
			RichApiTest.log.comment("Select C4");
			await ctx.sync();
			
			eventResult = table.onSelectionChanged.add(
				async function onWorksheetSelectionChanged(event)
				{
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]SelectionChangedEvent fired - eventCount=" + eventCount);
						isInsideTable = event.isInsideTable;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, table.onSelectionChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Select another range outside table");
			range = worksheet.getRange("A1");
			range.select();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			RichApiTest.log.comment("Remove event.");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onSelectionChanged._handlers.length;
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty");
			Util.assertCompareValues(1, eventCount, "SelectionChanged event should be fired.");
			Util.assertCompareValues(false, isInsideTable, "Selection should be outside the table.");
		});
	}
	
	
	export async function test_RichApiEvent_TableCollection$AddRemoveDataChangedNotInTable_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var effectedAddress = "B5";
		var handlercount = -1;
		var oldValue;
		await Excel.run(async (ctx) => {
			var worksheet = ctx.workbook.worksheets.getItem("ExistingTables");
			var tables = worksheet.tables;
			
			eventResult = tables.onDataChanged.add(
				async function onWorksheetDataChanged(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetDataChangedEvent fired - eventCount=" + eventCount);
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, tables.onDataChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Clear the range C5");
			var range = worksheet.getRange(effectedAddress);
			range.load("values");
			await ctx.sync();
			oldValue = range.values;
			range.clear();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			
			RichApiTest.log.comment("Remove event");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = tables.onDataChanged._handlers.length;
			
			range = worksheet.getRange(effectedAddress);
			range.values = oldValue;
			await ctx.sync();
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty.");
			Util.assertCompareValues(0, eventCount, "DataChanged event should not be fired.");
		});
	}
	
	export async function test_RichApiEvent_WorksheetCollection$AddRemoveDeletedEvent_cvt_JScript_V18() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var handlercount = -1;
		var sheetName = "DeletedEventSheet";
		var sheetDeletedId;
		var sheetAddedId;
		await Excel.run(async (ctx) => {
			
			var worksheets = ctx.workbook.worksheets;
			eventResult = worksheets.onDeleted.add(
				async function onWorksheetDeleted(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]WorksheetDeletedEvent fired - eventCount=" + eventCount);
						sheetDeletedId = event.worksheetId; 
						await ctx.sync();
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, worksheets.onDeleted._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Add a worksheet");
			var worksheet = ctx.workbook.worksheets.add(sheetName);
			worksheet.activate();
			await ctx.sync();
			sheetAddedId = worksheet.id;
			
			RichApiTest.log.comment("Delete a worksheet");
			worksheet.delete();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			RichApiTest.log.comment("Remove event.");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheets.onAdded._handlers.length;
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty");
			Util.assertCompareValues(sheetDeletedId, sheetAddedId, "The worksheet id should be expected.");
			Util.assertCompareValues(1, eventCount, "WorksheetDeleted event should be fired.");
		});
	}
	export async function test_RichApiEvent_Table$AddRemoveSelectionChangedAcrossWorksheet_cvt_JScript_V17() {
		var eventResult: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		var expectedAddress = "ExistingTables!D4:E8";
		var actualAddress;
		var handlercount = -1;
		await Excel.run(async (ctx) => {
			RichApiTest.log.comment("Activate sheet1");
			var worksheetWithoutTable = ctx.workbook.worksheets.getItem("Sheet1");
			worksheetWithoutTable.activate();
			await ctx.sync();
			var worksheet = ctx.workbook.worksheets.getItem("ExistingTables");
			var table = worksheet.tables.getItem("Table1");
			
			eventResult = table.onSelectionChanged.add(
				async function onWorksheetSelectionChanged(event) {
					return await Excel.run(async function (ctx) {
						eventCount++;
						RichApiTest.log.comment("[EventHandler]SelectionChangedEvent fired - eventCount=" + eventCount);
						var worksheet = ctx.workbook.worksheets.getItem(event.worksheetId);
						var tableRange = worksheet.getRange(event.address);
						tableRange.load();
						await ctx.sync();
						RichApiTest.log.comment("[EventHandler]Record the range address.");
						actualAddress = tableRange.address;
					});
				}
			);
			RichApiTest.log.comment("Add event");
			await ctx.sync();
			
			Util.assertCompareValues(1, table.onSelectionChanged._handlers.length, "The number of event handlers should be 1.");
			
			RichApiTest.log.comment("Switch to ExcestingTable sheet");
			worksheet.activate();
			await ctx.sync();
			
			RichApiTest.log.comment("Select another range");
			var range = worksheet.getRange("D4:F10");
			range.select();
			await ctx.sync();
			RichApiTest.log.comment("Wait for 3 seconds");
			await OfficeExtension.Utility._createTimeoutPromise(3000);
			RichApiTest.log.comment("Remove event.");
			eventResult.remove();
			await ctx.sync();
			RichApiTest.log.comment("Record the count of handlers.");
			handlercount = worksheet.onSelectionChanged._handlers.length;
			
			Util.assertCompareValues(0, handlercount, "Event handlers should be empty");
			Util.assertCompareValues(expectedAddress, actualAddress, "The event address should be expected.");
			Util.assertCompareValues(1, eventCount, "SelectionChanged event should be fired.");
		});
	}
}
?module ExcelTest {
	export function test_Setting_ReadStoredSetting_cvt_JScript_V14() {
		var settingToGet = "SavedValue";
		Excel.run(function (ctx) {
			var setting = ctx.workbook.settings.getItem("SavedSetting");
			ctx.load(setting);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(settingToGet, setting.value);
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Setting_GetCount_cvt_JScript_V14() {
		_injectCollectionCountTest_JS(ctx => ctx.workbook.settings)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_WriteAndReadSetting_cvt_JScript_V14() {
		var settingValue = "NewValue";
		var settingKey = "NewKey";
		Excel.run(function (ctx) {
			ctx.workbook.settings.add(settingKey, settingValue);
			var setting = ctx.workbook.settings.getItem(settingKey);
			ctx.load(setting);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(settingValue, setting.value);
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Setting_WriteTwiceAndReadSetting_cvt_JScript_V14() {
		var settingValue = "NewValue";
		var settingValue2 = "NewValue2";
		var settingKey = "NewKey";
		Excel.run(function (ctx) {
			ctx.workbook.settings.add(settingKey, settingValue);
			var setting = ctx.workbook.settings.getItem(settingKey);
			ctx.load(setting);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(settingValue, setting.value);
					ctx.workbook.settings.add(settingKey, settingValue2);
					ctx.load(setting);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(settingValue2, setting.value);
						})
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_WriteAndDeleteSetting_cvt_JScript_V14() {
		var settingValue = "NewValue";
		var settingKey = "NewKeyToDelete";
		Excel.run(function (ctx) {
			ctx.workbook.settings.add(settingKey, settingValue);
			var setting = ctx.workbook.settings.getItem(settingKey);
			ctx.load(setting);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(settingValue, setting.value);
					setting.delete();
					return ctx.sync()
						.then(function () {
							var settingTryRetrieve = ctx.workbook.settings.getItem(settingKey);
							ctx.load(settingTryRetrieve);
							return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound);
						})
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_ReadMissingKey_cvt_JScript_V14() {
		var settingKey = "MissingKey";
		Excel.run(function (ctx) {
			var setting = ctx.workbook.settings.getItem(settingKey);
			ctx.load(setting);
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound);
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_ReadSNullkey_cvt_JScript_V14() {
		Excel.run(function (ctx) {
			var setting = ctx.workbook.settings.getItemOrNullObject("NotExistingKey");
			ctx.load(setting);
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, setting.isNull);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_ReadAllSettings_cvt_JScript_V14() {
		Excel.run(function (ctx) {
			var settings = ctx.workbook.settings;
			ctx.load(settings);
			return ctx.sync()
				.then(function () {
					for (var i = 0; i < settings.items.length; i++) {
						RichApiTest.log.comment("Setting #" + i + " - Key:'" + settings.items[i].key + "', Value:'" + settings.items[i].value + "'");
					}
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetV1ReadRichString_cvt_JScript_V14() {
		var settingToGet = "StringValue";
		var settingKey = "SetV1SettingString";
		var ctx = new Excel.RequestContext();
		Office.context.document.settings.set(settingKey, settingToGet);
		Util.promisify((callback) => Office.context.document.settings.saveAsync(callback))
			.then(function () {
				var setting = ctx.workbook.settings.getItem(settingKey);
				ctx.load(setting);
				ctx.sync()
					.then(function () {
						Util.assertCompareValues(settingToGet, setting.value);
					})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetV1ReadRichBool_cvt_JScript_V14() {
		var settingToGet = true;
		var settingKey = "SetV1SettingBool";
		var ctx = new Excel.RequestContext();
		Office.context.document.settings.set(settingKey, settingToGet);
		Util.promisify((callback) => Office.context.document.settings.saveAsync(callback))
			.then(function () {
				var setting = ctx.workbook.settings.getItem(settingKey);
				ctx.load(setting);
				ctx.sync()
					.then(function () {
						Util.assertCompareValues(settingToGet, setting.value);
					})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetV1ReadRichNumber_cvt_JScript_V14() {
		var settingToGet = 12345.6;
		var settingKey = "SetV1SettingNumber";
		var ctx = new Excel.RequestContext();
		Office.context.document.settings.set(settingKey, settingToGet);
		Util.promisify((callback) => Office.context.document.settings.saveAsync(callback))
			.then(function () {
				var setting = ctx.workbook.settings.getItem(settingKey);
				ctx.load(setting);
				ctx.sync()
					.then(function () {
						Util.assertCompareValues(settingToGet, setting.value);
					})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetV1ReadRichArray_cvt_JScript_V14() {
		var settingToGet = [1,2];
		var settingKey = "SetV1SettingNumber";
		var ctx = new Excel.RequestContext();
		Office.context.document.settings.set(settingKey, settingToGet);
		Util.promisify((callback) => Office.context.document.settings.saveAsync(callback))
			.then(function () {
				var setting = ctx.workbook.settings.getItem(settingKey);
				ctx.load(setting);
				ctx.sync()
					.then(function () {
						Util.assertCompareArray(settingToGet, setting.value);
					})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetV1ReadRichDateArray_cvt_JScript_V14() {
		var settingToGet = [new Date(), new Date()];
		RichApiTest.log.comment("settingToGet=" + JSON.stringify(settingToGet));
		var settingKey = "SetV1SettingDateArray";
		var ctx = new Excel.RequestContext();
		Office.context.document.settings.set(settingKey, settingToGet);
		Util.promisify((callback) => Office.context.document.settings.saveAsync(callback))
			.then(function () {
				return Util.promisify((callback) => Office.context.document.settings.refreshAsync(callback))
			})
			.then(function () {
				var valueV1 = Office.context.document.settings.get(settingKey);
				RichApiTest.log.comment("valueV1=" + JSON.stringify(valueV1));
				var setting = ctx.workbook.settings.getItem(settingKey);
				ctx.load(setting);
				ctx.sync()
					.then(function () {
						RichApiTest.log.comment("setting.value=" + JSON.stringify(setting.value));
						RichApiTest.Util.assertCompareArray(settingToGet, setting.value);
						RichApiTest.Util.assertCompareArray(settingToGet, valueV1);
					})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetV1ReadRichObject_cvt_JScript_V14() {
		var settingToSet = { foo: "bar" };
		var settingKey = "SetV1SettingNumber";
		var ctx = new Excel.RequestContext();
		Office.context.document.settings.set(settingKey, settingToSet);
		Util.promisify((callback) => Office.context.document.settings.saveAsync(callback))
			.then(function () {
				var setting = ctx.workbook.settings.getItem(settingKey);
				ctx.load(setting);
				ctx.sync()
					.then(function () {
						Util.assertCompareValues("bar", setting.value.foo);
					})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetV1ReadRichDate_cvt_JScript_V14() {
		var settingToSet = new Date();
		var settingKey = "SetV1SettingDate";
		var ctx = new Excel.RequestContext();
		Office.context.document.settings.set(settingKey, settingToSet);
		Util.promisify((callback) => Office.context.document.settings.saveAsync(callback))
			.then(function () {
				var setting = ctx.workbook.settings.getItem(settingKey);
				ctx.load(setting);
				ctx.sync()
					.then(function () {
						RichApiTest.Util.assertCompareValues(settingToSet, setting.value);
					})
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetRichGetV1String_cvt_JScript_V14() {
		var settingValue = "StringValue";
		var settingKey = "SetRichSettingString";
		Excel.run(function (ctx) {
			ctx.workbook.settings.add(settingKey, settingValue);
			return ctx.sync()
			.then(function () {
				return Util.promisify((callback) => Office.context.document.settings.refreshAsync(callback))
			})
			.then(function () {
				Util.assertCompareValues(settingValue, Office.context.document.settings.get(settingKey));
			})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetRichGetV1Bool_cvt_JScript_V14() {
		var settingValue = false;
		var settingKey = "SetRichSettingBool";
		Excel.run(function (ctx) {
			ctx.workbook.settings.add(settingKey, settingValue);
			return ctx.sync()
				.then(function () {
					return Util.promisify((callback) => Office.context.document.settings.refreshAsync(callback))
				})
				.then(function () {
					Util.assertCompareValues(settingValue, Office.context.document.settings.get(settingKey));
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetRichGetV1Number_cvt_JScript_V14() {
		var settingValue = 1234.56;
		var settingKey = "SetRichSettingnumber";
		Excel.run(function (ctx) {
			ctx.workbook.settings.add(settingKey, settingValue);
			return ctx.sync()
				.then(function () {
					return Util.promisify((callback) => Office.context.document.settings.refreshAsync(callback))
				})
				.then(function () {
					Util.assertCompareValues(settingValue, Office.context.document.settings.get(settingKey));
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetRichGetV1Array_cvt_JScript_V14() {
		var settingValue = [123, "ab", new Date()];
		var settingKey = "SetRichSettingArray";
		Excel.run(function (ctx) {
			ctx.workbook.settings.add(settingKey, settingValue);
			return ctx.sync()
				.then(function () {
					return Util.promisify((callback) => Office.context.document.settings.refreshAsync(callback))
				})
				.then(function () {
					RichApiTest.Util.assertCompareArray(settingValue, Office.context.document.settings.get(settingKey));
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetRichGetV1DateArray_cvt_JScript_V14() {
		var settingValue = [new Date(), new Date()];
		var settingKey = "SetRichSettingDateArray";
		Excel.run(function (ctx) {
			ctx.workbook.settings.add(settingKey, settingValue);
			return ctx.sync()
				.then(function () {
					return Util.promisify((callback) => Office.context.document.settings.refreshAsync(callback))
				})
				.then(function () {
					Util.assertCompareArray(settingValue, Office.context.document.settings.get(settingKey));
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetRichGetV1Object_cvt_JScript_V14() {
		var settingValue = { foo: "bar" };
		var settingKey = "SetRichSettingObject";
		Excel.run(function (ctx) {
			ctx.workbook.settings.add(settingKey, settingValue);
			return ctx.sync()
				.then(function () {
					return Util.promisify((callback) => Office.context.document.settings.refreshAsync(callback))
				})
				.then(function () {
					Util.assertCompareValues(settingValue.foo, Office.context.document.settings.get(settingKey).foo);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Setting_SetRichGetV1Date_cvt_JScript_V14() {
		var settingValue = new Date();
		var settingKey = "SetRichSettingDate";
		Excel.run(function (ctx) {
			ctx.workbook.settings.add(settingKey, settingValue);
			return ctx.sync()
				.then(function () {
					return Util.promisify((callback) => Office.context.document.settings.refreshAsync(callback))
				})
				.then(function () {
					var v1Value = Office.context.document.settings.get(settingKey);
					RichApiTest.Util.assertCompareValues(settingValue, v1Value);
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	
	
	
	
	
	
	export function test_HiddenSheet_AddSheetUseThenDelete_cvt_JScript_V11() {
		var strValue = "TestSheetAndUse2";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.sync().then(function () {
			ctx.load(sheet);
			ctx.sync().then(function () {
				RichApiTest.log.comment("Loaded sheet " + sheet.name);
				RichApiTest.log.comment("Added sheet at: " + sheet.position);
				sheet.delete();
				ctx.sync().then(function () {
					RichApiTest.log.done(true);
				}, reportError);
			}, reportError);
		}, reportError);
	};
	export function test_HiddenSheet_GetSheet_cvt_JScript_V11() {
		var sheetName = "Sheet5";
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem(sheetName);
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Loaded sheet " + sheet.name);
			RichApiTest.log.done(true);
		}, ExcelTest.reportError);
	};
	
	export function test_HiddenSheet_MoveSheetGeneral_cvt_JScript_V11() {
		var sheetName = "Sheet5";
		var target = 6;
		var expected = 6;
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem(sheetName);
		ctx.load(sheet);
		ctx.sync().then(function () {
			var position = sheet.position;
			sheet.position = target;
			ctx.load(sheet);
			ctx.sync().then(function () {
				var success = true;
				if (sheet.position != expected) {
					RichApiTest.log.comment("Sheet: " + sheet.name);
					RichApiTest.log.comment("position: " + position);
					RichApiTest.log.comment("Expect sheet at: " + expected);
					RichApiTest.log.comment("Actual sheet at: " + sheet.position);
					success = false;
				} else {
					RichApiTest.log.comment("Sheet: " + sheet.name);
					RichApiTest.log.comment("Moved to: " + sheet.position);
				}
				sheet.position = position; 
				ctx.load(sheet);
				ctx.sync().then(function () {
					if (sheet.position != position) {
						RichApiTest.log.comment("moved to: " + sheet.position);
						RichApiTest.log.comment("should be: " + position);
						RichApiTest.log.comment("Restore failed");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		}, ExcelTest.reportError);
	}
	
	
	
	
	
	
	export function test_HiddenSheet_MoveRightLast_cvt_JScript_V11() {
		Util.moveSheet("Sheet1", -1);
	};
	
	export function test_HiddenSheet_MoveRight1_cvt_JScript_V11() {
		Util.moveSheet("Sheet1", 3);
	};
	
	export function test_HiddenSheet_MoveRightEnd_cvt_JScript_V11() {
		Util.moveSheet("Sheet1", 4);
	};
	
	export function test_HiddenSheet_MoveRightCross1_cvt_JScript_V11() {
		Util.moveSheet("Sheet1", 5);
	};
	
	export function test_HiddenSheet_MoveRightCross2_cvt_JScript_V11() {
		Util.moveSheet("Sheet1", 6);
	};
	
	export function test_HiddenSheet_MoveLeftBegin_cvt_JScript_V11() {
		Util.moveSheet("Sheet5", 0);
	};
	
	export function test_HiddenSheet_MoveLeftCross_cvt_JScript_V11() {
		Util.moveSheet("Sheet5", 1);
	};
	export function test_HiddenSheet_MoveLeftEnd_cvt_JScript_V11() {
		Util.moveSheet("Sheet6", 4);
	};
	export function test_HiddenSheet_MoveLeftLast_cvt_JScript_V11() {
		Util.moveSheet("Sheet5", -1);
	};
	
	
	
	export function test_HiddenSheet_MoveRightStart_cvt_JScript_V11() {
		
		Util.moveSheet("Sheet1", 2);
	};
	
	export function test_HiddenSheet_MoveRightRight_cvt_JScript_V11() {
		
		Util.moveSheet("Sheet1", 1);
	};
	
	export function test_HiddenSheet_MoveLeftStart_cvt_JScript_V11() {
		
		Util.moveSheet("Sheet6", 2);
	};
	
	export function test_HiddenSheet_MoveLeftEnd2_cvt_JScript_V11() {
		
		Util.moveSheet("Sheet6", 3);
	};
    export function test_HiddenSheet_CheckHidden_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet0 = sheets.getItem("Hidden0");
		var sheet1 = sheets.getItem("Sheet1");
		ctx.load(sheet0);
		ctx.load(sheet1);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Sheet 0 is " + sheet0.visibility);
			RichApiTest.log.comment("Sheet 1 is " + sheet1.visibility);
			if (sheet0.visibility != Excel.SheetVisibility.hidden ||
			sheet1.visibility != Excel.SheetVisibility.visible ) {
				RichApiTest.log.done(false);
			} else {
				RichApiTest.log.done(true);
			}
		}, reportError);
	};
	
	export function test_HiddenSheet_CheckVeryHidden_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet2 = sheets.getItem("VeryHidden7");
		ctx.load(sheet2);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Sheet 2 is " + sheet2.visibility);
			if (sheet2.visibility != Excel.SheetVisibility.veryHidden) {
				RichApiTest.log.done(false);
			} else {
				RichApiTest.log.done(true);
			}
		}, reportError);
	};
	export function test_HiddenSheet_AddSheetThenHide_cvt_JScript_V12() {
		var strValue = "TestSheetAndHide";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Sheet created and visibility is '" + sheet.visibility + "'");
			if (sheet.visibility != Excel.SheetVisibility.visible) {
				throw new Error("Sheet visibility not as expected. Expected: '" + Excel.SheetVisibility.visible + "', Actual: '" + sheet.visibility + "'");
			}
			sheet.visibility = Excel.SheetVisibility.hidden;
			ctx.load(sheet);
		})
		.then(ctx.sync).then(function () {
			RichApiTest.log.comment("Sheet visibility now '" + sheet.visibility + "'");
			if (sheet.visibility != Excel.SheetVisibility.hidden) {
				throw new Error("Sheet visibility not as expected. Expected: '" + Excel.SheetVisibility.hidden + "', Actual: '" + sheet.visibility + "'");
			}
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	};
	export function test_HiddenSheet_AddSheetThenVeryHide_cvt_JScript_V12() {
		var strValue = "TestSheetAndVeryHide";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Sheet created and visibility is '" + sheet.visibility + "'");
			if (sheet.visibility != Excel.SheetVisibility.visible) {
				throw new Error("Sheet visibility not as expected. Expected: '" + Excel.SheetVisibility.visible + "', Actual: '" + sheet.visibility + "'");
			}
			sheet.visibility = Excel.SheetVisibility.veryHidden;
			ctx.load(sheet);
		})
		.then(ctx.sync).then(function () {
			RichApiTest.log.comment("Sheet visibility now '" + sheet.visibility + "'");
			if (sheet.visibility != Excel.SheetVisibility.veryHidden) {
				throw new Error("Sheet visibility not as expected. Expected: '" + Excel.SheetVisibility.veryHidden + "', Actual: '" + sheet.visibility + "'");
			}
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	};
}
?module ExcelTest {
	export function test_Worksheet_AddSheet_cvt_JScript_V11() {
		var strValue = "TestSheetAdd";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		var sheet2;
		ctx.load(sheet);
		ctx.sync().then(function () {
			
			sheet2 = ctx.workbook.worksheets.getItem(strValue)
			ctx.load(sheet2);
			return ctx.sync();
		}).then(() => {
			RichApiTest.log.comment("Added sheet " + sheet2.name);
			Util.compare(sheet2.name, strValue);
			sheet2.delete();
			return ctx.sync();
		}).then(() => {
			RichApiTest.log.done(true);
		}, ExcelTest.reportError);
	};
	export function test_Worksheet_AddAndThenActivate_cvt_JScript_V17() {
		Excel.run(function (ctx) {
			var sheet = ctx.workbook.worksheets.add();
			sheet.activate();
			return ctx.sync()
				.then(() => {
					sheet.load();
					return ctx.sync();
				})
				.then(() => {
					sheet.delete();
					return ctx.sync();
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_AddTwoAndThenActivate_cvt_JScript_V17() {
		Excel.run(function (ctx) {
			var sheet1 = ctx.workbook.worksheets.add();
			var sheet2 = ctx.workbook.worksheets.add();
			sheet2.activate();
			return ctx.sync()
				.then(() => {
					sheet2.load();
					return ctx.sync();
				})
				.then(() => {
					sheet2.delete();
					return ctx.sync();
				})
				.then(() => {
					sheet1.delete();
					return ctx.sync();
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_AddSheetNameWithSpace_cvt_JScript_V11() {
		var strValue = "	TestSheetSpace ";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Added sheet " + sheet.name);
			if (sheet.name != strValue) {
				RichApiTest.log.done(false);
			}
			else {
				RichApiTest.log.done(true);
			}
		}, reportError);
	};
	export function test_Worksheet_AddSheetWithLongName_cvt_JScript_V11() {
		var strValue = "TestSheet_1234567890223456789032345678904234567890";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var cSheets;
		sheets.load();
		ctx.sync().then(function () {
			cSheets = sheets.items.length;
			return ctx.sync();
		}).then(() => {
			var sheet = sheets.add(strValue);
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument, null, () => {
				
				sheets.load();
				ctx.sync().then(function () {
					RichApiTest.log.done(Util.compare(sheets.items.length, cSheets));
				}, ExcelTest.reportError);
			});
		}, ExcelTest.reportError);
	};
	export function test_Worksheet_AddDuplicateWorksheetName_cvt_JScript_V11() {
		var strValue = "NamedItems"; 
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var cSheets;
		sheets.load();
		ctx.sync().then(function () {
			cSheets = sheets.items.length;
			return ctx.sync();
		}).then(() => {
			var sheet = sheets.add(strValue);
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemAlreadyExists, null, () => {
				
				sheets.load();
				ctx.sync().then(function () {
					RichApiTest.log.done(Util.compare(sheets.items.length, cSheets));
				}, ExcelTest.reportError);
			});
		}, ExcelTest.reportError);
	};
	export function test_Worksheet_AddDuplicateWorksheetName2_cvt_JScript_V11() {
		var strValue = "ChartSheet"; 
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.add(strValue);
		ctx.load(sheet);
		RichApiTest.log.comment("Adding a sheet with a name duplicate with a non-worksheet should fail.");
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemAlreadyExists);
	};
	export function test_Worksheet_CanDeleteLastWorksheet_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		sheets.getItem("Sheet1").activate();
		sheets.load("name");
		var sheet = sheets.add("TestSheetDelete");
		ctx.sync()
			.then(() => {
				sheet.activate();
				sheet.delete();
				var nowActiveWorkheet = sheets.getActiveWorksheet().load("name")
				return ctx.sync(nowActiveWorkheet);
			})
			.then((nowActiveWorksheet: Excel.Worksheet) => {
				RichApiTest.log.comment("deleted sheet");
				Util.assertCompareValues(sheets.items[sheets.items.length - 1].name, nowActiveWorksheet.name);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	};
	export async function test_Worksheet_Copy$NotSpecified_cvt_JScript_V17() {
		await Excel.run(async(ctx) => {
			var sheets = ctx.workbook.worksheets.load('items/length');
			var sheet1 = sheets.getItem("Sheet1").load('position');
			await ctx.sync();
			var beforeSheetCount = sheets.items.length;
			var copiedSheet = sheets.getItem("SheetToCopy").copy().load('name,position');
			var copiedRange = copiedSheet.getRange("A1:D1").load('values');
			var newRange = copiedSheet.getRange("A2:D2");
			newRange.values = [['Test', 'Set', 'New', 'Range']];
			newRange.load('values');
			sheets.load('items/length');
			await ctx.sync();
			
			Util.assertCompareValues(beforeSheetCount + 1, sheets.items.length);
			Util.assertCompareValues(sheet1.position, copiedSheet.position);
			Util.assertCompareValues("SheetToCopy (2)", copiedSheet.name);
			Util.assertCompareArray([["Hello World", 12.34, true, 12345]], copiedRange.values);
			Util.assertCompareArray([['Test', 'Set', 'New', 'Range']], newRange.values);
			copiedSheet.delete();
		});
	};
	export async function test_Worksheet_Copy$AtBeginning_cvt_JScript_V17() {
		await Excel.run(async(ctx) => {
			var sheets = ctx.workbook.worksheets;
			var sheet1 = sheets.getItem("Sheet1");
			sheet1.load('position');
			await ctx.sync();
			var copiedSheet = sheets.getItem("SheetToCopy").copy(Excel.WorksheetPositionType.beginning);
			copiedSheet.load('name,position');
			var copiedRange = copiedSheet.getRange("A1:D1");
			copiedRange.load('values');
			await ctx.sync();
			Util.assertCompareValues(sheet1.position, copiedSheet.position);
			Util.assertCompareValues("SheetToCopy (2)", copiedSheet.name);
			Util.assertCompareArray([["Hello World", 12.34, true, 12345]], copiedRange.values);
			copiedSheet.delete();
		});
	};
	export async function test_Worksheet_Copy$BeforeSheet_cvt_JScript_V17() {
		await Excel.run(async(ctx) => {
			var sheets = ctx.workbook.worksheets;
			var relativeTo = sheets.getItem("Sheet6");
			relativeTo.load('position');
			await ctx.sync();
			var copiedSheet = sheets.getItem("SheetToCopy").copy(Excel.WorksheetPositionType.before, relativeTo);
			copiedSheet.load('name,position');
			var copiedRange = copiedSheet.getRange("A1:D1");
			copiedRange.load('values');
			await ctx.sync();
			Util.assertCompareValues(relativeTo.position, copiedSheet.position);
			Util.assertCompareValues("SheetToCopy (2)", copiedSheet.name);
			Util.assertCompareArray([["Hello World", 12.34, true, 12345]], copiedRange.values);
			copiedSheet.delete();
		});
	};
	export async function test_Worksheet_Copy$AfterSheet_cvt_JScript_V17() {
		await Excel.run(async(ctx) => {
			var sheets = ctx.workbook.worksheets;
			var relativeTo = sheets.getItem("Sheet5");
			relativeTo.load('position');
			await ctx.sync();
			var copiedSheet = sheets.getItem("SheetToCopy").copy(Excel.WorksheetPositionType.after, relativeTo);
			copiedSheet.load('name,position');
			var copiedRange = copiedSheet.getRange("A1:D1");
			copiedRange.load('values');
			await ctx.sync();
			Util.assertCompareValues(relativeTo.position + 1, copiedSheet.position);
			Util.assertCompareValues("SheetToCopy (2)", copiedSheet.name);
			Util.assertCompareArray([["Hello World", 12.34, true, 12345]], copiedRange.values);
			copiedSheet.delete();
		});
	};
	export async function test_Worksheet_Copy$AtEnd_cvt_JScript_V17() {
		await Excel.run(async(ctx) => {
			var sheets = ctx.workbook.worksheets;
			var sheetAtEnd = sheets.getItem("SheetAtEnd");
			sheetAtEnd.load('position');
			await ctx.sync();
			var copiedSheet = sheets.getItem("SheetToCopy").copy(Excel.WorksheetPositionType.end);
			copiedSheet.load('name,position');
			var copiedRange = copiedSheet.getRange("A1:D1");
			copiedRange.load('values');
			await ctx.sync();
			Util.assertCompareValues(sheetAtEnd.position + 1, copiedSheet.position);
			Util.assertCompareValues("SheetToCopy (2)", copiedSheet.name);
			Util.assertCompareArray([["Hello World", 12.34, true, 12345]], copiedRange.values);
			copiedSheet.delete();
		});
	};
	export function test_Worksheet_AddSheetKeepActiveSheet_cvt_JScript_V11() {
		var sheetName1 = "NamedItems";
		var sheetNameNew = "SheetNew" + Math.random();
		var ctx = new Excel.RequestContext();
		ctx.workbook.worksheets.getItem(sheetName1).activate();
		ctx.sync().then(function () {
			var success = true;
			var sheet = ctx.workbook.worksheets.getActiveWorksheet();
			ctx.load(sheet);
			ctx.sync().then(function () {
				RichApiTest.log.comment("Initial Active Sheet: " + sheet.name);
				if (sheet.name != sheetName1) {
					success = false;
					RichApiTest.log.done(success);
				} else {
					var sheetNew = ctx.workbook.worksheets.add(sheetNameNew);
					var sheet2 = ctx.workbook.worksheets.getActiveWorksheet();
					ctx.load(sheet2);
					ctx.sync().then(function () {
						RichApiTest.log.comment("Active Sheet post add: " + sheet2.name);
						if (sheet2.name != sheetName1) {
							success = false;
						}
						RichApiTest.log.done(success);
					}, reportError);
				}
			}, reportError);
		}, reportError);
	}
	export function test_Worksheet_AddDeleteSheetKeepActiveSheet_cvt_JScript_V11() {
		var sheetName1 = "NamedItems";
		var sheetNameNew = "SheetNew" + Math.random();
		var ctx = new Excel.RequestContext();
		ctx.workbook.worksheets.getItem(sheetName1).activate();
		ctx.sync().then(function () {
			var success = true;
			var sheet = ctx.workbook.worksheets.getActiveWorksheet();
			ctx.load(sheet);
			ctx.sync().then(function () {
				RichApiTest.log.comment("Inital Active Sheet: " + sheet.name);
				if (sheet.name != sheetName1) {
					success = false;
					RichApiTest.log.done(success);
				} else {
					var sheetNew = ctx.workbook.worksheets.add(sheetNameNew);
					sheetNew.delete();
					var sheet2 = ctx.workbook.worksheets.getActiveWorksheet();
					ctx.load(sheet2);
					ctx.sync().then(function () {
						RichApiTest.log.comment("Active Sheet post delete: " + sheet2.name);
						if (sheet2.name != sheetName1) {
							success = false;
						}
						RichApiTest.log.done(success);
					}, reportError);
				}
			}, reportError);
		}, reportError);
	}
	export function test_Worksheet_AddSheetGetPosition_cvt_JScript_V11() {
		var strValue = "TestSheetPosition";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.load(sheets);
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Added sheet at: " + sheet.position);
			RichApiTest.log.comment("sheets count: " + sheets.items.length);
			if (sheet.position < (sheets.items.length - 1)) {
				RichApiTest.log.done(false);
			}
			else {
				RichApiTest.log.done(true);
			}
		}, reportError);
	};
	export function test_Worksheet_AddSheetSetPosition_cvt_JScript_V11() {
		var sheetName1 = "NamedItems";
		var strValue = "TestSheetMove";
		var ctx = new Excel.RequestContext();
		ctx.workbook.worksheets.getItem(sheetName1).activate();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.load(sheets);
		ctx.load(sheet);
		ctx.sync().then(function () {
			if (sheet.position < (sheets.items.length - 1)) {
				RichApiTest.log.done(false);
			}
			else {
				RichApiTest.log.comment("Added sheet at:" + sheet.position);
				sheet.position = 10;
				var sheetActive = ctx.workbook.worksheets.getActiveWorksheet();
				ctx.load(sheet);
				ctx.load(sheetActive);
				ctx.sync().then(function () {
					RichApiTest.log.comment("Moved sheet to:" + sheet.position);
					RichApiTest.log.comment("Active Sheet post move: " + sheetActive.name);
					if (sheet.position != 10 || sheetActive.name != sheetName1) {
						RichApiTest.log.done(false);
					}
					else {
						RichApiTest.log.done(true);
					}
				}, reportError);
			}
		}, reportError);
	};
	export function test_Worksheet_AddSheetEmptyName_cvt_JScript_V11() {
		var strValue = "";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.load(sheets);
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Added sheet: " + sheet.name);
			var index = sheet.name.indexOf("Sheet");
			if (index != 0) {
				RichApiTest.log.done(false);
			}
			else {
				RichApiTest.log.done(true);
			}
		}, reportError);
	};
	export function test_Worksheet_AddSheetNullName_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(null);
		ctx.load(sheets);
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Added sheet: " + sheet.name);
			var index = sheet.name.indexOf("Sheet");
			if (index != 0) {
				RichApiTest.log.done(false);
			}
			else {
				RichApiTest.log.done(true);
			}
		}, reportError);
	};
	export function test_Worksheet_AddSheetAddTable_cvt_JScript_V11() {
		var SHEETNAME = "sheet32";
		var address = SHEETNAME + "!A23:B25";
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.add(SHEETNAME)
		ctx.load(sheet);
		ctx.sync().then(() => {
			var table = ctx.workbook.tables.add(address, true);
			ctx.load(table);
			return ctx.sync();
		}).then(() => {
			sheet.delete();
			return ctx.sync();
		}).then(() => {
			RichApiTest.log.pass("Successfully created a table");
			RichApiTest.log.done(true);
		}, ExcelTest.reportError);
	}
	export function test_Worksheet_RenameDefaultSheet_cvt_JScript_V11() {
		var sheetName1 = "Renamed";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(null);
		sheet.name = sheetName1;
		ctx.load(sheets);
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Added sheet: " + sheet.name);
			if (sheet.name != sheetName1) {
				RichApiTest.log.done(false);
			}
			else {
				RichApiTest.log.done(true);
			}
			sheet.delete();
			ctx.sync().then(function () {
				RichApiTest.log.done(true);
			}, reportError);
		}, reportError);
	};
	export function test_Worksheet_RenameSheetEmpty_cvt_JScript_V11() {
		var sheetName1 = " ";
		var sheetNamePrev = "PrevName" + new Date().getTime();
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(sheetNamePrev);
		sheet.name = sheetName1;
		ctx.load(sheets);
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Added sheet: " + sheet.name);
			if (sheet.name != sheetName1) {
				RichApiTest.log.done(false);
			}
			else {
				RichApiTest.log.done(true);
			}
			sheet.delete();
			ctx.sync().then(function () {
				RichApiTest.log.done(true);
			}, reportError);
		}, reportError);
	};
	export function test_Worksheet_RenameSheetNull_cvt_JScript_V11() {
		var sheetName1 = null;
		var sheetNamePrev = "PrevName" + new Date().getTime();
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(sheetNamePrev);
		sheet.name = sheetName1;
		ctx.load(sheets);
		ctx.load(sheet);
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument);
	};
	export function test_Worksheet_AddSheetUseThenDelete_cvt_JScript_V11() {
		var strValue = "TestSheetAndUse";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.sync().then(function () {
			ctx.load(sheet);
			ctx.sync().then(function () {
				RichApiTest.log.comment("Loaded sheet " + sheet.name);
				sheet.delete();
				ctx.sync().then(function () {
					RichApiTest.log.done(true);
				}, reportError);
			}, reportError);
		}, reportError);
	};
	export function test_Worksheet_AddSheetLoadThatSheetThenDeleteSheet_cvt_JScript_V11() {
		var strSheetName = "Rand" + Math.random();
		strSheetName = strSheetName.replace(".", "");
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.add(strSheetName);
		ctx.load(sheet);
		ctx.sync().then(function () {
			RichApiTest.log.comment("Loaded newly created sheet: '" + sheet.name + "'");
			if (sheet.name != strSheetName) {
				throw new Error("Sheet retrieved after add isn't the same we added. Expected: '" + strSheetName + "', Actual: '" + sheet.name + "'");
			}
			sheet.delete();
		})
		.then(ctx.sync).then(function () {
			RichApiTest.log.comment("Deleted sheet");
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	};
	export function test_Worksheet_AddSheetLoadSheetsThenDeleteSheet_cvt_JScript_V11() {
		var strSheetName = "Rand" + Math.random();
		strSheetName = strSheetName.replace(".", "");
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strSheetName);
		ctx.load(sheets);
		ctx.sync().then(function () {
			var seen = false;
			for (var i = 0; i < sheets.items.length; i++) {
				RichApiTest.log.comment("Sheet " + i + " name=" + sheets.items[i].name);
				if (!seen) {
					seen = sheets.items[i].name == strSheetName;
				}
			}
			sheet.delete();
			ctx.sync().then(function () {
				RichApiTest.log.done(seen);
			}, reportError);
		}, reportError);
	};
	export function test_Worksheet_LoadAllSheets_bvt_JScript_V11() {
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		ctx.load(sheets);
		ctx.sync().then(function () {
			for (var i = 0; i < sheets.items.length; i++) {
				RichApiTest.log.comment("Worksheet number" + i + " name=" + sheets.items[i].name + " position=" + sheets.items[i].position);
			}
				RichApiTest.log.done(true);
		}, reportError);
	};
	export function test_Worksheet_LoadNonWorksheetFails_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext();
		var charts = ctx.workbook.worksheets.getItem("ChartSheet").charts;
		ctx.load(charts);
		Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
	};
	export function test_Worksheet_DeleteOnAccess_cvt_JScript_V11() {
		var strValue = "TestSheetAndDeleteOnAccess";
		var ctx = new Excel.RequestContext();
		var sheets = ctx.workbook.worksheets;
		var sheet = sheets.add(strValue);
		ctx.sync().then(function () {
			ctx.load(sheet);
			ctx.sync().then(function () {
				RichApiTest.log.comment("Loaded sheet " + sheet.name);
				sheet.delete();
				ctx.load(sheet);
				Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemNotFound);
			}, reportError);
		}, reportError);
	};
	export function test_Worksheet_ClearUsedRange_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeValuesToSet = 12345;
		var ctx = new Excel.RequestContext();
		var rangeSet = ctx.workbook.worksheets.getItem(sheetName).getRange("A1:D5");
		rangeSet.values = <any>rangeValuesToSet;
		RichApiTest.log.comment("setting values");
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(null);
		range.clear(null);
		RichApiTest.log.comment("clearing");
		ctx.sync().then(function () {
			var rangeAfter = ctx.workbook.worksheets.getItem(sheetName).getUsedRange();
			ctx.load(rangeAfter);
			ctx.sync().then(function () {
				RichApiTest.log.done(rangeAfter.address == "Sheet1!A1");
			}, reportError);
		}, reportError);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Worksheet_GetItemOrNull_cvt_JScript_V14() {
		Excel.run((ctx) => {
			var sheetExist = ctx.workbook.worksheets.getItemOrNullObject("Sheet1");
			var sheetNotExist = ctx.workbook.worksheets.getItemOrNullObject("NotExistSheet");
			return ctx.sync().then(() => {
				Util.assert(!sheetExist.isNull, "Expect isNull false");
				Util.assert(sheetNotExist.isNull, "Expect isNull true");
			});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetFirstGetLast_cvt_JScript_V15() {
		Excel.run((ctx) => {
			ctx.workbook.worksheets.load("name");
			var supposedFirst = ctx.workbook.worksheets.getFirst(false ).load("name");
			var supposedLast = ctx.workbook.worksheets.getLast(false ).load("name");
			return ctx.sync().then(() => {
				Util.assertCompareValues(ctx.workbook.worksheets.items[0].name, supposedFirst.name);
				Util.assertCompareValues(ctx.workbook.worksheets.items[ctx.workbook.worksheets.items.length - 1].name, supposedLast.name);
			});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetLastWithAdding_cvt_JScript_V15() {
		Excel.run((ctx) => {
			ctx.workbook.worksheets.load("name, visibility");
			var lastVisibleAtBeginning = ctx.workbook.worksheets.getLast(true ).load("name");
			var newlyAdded = ctx.workbook.worksheets.add();
			newlyAdded.load("name");
			var lastAfterAdding = ctx.workbook.worksheets.getLast(false ).load("name");
			newlyAdded.visibility = Excel.SheetVisibility.hidden;
			var lastAfterAddingButHiding = ctx.workbook.worksheets.getLast(false ).load("name");
			var lastVisibleAfterAddingButHiding = ctx.workbook.worksheets.getLast(true ).load("name");
			return ctx.sync().then(() => {
				Util.assertCompareValues(lastVisibleAtBeginning.name, findLastVisible(ctx.workbook.worksheets.items).name);
				Util.assertCompareValues(newlyAdded.name, lastAfterAdding.name);
				Util.assertCompareValues(lastAfterAdding.name,  lastAfterAddingButHiding.name);
				Util.assertCompareValuesNotEqual(lastAfterAddingButHiding.name, lastVisibleAfterAddingButHiding.name);
				Util.assertCompareValues(lastVisibleAtBeginning.name, lastVisibleAfterAddingButHiding.name);
			});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
		function findLastVisible(sheets: Excel.Worksheet[]): Excel.Worksheet {
			
			for (var i = sheets.length - 1; i >= 0; i--) {
				if (sheets[i].visibility === Excel.SheetVisibility.visible) {
					return sheets[i];
				}
			}
		}
	}
	export function test_Worksheet_GetNextGetPreviousAtEnd_cvt_JScript_V15() {
		Excel.run((ctx) => {
			ctx.workbook.worksheets.load("name");
			var lastSheet = ctx.workbook.worksheets.getLast();
			lastSheet.load("name");
			var previousToLastSheet = lastSheet.getPrevious();
			previousToLastSheet.load("name");
			var lastSheetRetrievedByGetNext = previousToLastSheet.getNext();
			lastSheetRetrievedByGetNext.load("name");
			return ctx.sync().then(function () {
				Util.assertCompareValues(ctx.workbook.worksheets.items[ctx.workbook.worksheets.items.length - 2].name, previousToLastSheet.name);
				Util.assertCompareValues(lastSheet.name, lastSheetRetrievedByGetNext.name);
			});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetNextGetPreviousAtBeginning_cvt_JScript_V15() {
		Excel.run((ctx) => {
			var first = ctx.workbook.worksheets.getFirst().load("name");
			var next = first.getNext().load("name");
			var previousToNext = next.getPrevious().load("name");
			var nextAfterPreviousToNext = previousToNext.getNext().load("name");
			return ctx.sync().then(function () {
				Util.assertCompareValues(first.name, previousToNext.name);
				Util.assertCompareValues(next.name, nextAfterPreviousToNext.name);
			});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetNextGetPreviousOffTheEdge_cvt_JScript_V15() {
		Excel.run((ctx) => {
			var afterLast = ctx.workbook.worksheets.getLast().getNextOrNullObject();
			var beforePrevious = ctx.workbook.worksheets.getFirst().getPreviousOrNullObject();
			return ctx.sync().then(function () {
				Util.assertCompareValues(true, afterLast.isNullObject);
				Util.assertCompareValues(true, beforePrevious.isNullObject);
			});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetNextGetLastThenPrevious_cvt_JScript_V17() {
		Excel.run((context) => {
			let latestSheet = context.workbook.worksheets.getLast();
			let previousSheet = latestSheet.getPrevious();
			return context.sync()
				.then(() => {
					previousSheet.load("name");
					return context.sync();
				})
				.then(() => {
					RichApiTest.log.comment("SheetName=" + previousSheet.name);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_Calculate_cvt_JScript_V16() {
		Excel.run((ctx) => {
			var sheet1: Excel.Worksheet;
			var rangeWithFormulas1: Excel.Range;
			var rangeWithoutFormulas1: Excel.Range;
			var rangeAddressWithFormulas1 = "A5:C6";
			var rangeAddressWithoutFormulas1 = "A5:B6";
			var rangeValuesToSetWithFormulas1 = [["100", "200", "=A5+B5"], ["101", "201", "=A6+B6"]];
			var rangeValuesToSetWithoutFormulas1 = [["300", "400"], ["301", "401"]];
			var rangeValuesToGetBeforeCalculate1 = [["300", "400", "300"], ["301", "401", "302"]];
			var rangeValuesToGetAfterCalculate1 = [["300", "400", "700"], ["301", "401", "702"]];
			var sheet2: Excel.Worksheet;
			var rangeWithFormulas2: Excel.Range;
			var rangeWithoutFormulas2: Excel.Range;
			var rangeAddressWithFormulas2 = "A10:C11";
			var rangeAddressWithoutFormulas2 = "A10:B11";
			var rangeValuesToSetWithFormulas2 = [["1000", "2000", "=A10+B10"], ["1001", "2001", "=A11+B11"]];
			var rangeValuesToSetWithoutFormulas2 = [["3000", "4000"], ["3001", "4001"]];
			var rangeValuesToGetBeforeCalculate2 = [["3000", "4000", "3000"], ["3001", "4001", "3002"]];
			var rangeValuesToGetAfterCalculate2 = [["3000", "4000", "3000"], ["3001", "4001", "3002"]];
			var app = ctx.workbook.application;
			app.load("calculationMode");
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(Excel.CalculationMode.automatic, app.calculationMode, "calculation mode");
					
					sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
					sheet2 = ctx.workbook.worksheets.getItem("Sheet2");
					rangeWithFormulas1 = sheet1.getRange(rangeAddressWithFormulas1);
					rangeWithFormulas2 = sheet2.getRange(rangeAddressWithFormulas2);
					rangeWithoutFormulas1 = sheet1.getRange(rangeAddressWithoutFormulas1);
					rangeWithoutFormulas2 = sheet2.getRange(rangeAddressWithoutFormulas2);
					
					rangeWithFormulas1.values = rangeValuesToSetWithFormulas1;
					
					rangeWithFormulas2.values = rangeValuesToSetWithFormulas2;
					return ctx.sync();
				})
				.then(function () {
					
					ctx.workbook.application.suspendApiCalculationUntilNextSync();
					
					rangeWithoutFormulas1.values = rangeValuesToSetWithoutFormulas1;
					
					rangeWithoutFormulas2.values = rangeValuesToSetWithoutFormulas2;
					
					ctx.load(rangeWithFormulas1);
					
					ctx.load(rangeWithFormulas2);
					return ctx.sync();
				})
				.then(function () {
					
					Util.assertCompareArray(rangeWithFormulas1.values, rangeValuesToGetBeforeCalculate1);
					
					Util.assertCompareArray(rangeWithFormulas1.values, rangeValuesToGetBeforeCalculate1);
					
					sheet1.calculate(true);
					return ctx.sync();
				})
				.then(function () {
					
					ctx.load(rangeWithFormulas1);
					
					ctx.load(rangeWithFormulas2);
					return ctx.sync();
				})
				.then(function () {
					
					Util.assertCompareArray(rangeWithFormulas1.values, rangeValuesToGetAfterCalculate1);
					
					
					
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetSetTabColorWithNamedColor_cvt_JScript_V17() {
		var namedColor = "red"; 
		var sheetName = "Sheet1";
		Excel.run((ctx) => {
			var testSheet = ctx.workbook.worksheets.getItem(sheetName);
			
			testSheet.tabColor = namedColor; 
			var refetchedSheet = ctx.workbook.worksheets.getItem(sheetName);
			refetchedSheet.load("tabColor");
			return ctx.sync().then(function () {
				Util.assertCompareValues("#FF0000", refetchedSheet.tabColor); 
			})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetSetTabColorWithHexColor_cvt_JScript_V17() {
		var hexColor = "#00FF00";
		var sheetName = "Sheet1";
		Excel.run((ctx) => {
			var testSheet = ctx.workbook.worksheets.getItem(sheetName);
			
			testSheet.tabColor = hexColor; 
			var refetchedSheet = ctx.workbook.worksheets.getItem(sheetName);
			refetchedSheet.load("tabColor");
			return ctx.sync().then(function () {
				Util.assertCompareValues(hexColor, refetchedSheet.tabColor);
			})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetSetTabColorToNullInvisibleSheet_cvt_JScript_V17() {
		var sheetName = "TabColorHiddenSheetTest";
		Excel.run((ctx) => {
			var testSheet = ctx.workbook.worksheets.getItem(sheetName);
			testSheet.visibility = Excel.SheetVisibility.hidden;
			
			testSheet.tabColor = null; 
			var refetchedSheet = ctx.workbook.worksheets.getItem(sheetName);
			refetchedSheet.load("tabColor");
			return ctx.sync().then(function () {
				Util.assertCompareValues(null, refetchedSheet.tabColor); 
				testSheet.visibility = Excel.SheetVisibility.visible;
				return ctx.sync();
			})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_SetTabColorToNullNoOp_cvt_JScript_V17() {
		var tabColorToSet = "#FF0000"; 
		var sheetName = "Sheet1";
		Excel.run((ctx) => {
			var testSheet = ctx.workbook.worksheets.getItem(sheetName);
			
			testSheet.tabColor = tabColorToSet;
			var refetchedSheet = ctx.workbook.worksheets.getItem(sheetName);
			refetchedSheet.load("tabColor");
			return ctx.sync().then(function () {
				Util.assertCompareValues(tabColorToSet, refetchedSheet.tabColor);
				refetchedSheet.tabColor = null; 
				refetchedSheet = ctx.workbook.worksheets.getItem(sheetName);
				refetchedSheet.load("tabColor");
				return ctx.sync();
			})
			.then(function () {
				Util.assertCompareValues(tabColorToSet, refetchedSheet.tabColor); 
			})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetSetTabColorToAutoColor_cvt_JScript_V17() {
		var emptyAutoColor = ""; 
		var sheetName = "Sheet1";
		Excel.run((ctx) => {
			var testSheet = ctx.workbook.worksheets.getItem(sheetName);
			
			testSheet.tabColor = emptyAutoColor; 
			var refetchedSheet = ctx.workbook.worksheets.getItem(sheetName);
			refetchedSheet.load("tabColor");
			return ctx.sync().then(function () {
				Util.assertCompareValues(emptyAutoColor, refetchedSheet.tabColor);
			})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	export function test_Worksheet_GetSetGridlines_cvt_JScript_V17() {
		Excel.run(function (ctx) {
			var strValue = "TestSheetGridlines";
			var sheets = ctx.workbook.worksheets;
			var sheet = sheets.add(strValue);
			sheets.load();
			sheet.load("gridlines");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(true, sheet.gridlines);
					sheet.gridlines = false;
					sheet.load("gridlines");
					return ctx.sync();
				})
				.then(function () {
					ExcelTest.Util.assertCompareValues(false, sheet.gridlines);
					sheet.gridlines = true;
					sheet.load("gridlines");
					return ctx.sync();
				})
				.then(function () {
					ExcelTest.Util.assertCompareValues(true, sheet.gridlines);
					sheet.delete();
					return ctx.sync();
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetSetHeadings_cvt_JScript_V17() {
		Excel.run(function (ctx) {
			var strValue = "TestSheetHeadings";
			var sheets = ctx.workbook.worksheets;
			var sheet = sheets.add(strValue);
			sheets.load();
			sheet.load("headings");
			return ctx.sync()
				.then(function () {
					ExcelTest.Util.assertCompareValues(true, sheet.headings);
					sheet.headings = false;
					sheet.load("headings");
					return ctx.sync();
				})
				.then(function () {
					ExcelTest.Util.assertCompareValues(false, sheet.headings);
					sheet.headings = true;
					sheet.load("headings");
					return ctx.sync();
				})
				.then(function () {
					ExcelTest.Util.assertCompareValues(true, sheet.headings);
					sheet.delete();
					return ctx.sync();
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_getRangeByIndexes_cvt_JScript_V17() {
		Excel.run(function (ctx) {
			var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet1.getRangeByIndexes(20, 5, 3, 4);
			range.load("address");
			return ctx.sync().then(function () {
				Util.assertCompareValues("Sheet1!F21:I23", range.address);
			})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_getRangeByIndexes$outOfRange_cvt_JScript_V17() {
		Excel.run(function (ctx) {
			var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet1.getRangeByIndexes(-1, 5, 3, 4);
			range.load("address");
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_getRangeByIndexes$zeroSize_cvt_JScript_V17() {
		Excel.run(function (ctx) {
			var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet1.getRangeByIndexes(20, 5, 0, 4);
			range.load("address");
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_getRangeByIndexes$negativeSize_cvt_JScript_V17() {
		Excel.run(function (ctx) {
			var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet1.getRangeByIndexes(20, 5, 3, -2);
			range.load("address");
			return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument);
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export async function test_Worksheet_FreezePanes$FreezeAt_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!B2:E5";
		await Excel.run(async (ctx) => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			sheet.freezePanes.freezeAt(rangeAddress);
			var resultRange = sheet.freezePanes.getLocationOrNullObject();
			resultRange.load("address");
			await ctx.sync();
			ExcelTest.Util.assert(!resultRange.isNullObject);
			ExcelTest.Util.assertCompareValues(rangeAddress, resultRange.address);
			sheet.freezePanes.freezeAt(null);
			resultRange = sheet.freezePanes.getLocationOrNullObject();
			await ctx.sync();
			ExcelTest.Util.assert(resultRange.isNullObject);
		});
	}
	export async function test_Worksheet_FreezePanes$GetLocation$NoFreeze_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		
		await Excel.run(async(ctx) => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			sheet.freezePanes.unfreeze(); 
			await ctx.sync();
			var resultRange = sheet.freezePanes.getLocation();
			resultRange.load("address");
			try {
				await ctx.sync();
				ExcelTest.Util.assert(false); 
			} catch (e) {
				ExcelTest.Util.assert((<OfficeExtension.Error>e).code === Excel.ErrorCodes.itemNotFound);
			}
			var resultRange = sheet.freezePanes.getLocationOrNullObject();
			resultRange.load("address");
			await ctx.sync();
			ExcelTest.Util.assert(resultRange.isNullObject);
		});
	}
	export async function test_Worksheet_FreezePanes$FreezeRows_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		await Excel.run(async (ctx) => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			sheet.freezePanes.unfreeze(); 
			await ctx.sync();
			sheet.freezePanes.freezeRows();
			var resultRange = sheet.freezePanes.getLocationOrNullObject();
			resultRange.load("address");
			await ctx.sync();
			ExcelTest.Util.assert(!resultRange.isNullObject);
			ExcelTest.Util.assertCompareValues("Sheet1!1:1", resultRange.address);
			sheet.freezePanes.freezeRows(0);
			resultRange = sheet.freezePanes.getLocationOrNullObject();
			await ctx.sync();
			ExcelTest.Util.assert(resultRange.isNullObject);
		});
	}
	export async function test_Worksheet_FreezePanes$FreezeRows$InvalidArg_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		await Excel.run(async (ctx) => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			sheet.freezePanes.unfreeze(); 
			await ctx.sync();
			sheet.freezePanes.freezeRows(-1);
			
			try {
				await ctx.sync();
				ExcelTest.Util.assert(false); 
			} catch (e) {
				ExcelTest.Util.assert((<OfficeExtension.Error>e).code === Excel.ErrorCodes.invalidArgument);
			}
			var resultRange = sheet.freezePanes.getLocationOrNullObject();
			resultRange.load("address");
			await ctx.sync();
			ExcelTest.Util.assert(resultRange.isNullObject);
		});
	}
	export async function test_Worksheet_FreezePanes$FreezeColumns_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		await Excel.run(async(ctx) => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			sheet.freezePanes.unfreeze(); 
			await ctx.sync();
			sheet.freezePanes.freezeColumns();
			var resultRange = sheet.freezePanes.getLocationOrNullObject();
			resultRange.load("address");
			await ctx.sync();
			ExcelTest.Util.assert(!resultRange.isNullObject);
			ExcelTest.Util.assertCompareValues("Sheet1!A:A", resultRange.address);
			sheet.freezePanes.freezeColumns(0);
			resultRange = sheet.freezePanes.getLocationOrNullObject();
			await ctx.sync();
			ExcelTest.Util.assert(resultRange.isNullObject);
		});
	}
	
	export async function test_Worksheet_FreezePanes$FreezeColumns$InvalidArg_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		await Excel.run(async(ctx) => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			sheet.freezePanes.unfreeze(); 
			await ctx.sync();
			sheet.freezePanes.freezeColumns(-1);
			
			try {
				await ctx.sync();
				ExcelTest.Util.assert(false); 
			} catch (e) {
				ExcelTest.Util.assert((<OfficeExtension.Error>e).code === Excel.ErrorCodes.invalidArgument);
			}
			var resultRange = sheet.freezePanes.getLocationOrNullObject();
			resultRange.load("address");
			await ctx.sync();
			ExcelTest.Util.assert(resultRange.isNullObject);
		});
	}
	export async function test_Worksheet_FreezePanes$FreezeRowsAndColumns_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		await Excel.run(async (ctx) => {
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			sheet.freezePanes.unfreeze();
			
			await ctx.sync();
			
			sheet.freezePanes.freezeAt("Sheet1!1:5");
			var resultRange = sheet.freezePanes.getLocationOrNullObject();
			resultRange.load("address");
			await ctx.sync();
			ExcelTest.Util.assert(!resultRange.isNullObject);
			ExcelTest.Util.assertCompareValues("Sheet1!1:5", resultRange.address);
			sheet.freezePanes.freezeColumns(3);
			resultRange = sheet.freezePanes.getLocationOrNullObject();
			resultRange.load("address");
			await ctx.sync();
			ExcelTest.Util.assert(!resultRange.isNullObject);
			ExcelTest.Util.assertCompareValues("Sheet1!A1:C5", resultRange.address);
			sheet.freezePanes.freezeRows(10);
			resultRange = sheet.freezePanes.getLocationOrNullObject();
			resultRange.load("address");
			await ctx.sync();
			ExcelTest.Util.assert(!resultRange.isNullObject);
			ExcelTest.Util.assertCompareValues("Sheet1!A1:C10", resultRange.address);
			sheet.freezePanes.unfreeze();
			resultRange = sheet.freezePanes.getLocationOrNullObject();
			await ctx.sync();
			
			ExcelTest.Util.assert(resultRange.isNullObject);
		})
	}
	export async function test_Worksheet_FreezePanes$FreezeAnotherSheet_cvt_JScript_V17() {
		var targetSheetName = "Sheet1";
		var activeSheetName = "Sheet2";
		var freezeLocation = "Sheet1!A3:D5";
		await Excel.run(async(ctx) => {
			var activeSheet = ctx.workbook.worksheets.getItem(activeSheetName);
			var targetSheet = ctx.workbook.worksheets.getItem(targetSheetName);
			
			activeSheet.freezePanes.unfreeze();
			targetSheet.freezePanes.unfreeze();
			activeSheet.activate();
			await ctx.sync();
			
			targetSheet.freezePanes.freezeAt(freezeLocation);
			var activeResultRange = activeSheet.freezePanes.getLocationOrNullObject();
			var targetResultRange = targetSheet.freezePanes.getLocationOrNullObject();
			targetResultRange.load("address");
			var newActiveSheet = ctx.workbook.worksheets.getActiveWorksheet();
			newActiveSheet.load("name");
			await ctx.sync();
			ExcelTest.Util.assert(activeResultRange.isNullObject);
			ExcelTest.Util.assert(!targetResultRange.isNullObject);
			ExcelTest.Util.assertCompareValues(freezeLocation, targetResultRange.address);
			ExcelTest.Util.assertCompareValues(activeSheetName, newActiveSheet.name);
			
			activeSheet.freezePanes.unfreeze();
			activeResultRange = activeSheet.freezePanes.getLocationOrNullObject();
			targetResultRange = targetSheet.freezePanes.getLocationOrNullObject();
			targetResultRange.load("address");
			newActiveSheet = ctx.workbook.worksheets.getActiveWorksheet();
			newActiveSheet.load("name");
			await ctx.sync();
			ExcelTest.Util.assert(activeResultRange.isNullObject);
			ExcelTest.Util.assert(!targetResultRange.isNullObject);
			ExcelTest.Util.assertCompareValues(freezeLocation, targetResultRange.address);
			ExcelTest.Util.assertCompareValues(activeSheetName, newActiveSheet.name);
			
			targetSheet.freezePanes.unfreeze();
			activeResultRange = activeSheet.freezePanes.getLocationOrNullObject();
			targetResultRange = targetSheet.freezePanes.getLocationOrNullObject();
			newActiveSheet = ctx.workbook.worksheets.getActiveWorksheet();
			newActiveSheet.load("name");
			await ctx.sync();
			ExcelTest.Util.assert(activeResultRange.isNullObject);
			ExcelTest.Util.assert(targetResultRange.isNullObject);
			ExcelTest.Util.assertCompareValues(activeSheetName, newActiveSheet.name);
		})
	}
	export async function test_Worksheet_GetStandardWidth_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		await Excel.run(async(ctx) => {
			var worksheetToGet = ctx.workbook.worksheets.getItem(sheetName);
			worksheetToGet.load("standardWidth");
			await ctx.sync();
			ExcelTest.Util.assertCompareValues(8.43, worksheetToGet.standardWidth);
		});
	}
	export async function test_Worksheet_SetStandardWidth_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var expectedWidth = 2.71;
		await Excel.run(async(ctx) => {
			var worksheetToSet = ctx.workbook.worksheets.getItem(sheetName);
			worksheetToSet.standardWidth = expectedWidth;
			var worksheetToGet = ctx.workbook.worksheets.getItem(sheetName);
			worksheetToGet.load("standardWidth");
			await ctx.sync();
			ExcelTest.Util.assertCompareValues(expectedWidth, worksheetToGet.standardWidth);
			await ctx.sync();
			worksheetToSet.standardWidth = 8.43;
		});
	}
	export async function test_Worksheet_SetStandardWidthWithInvalidNegativeValue_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		await Excel.run(async(ctx) => {
			var worksheetToSet = ctx.workbook.worksheets.getItem(sheetName);
			worksheetToSet.standardWidth = -1;
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.generalException);
		});
	}
	export async function test_Worksheet_SetStandardWidthWithInvalidPositiveValue_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		await Excel.run(async(ctx) => {
			var worksheetToSet = ctx.workbook.worksheets.getItem(sheetName);
			worksheetToSet.standardWidth = 256;
			await Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.generalException);
		});
	}
	export async function test_Worksheet_GetStandardHeight_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		await Excel.run(async(ctx) => {
			var worksheetToGet = ctx.workbook.worksheets.getItem(sheetName);
			worksheetToGet.load("standardHeight");
			await ctx.sync();
			ExcelTest.Util.assertCompareValues(15, worksheetToGet.standardHeight);
		});
	}
}
?module ExcelTest {
    export async function test_SSO_GetAccessToken_cvt_JScript_V17() {
        return ExcelTest.Util.promisify(function (callback) {
            if ((<any>window).Office.context.requirements.isSetSupported("IdentityAPI", 1.1)) {
                Office.context.auth.getAccessTokenAsync({ forceConsent: false, forceAddAccount: false }, callback);
            } else {
                RichApiTest.log.comment("Single signon is not enabled on this platform");
                RichApiTest.log.done(true);
            }
        })
            .then(function (value) {
                Util.assert(value !== null || value !== undefined || value == "");
                RichApiTest.log.comment(value.toString());
            })
            .then(ExcelTest.pass)
    }
    export async function test_SSO_GetGraphFileData_cvt_JScript_V17() {
        return ExcelTest.Util.promisify(function (callback) {
            if ((<any>window).Office.context.requirements.isSetSupported("IdentityAPI", 1.1)) {
                Office.context.auth.getAccessTokenAsync({ forceConsent: false, forceAddAccount: false }, callback);
            }
            else {
                RichApiTest.log.comment("Single signon is not enabled on this platform");
                RichApiTest.log.done(true);
            }
        })
            .then(function (accessToken: string) {
                let requestInfo = RichApiTest.SSOUtility.getSSORequestInfo(accessToken);
                return RichApiTest.RestUtility.invoke(requestInfo);
            })
            .then(function (resp) {
                let response = resp.body;
                var agsUrlPrefix = "https://graph.microsoft.com/v1.0";
                var requestHeaders: { [headerName: string]: string } = { Authorization: "Bearer " + response };
                var requestInfo: RichApiTest.RestRequestInfo = {
                    url: agsUrlPrefix + "/me/drive/root/children",
                    method: RichApiTest.RestUtility.httpMethodGet,
                    headers: requestHeaders
                };
                return RichApiTest.RestUtility.invoke(requestInfo);
            })
            .then((resp: RichApiTest.RestResponseInfo) => {
                RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
                var v = JSON.parse(resp.body);
                for (var i = 0; i < v.value.length; i++) {
                    var name: string = v.value[i].name;
                    RichApiTest.log.comment("FileName: " + name);
                }
            })
            .then(ExcelTest.pass)
            .catch(function (errorInfo: Error) {
                RichApiTest.log.comment("See the following link for KNOWN issues that can cause test to fail");
                RichApiTest.log.comment("https://aka.ms/l9ykx7");
                throw errorInfo;
            })
    }
}?module ExcelTest {
	export module SortUtil {
		export var sheetName = "SortFilter";
		export var tableName = "Table3";
		export var singleColumnDataset = [[54], [23], [84], [65], [21], [2]];
		export var singleColumnLetterDataset = [["aA"], ["Aa"], ["Bb"], ["bB"], ["CC"], ["cc"]];
		export var singleRowDataset = [[46, 65, 3, 14, 845]];
		export var twoColumnDataset = [[54, 91], [23, 24], [84, 7], [65, 24], [21, 13], [2, 76]];
		export var tableDataset = [[45, 94, "aA"], [67, 782, "Aa"], [67, 12, "Bb"], [18, 12, "bB"], [45, 34, "CC"], [37, 41, "cc"]];
	}
	export function test_SortFilter_SortRangeBasic_bvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var range = worksheet.getRange("A1:A6");
		range.values = ExcelTest.SortUtil.singleColumnDataset;
		range.sort.apply([
			{
				key: 0
			},
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[84], [65], [54], [23], [21], [2]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeAscending_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var range = worksheet.getRange("A1:A6");
		range.values = ExcelTest.SortUtil.singleColumnDataset;
		range.sort.apply([
			{
				key: 0,
				ascending: true,
			},
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[2], [21], [23], [54], [65], [84]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeHasHeader_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var range = worksheet.getRange("A1:A6");
		range.values = ExcelTest.SortUtil.singleColumnDataset;
		range.sort.apply([
			{
				key: 0,
			},
		], false, true);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[54], [84], [65], [23], [21], [2]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeAscendingHasHeader_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var range = worksheet.getRange("A1:A6");
		range.values = ExcelTest.SortUtil.singleColumnDataset;
		range.sort.apply([
			{
				key: 0,
				ascending: true,
			},
		], false, true);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[54], [2], [21], [23], [65], [84]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeMatchCase_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var range = worksheet.getRange("A1:A6");
		range.values = ExcelTest.SortUtil.singleColumnLetterDataset;
		range.sort.apply([
			{
				key: 0,
				ascending: true
			},
		], true);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [["aA"], ["Aa"], ["bB"], ["Bb"], ["cc"], ["CC"]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeColumn_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var range = worksheet.getRange("A1:E1");
		range.values = ExcelTest.SortUtil.singleRowDataset;
		range.sort.apply([
			{
				key: 0,
				ascending: true
			},
		], false, false, Excel.SortOrientation.columns);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[3, 14, 46, 65, 845]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeMultiple_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var range = worksheet.getRange("A1:B6");
		range.values = ExcelTest.SortUtil.twoColumnDataset;
		range.sort.apply([
			{
				key: 1,
				ascending: true
			},
			{
				key: 0,
				ascending: false
			},
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[84, 7], [21, 13], [65, 24], [23, 24], [2, 76], [54, 91]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeCellColor_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var range = worksheet.getRange("A1:A6");
		range.format.fill.clear();
		range.values = ExcelTest.SortUtil.singleColumnDataset;
		range.getCell(0, 0).format.fill.color = "#0000FF";
		range.getCell(3, 0).format.fill.color = "Tomato";
		range.getCell(4, 0).format.fill.color = "PapayaWhip";
		range.sort.apply([
			{
				key: 0,
				sortOn: Excel.SortOn.cellColor,
				color: "#0000FF",
			},
			{
				key: 0,
				sortOn: Excel.SortOn.cellColor,
				color: "Tomato",
				ascending: true
			},
			{
				key: 0,
				sortOn: Excel.SortOn.cellColor,
				color: "PapayaWhip",
				ascending: true
			},
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[65], [21], [23], [84], [2], [54]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeFontColor_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var range = worksheet.getRange("A1:A6");
		range.format.font.color = "black";
		range.values = ExcelTest.SortUtil.singleColumnDataset;
		range.getCell(0, 0).format.font.color = "CornflowerBlue";
		range.getCell(3, 0).format.font.color = "FireBrick";
		range.getCell(4, 0).format.font.color = "Peru";
		range.sort.apply([
			{
				key: 0,
				sortOn: Excel.SortOn.fontColor,
				color: "CornflowerBlue",
			},
			{
				key: 0,
				sortOn: Excel.SortOn.fontColor,
				color: "FireBrick",
				ascending: true
			},
			{
				key: 0,
				sortOn: Excel.SortOn.fontColor,
				color: "Peru",
				ascending: true
			},
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[65], [21], [23], [84], [2], [54]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeIcon_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var range = worksheet.getRange("A11:A16");
		range.sort.apply([
			{
				key: 0,
				sortOn: Excel.SortOn.icon,
				icon: Excel.icons.fiveArrows.yellowSideArrow,
				ascending: true
			},
			{
				key: 0,
				sortOn: Excel.SortOn.icon,
				icon: Excel.icons.fiveArrows.yellowUpInclineArrow,
				ascending: true
			},
			{
				key: 0,
				sortOn: Excel.SortOn.value,
				ascending: true
			},
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[485], [546], [123], [213], [656], [789]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export async function test_SortFilter_SortTableEmptyCondition_cvt_JScript_V12() {
		await Excel.run(async(ctx) => {
			const table = ctx.workbook.tables.getItem(ExcelTest.SortUtil.tableName);
			const tableDataRange = table.getDataBodyRange().load('values');
			await ctx.sync();
			const originalValues = tableDataRange.values;
			table.sort.clear();
			table.sort.reapply();
			tableDataRange.load('values');
			await ctx.sync();
			Util.assertCompareArray(originalValues, tableDataRange.values);
		});
	};
	export function test_SortFilter_SortTableBasic_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		table.sort.apply([
			{
				key: 0,
			},
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[67, 782, "Aa"],
					[67, 12, "Bb"],
					[45, 94, "aA"],
					[45, 34, "CC"],
					[37, 41, "cc"],
					[18, 12, "bB"]] )) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableAscending_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		table.sort.apply([
			{
				key: 1,
				ascending: true
			},
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[67, 12, "Bb"],
					[18, 12, "bB"],
					[45, 34, "CC"],
					[37, 41, "cc"],
					[45, 94, "aA"],
					[67, 782, "Aa"]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableMatchCase_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		table.sort.apply([
			{
				key: 2,
				ascending: true
			},
		], true);
		range.load("values");
		table.sort.load("matchCase");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[45, 94, "aA"],
					[67, 782, "Aa"],
					[18, 12, "bB"],
					[67, 12, "Bb"],
					[37, 41, "cc"],
					[45, 34, "CC"]])) {
					throw new Error("Range was not sorted as expected");
				}
				if (!Util.compare(table.sort.matchCase, true)) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableMultipleSortLevel_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		table.sort.apply([
			{
				key: 0,
				ascending: true
			},
			{
				key: 1,
				ascending: false
			},
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[18, 12, "bB"],
					[37, 41, "cc"],
					[45, 94, "aA"],
					[45, 34, "CC"],
					[67, 782, "Aa"],
					[67, 12, "Bb"]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableFontColor_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		range.format.font.color = "black";
		range.getCell(0, 0).format.font.color = "SteelBlue";
		range.getCell(3, 0).format.font.color = "Chartreuse";
		range.getCell(4, 0).format.font.color = "Bisque";
		table.sort.apply([
			{
				key: 0,
				sortOn: Excel.SortOn.fontColor,
				color: "SteelBlue",
			},
			{
				key: 0,
				sortOn: Excel.SortOn.fontColor,
				color: "Chartreuse",
				ascending: true
			},
			{
				key: 0,
				sortOn: Excel.SortOn.fontColor,
				color: "Bisque",
				ascending: true
			}
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[18, 12, "bB"],
					[45, 34, "CC"],
					[67, 782, "Aa"],
					[67, 12, "Bb"],
					[37, 41, "cc"],
					[45, 94, "aA"]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableCellColor_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		range.format.fill.clear();
		range.format.fill.color = "white";
		range.getCell(0, 0).format.fill.color = "BurlyWood";
		range.getCell(3, 0).format.fill.color = "Crimson";
		range.getCell(4, 0).format.fill.color = "Moccasin";
		table.sort.apply([
			{
				key: 0,
				sortOn: Excel.SortOn.cellColor,
				color: "BurlyWood",
			},
			{
				key: 0,
				sortOn: Excel.SortOn.cellColor,
				color: "Crimson",
				ascending: true
			},
			{
				key: 0,
				sortOn: Excel.SortOn.cellColor,
				color: "Moccasin",
				ascending: true
			}
		]);
		range.load("values");
		ctx.sync()
			.then(function () {
				if (!Util.compareArray(range.values, [[18, 12, "bB"],
					[45, 34, "CC"],
					[67, 782, "Aa"],
					[67, 12, "Bb"],
					[37, 41, "cc"],
					[45, 94, "aA"]])) {
					throw new Error("Range was not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Style_CreateStyle_cvt_JScript_V17() {
		Excel.run(ctx => {
			ctx.workbook.styles.add('New Style');
			ctx.workbook.styles.getItem('New Style').orientation = 37;
			var newStyle = ctx.workbook.styles.getItem('New Style');
			ctx.load(newStyle)
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(37, newStyle.orientation);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_ApplyStyle_cvt_JScript_V17() {
		Excel.run(ctx => {
			var worksheet = ctx.workbook.worksheets.getActiveWorksheet();
			ctx.load(worksheet);
			worksheet.getRange("A1:A1").style = 'Style 1';
			worksheet.getRange("A1:A1").format.verticalAlignment = 'Justify';
			var range = worksheet.getRange("A1:A1");
			ctx.load(range);
			ctx.load(range.format);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues('Style 1', range.style);
					ExcelTest.Util.assertCompareValues(19, range.format.textOrientation);
					ExcelTest.Util.assertCompareValues('Justify', range.format.verticalAlignment);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_ApplyBuiltInStyle_cvt_JScript_V17() {
		Excel.run(ctx => {
			var worksheet = ctx.workbook.worksheets.getActiveWorksheet();
			ctx.load(worksheet);
			worksheet.getRange("A1:A1").style = Excel.BuiltInStyle.bad;
			worksheet.getRange("A1:A1").format.verticalAlignment = 'Justify';
			var range = worksheet.getRange("A1:A1");
			ctx.load(range);
			ctx.load(range.format);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(Excel.BuiltInStyle.bad, range.style);
					ExcelTest.Util.assertCompareValues(19, range.format.textOrientation);
					ExcelTest.Util.assertCompareValues('Justify', range.format.verticalAlignment);
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Style_DeleteStyle_cvt_JScript_V17() {
		Excel.run(ctx => {
			var style = ctx.workbook.styles.getItem('New Style');
			ctx.load(style);
			style.delete();
			return ctx.sync()
				.then(() => {
					var style2 = ctx.workbook.styles.getItem('New Style');
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_GetStyleIncludeProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var style = ctx.workbook.styles.getItem('Style 2');
			ctx.load(style);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(true, style.includeAlignment);
					ExcelTest.Util.assertCompareValues(true, style.includeBorder);
					ExcelTest.Util.assertCompareValues(false, style.includeFont);
					ExcelTest.Util.assertCompareValues(true, style.includeNumber);
					ExcelTest.Util.assertCompareValues(false, style.includePatterns);
					ExcelTest.Util.assertCompareValues(false, style.includeProtection);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	
	export function test_Style_GetStyleAlignmentProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var style = ctx.workbook.styles.getItem('Style 1');
			ctx.load(style);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(false, style.addIndent);
					ExcelTest.Util.assertCompareValues('Right', style.horizontalAlignment);
					ExcelTest.Util.assertCompareValues(0, style.indentLevel);
					ExcelTest.Util.assertCompareValues(19, style.orientation);
					ExcelTest.Util.assertCompareValues('RightToLeft', style.readingOrder);
					ExcelTest.Util.assertCompareValues(false, style.shrinkToFit);
					ExcelTest.Util.assertCompareValues('Distributed', style.verticalAlignment);
					ExcelTest.Util.assertCompareValues(true, style.wrapText);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	
	export function test_Style_GetStyleBorderProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var style = ctx.workbook.styles.getItem('Style 1');
			ctx.load(style);
			return ctx.sync()
				.then(() => {
					var diagonalDownBorder = style.borders.getItem('DiagonalDown');
					var diagonalUpBorder = style.borders.getItem('DiagonalUp');
					diagonalDownBorder.load('style');
					diagonalUpBorder.load('style');
					return ctx.sync().then(() => {
						ExcelTest.Util.assertCompareValues('DashDot', diagonalDownBorder.style);
						ExcelTest.Util.assertCompareValues('None', diagonalUpBorder.style);
					})
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	
	export function test_Style_GetStyleFontProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var style = ctx.workbook.styles.getItem('Style 1');
			ctx.load(style);
			style.font.load('bold, italic, name, size');
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(false, style.font.bold);
					ExcelTest.Util.assertCompareValues(true, style.font.italic);
					ExcelTest.Util.assertCompareValues('Arial', style.font.name);
					ExcelTest.Util.assertCompareValues(9.0, style.font.size);
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_GetStyleNumberProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var style = ctx.workbook.styles.getItem('Style 1');
			ctx.load(style);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues("h:mm:ss;@", style.numberFormat);
					ExcelTest.Util.assertCompareValues("h:mm:ss;@", style.numberFormatLocal);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_GetStylePatternsProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var style = ctx.workbook.styles.getItem('Style 1');
			ctx.load(style);
			style.fill.load('color');
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues("#FFC000", style.fill.color);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_GetStyleProtectionProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var style = ctx.workbook.styles.getItem('Style 1');
			ctx.load(style);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(true, style.formulaHidden);
					ExcelTest.Util.assertCompareValues(false, style.locked);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_GetStyleOtherProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var style1 = ctx.workbook.styles.getItem('Style 1');
			var styleNormal = ctx.workbook.styles.getItem('Normal');
			ctx.load(style1);
			ctx.load(styleNormal);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(false, style1.builtIn);
					ExcelTest.Util.assertCompareValues('Style 1', style1.name);
					ExcelTest.Util.assertCompareValues(true, styleNormal.builtIn);
					ExcelTest.Util.assertCompareValues('Normal', styleNormal.name);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_PutStyleIncludeProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var styleToModify = ctx.workbook.styles.getItem('Test Style');
			ctx.load(styleToModify);
			styleToModify.includeAlignment = false;
			styleToModify.includeBorder = false;
			styleToModify.includeFont = true;
			styleToModify.includeNumber = false;
			styleToModify.includePatterns = true;
			styleToModify.includeProtection = true;
			var style = ctx.workbook.styles.getItem('Test Style');
			ctx.load(style);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(false, style.includeAlignment);
					ExcelTest.Util.assertCompareValues(false, style.includeBorder);
					ExcelTest.Util.assertCompareValues(true, style.includeFont);
					ExcelTest.Util.assertCompareValues(false, style.includeNumber);
					ExcelTest.Util.assertCompareValues(true, style.includePatterns);
					ExcelTest.Util.assertCompareValues(true, style.includeProtection);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_PutStyleAlignmentProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var styleToModify = ctx.workbook.styles.getItem('Test Style');
			ctx.load(styleToModify);
			styleToModify.addIndent = false;
			styleToModify.horizontalAlignment = 'Right';
			styleToModify.indentLevel = 0;
			styleToModify.orientation = 19;
			styleToModify.readingOrder = 'RightToLeft';
			styleToModify.shrinkToFit = false;
			styleToModify.verticalAlignment = 'Distributed';
			styleToModify.wrapText = true;
			var style = ctx.workbook.styles.getItem('Test Style');
			ctx.load(style);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(false, style.addIndent);
					ExcelTest.Util.assertCompareValues('Right', style.horizontalAlignment);
					ExcelTest.Util.assertCompareValues(0, style.indentLevel);
					ExcelTest.Util.assertCompareValues(19, style.orientation);
					ExcelTest.Util.assertCompareValues('RightToLeft', style.readingOrder);
					ExcelTest.Util.assertCompareValues(false, style.shrinkToFit);
					ExcelTest.Util.assertCompareValues('Distributed', style.verticalAlignment);
					ExcelTest.Util.assertCompareValues(true, style.wrapText);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_PutStyleBorderProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var styleToModify = ctx.workbook.styles.getItem('Test Style');
			ctx.load(styleToModify);
			ctx.load(styleToModify.borders);
			var diagonalDownBorderToModify = styleToModify.borders.getItem('DiagonalDown');
			diagonalDownBorderToModify.style = 'DashDot';
			var edgeTopBorderToModify = styleToModify.borders.getItem('EdgeTop');
			edgeTopBorderToModify.style = 'Dot';
			var style = ctx.workbook.styles.getItem('Test Style');
			ctx.load(style);
			ctx.load(style.borders);
			var diagonalDownBorder = style.borders.getItem('DiagonalDown');
			ctx.load(diagonalDownBorder);
			var edgeTopBorder = style.borders.getItem('EdgeTop');
			edgeTopBorder.style = 'Dot';
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues('DashDot', diagonalDownBorder.style);
					ExcelTest.Util.assertCompareValues('Dot', edgeTopBorder.style);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_PutStyleFontProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var styleToModify = ctx.workbook.styles.getItem('Test Style');
			ctx.load(styleToModify);
			ctx.load(styleToModify.font);
			styleToModify.font.bold = false;
			styleToModify.font.italic = true;
			styleToModify.font.name = 'Arial';
			styleToModify.font.size = 9.0;
			var style = ctx.workbook.styles.getItem('Test Style');
			ctx.load(style);
			ctx.load(style.font);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(false, style.font.bold);
					ExcelTest.Util.assertCompareValues(true, style.font.italic);
					ExcelTest.Util.assertCompareValues('Arial', style.font.name);
					ExcelTest.Util.assertCompareValues(9.0, style.font.size);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_PutStyleNumberProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var styleToModify = ctx.workbook.styles.getItem('Test Style');
			ctx.load(styleToModify);
			styleToModify.numberFormat = 'h:mm:ss;@';
			var style = ctx.workbook.styles.getItem('Test Style');
			ctx.load(style);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues('h:mm:ss;@', style.numberFormat);
					ExcelTest.Util.assertCompareValues('h:mm:ss;@', style.numberFormatLocal);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_PutStylePatternsProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var styleToModify = ctx.workbook.styles.getItem('Test Style');
			ctx.load(styleToModify);
			ctx.load(styleToModify.fill);
			styleToModify.fill.color = '#FFC000';
			var style = ctx.workbook.styles.getItem('Test Style');
			ctx.load(style);
			ctx.load(style.fill);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues('#FFC000', style.fill.color);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Style_PutStyleProtectionProperties_cvt_JScript_V17() {
		Excel.run(ctx => {
			var styleToModify = ctx.workbook.styles.getItem('Test Style');
			ctx.load(styleToModify);
			styleToModify.formulaHidden = true;
			styleToModify.locked = false;
			var style = ctx.workbook.styles.getItem('Test Style');
			ctx.load(style);
			return ctx.sync()
				.then(() => {
					ExcelTest.Util.assertCompareValues(true, style.formulaHidden);
					ExcelTest.Util.assertCompareValues(false, style.locked);
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
}
?
module ExcelTest {
	export function test_SortFilter_FilterCustom_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.custom,
			criterion1: ">60",
			operator: Excel.FilterOperator.and,
			criterion2: "<100"
		});
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, true, true, true, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.custom, filter.criteria.filterOn);
				Util.assertCompareValues(">60", filter.criteria.criterion1);
				Util.assertCompareValues(Excel.FilterOperator.and, filter.criteria.operator);
				Util.assertCompareValues("<100", filter.criteria.criterion2);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterCustomEmpty_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.custom,
			criterion1: ""
		});
		Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidArgument)
			.catch(ExcelTest.reportError)
			.then(ExcelTest.pass);
	}
	export function test_SortFilter_FilterCustomNoText_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.custom,
			criterion1: ">"
		});
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, true, true, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.custom, filter.criteria.filterOn);
				Util.assertCompareValues(">", filter.criteria.criterion1);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterTop_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.topItems,
			criterion1: "3"
		});
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, false, true, true, true, false];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.topItems, filter.criteria.filterOn);
				Util.assertCompareValues("3", filter.criteria.criterion1);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterTopPercent_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.topPercent,
			criterion1: "50"
		});
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, false, true, true, true, false];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.topPercent, filter.criteria.filterOn);
				Util.assertCompareValues("50", filter.criteria.criterion1);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterBottomItems_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.bottomItems,
			criterion1: "3"
		});
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, false, false, false, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.bottomItems, filter.criteria.filterOn);
				Util.assertCompareValues("3", filter.criteria.criterion1);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterBottomPercent_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.bottomPercent,
			criterion1: "50"
		});
		filter.load('criteria');
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, false, false, false, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.bottomPercent, filter.criteria.filterOn);
				Util.assertCompareValues("50", filter.criteria.criterion1);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterCellColor_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		range.format.fill.color = "white";
		range.getCell(0, 0).format.fill.color = "BurlyWood";
		range.getCell(3, 0).format.fill.color = "Crimson";
		range.getCell(4, 0).format.fill.color = "Moccasin";
		var filter = table.columns.getItemAt(0).filter;
		filter.apply({
			filterOn: Excel.FilterOn.cellColor,
			color: "crimson"
		});
		filter.load('criteria');
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, true, false, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.cellColor, filter.criteria.filterOn);
				Util.assertCompareValues("#DC143C", filter.criteria.color);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterFontColor_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		range.format.font.color = "black";
		range.getCell(0, 0).format.font.color = "SteelBlue";
		range.getCell(3, 0).format.font.color = "Chartreuse";
		range.getCell(4, 0).format.font.color = "Bisque";
		var filter = table.columns.getItemAt(0).filter;
		filter.apply({
			filterOn: Excel.FilterOn.fontColor,
			color: "Chartreuse"
		});
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, true, false, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.fontColor, filter.criteria.filterOn);
				Util.assertCompareValues("#7FFF00", filter.criteria.color);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterDynamic_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.dynamic,
			dynamicCriteria: Excel.DynamicFilterCriteria.aboveAverage
		});
		filter.load('criteria');
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, false, true, true, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.dynamic, filter.criteria.filterOn);
				Util.assertCompareValues(Excel.DynamicFilterCriteria.aboveAverage, filter.criteria.dynamicCriteria);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterDynamicDate_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem("Table10");
		table.clearFilters();
		table.sort.clear();
		var date = new Date();
		var range = table.getDataBodyRange();
		
		range.getCell(0,1).values = [[(date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear()]];
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.dynamic,
			dynamicCriteria: Excel.DynamicFilterCriteria.today
		});
		filter.load('criteria');
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, true, true, true, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.dynamic, filter.criteria.filterOn);
				Util.assertCompareValues(Excel.DynamicFilterCriteria.today, filter.criteria.dynamicCriteria);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterValuesStringOnly_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filterValues = ['782', '12', '94'];
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.values,
			values: filterValues
		});
		filter.load('criteria');
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, false, false, false, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.values, filter.criteria.filterOn);
				var filterValuesOk = filter.criteria.values.every((val) => {
					return filterValues.indexOf(<any>val) != -1;
				});
				if (!filterValuesOk) {
					throw new Error("Filter values don't match expected values. Expected :'" + JSON.stringify(filterValues) + "'. Got :'" + JSON.stringify(filter.criteria.values) + "'.");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterDatesOnly_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem("Table10");
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		var filterValues = [{ date: "2009-12-30", specificity: Excel.FilterDatetimeSpecificity.day }];
		var filter = table.columns.getItemAt(1).filter;
		filter.apply({
			filterOn: Excel.FilterOn.values,
			values: filterValues
		});
		filter.load('criteria');
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, false, true, true, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.values, filter.criteria.filterOn);
				var filterDateTime = <Excel.FilterDatetime>filter.criteria.values[0];
				Util.assertCompareValues(filterDateTime.date, "2009-12-30");
				Util.assertCompareValues(filterDateTime.specificity, Excel.FilterDatetimeSpecificity.day);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterIcon_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem("Table10");
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		var filter = table.columns.getItemAt(0).filter;
		filter.apply({
			filterOn: Excel.FilterOn.icon,
			icon: Excel.icons.fiveArrows.yellowDownInclineArrow
		});
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, true, true, true, false];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.icon, filter.criteria.filterOn);
				Util.assertCompareValues(Excel.IconSet.fiveArrows, filter.criteria.icon.set);
				Util.assertCompareValues(Excel.icons.fiveArrows.yellowDownInclineArrow.index, filter.criteria.icon.index);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterNone_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		table.columns.getItemAt(1).filter.apply({
			filterOn: Excel.FilterOn.custom,
			criterion1: ">60",
			operator: Excel.FilterOperator.or,
			criterion2: "<100"
		});
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, false, false, false, false, false];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterClear_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		table.columns.getItemAt(1).filter.apply({
			filterOn: Excel.FilterOn.topItems,
			criterion1: "3"
		});
		table.clearFilters();
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, false, false, false, false, false];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterHelperTopItems_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.applyTopItemsFilter(3);
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, false, true, true, true, false];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.topItems, filter.criteria.filterOn);
				Util.assertCompareValues("3", filter.criteria.criterion1);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterHelperTopPercent_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.applyTopPercentFilter(50);
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, false, true, true, true, false];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.topPercent, filter.criteria.filterOn);
				Util.assertCompareValues("50", filter.criteria.criterion1);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterHelperBottomItems_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.applyBottomItemsFilter(3);
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, false, false, false, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.bottomItems, filter.criteria.filterOn);
				Util.assertCompareValues("3", filter.criteria.criterion1);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterHelperBottomPercent_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.applyBottomPercentFilter(50);
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, false, false, false, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.bottomPercent, filter.criteria.filterOn);
				Util.assertCompareValues("50", filter.criteria.criterion1);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterHelperCellColor_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		range.format.fill.color = "white";
		range.getCell(0, 0).format.fill.color = "BurlyWood";
		range.getCell(3, 0).format.fill.color = "Crimson";
		range.getCell(4, 0).format.fill.color = "Moccasin";
		var filter = table.columns.getItemAt(0).filter;
		filter.applyCellColorFilter("crimson");
		filter.load('criteria');
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, true, false, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.cellColor, filter.criteria.filterOn);
				Util.assertCompareValues("#DC143C", filter.criteria.color);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterHelperCustom_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.applyCustomFilter(">60", "<100", Excel.FilterOperator.and);
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, true, true, true, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.custom, filter.criteria.filterOn);
				Util.assertCompareValues(">60", filter.criteria.criterion1);
				Util.assertCompareValues(Excel.FilterOperator.and, filter.criteria.operator);
				Util.assertCompareValues("<100", filter.criteria.criterion2);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterHelperDynamic_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filter = table.columns.getItemAt(1).filter;
		filter.applyDynamicFilter(Excel.DynamicFilterCriteria.aboveAverage);
		filter.load('criteria');
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, false, true, true, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.dynamic, filter.criteria.filterOn);
				Util.assertCompareValues(Excel.DynamicFilterCriteria.aboveAverage, filter.criteria.dynamicCriteria);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterHelperFontColor_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		range.format.font.color = "black";
		range.getCell(0, 0).format.font.color = "SteelBlue";
		range.getCell(3, 0).format.font.color = "Chartreuse";
		range.getCell(4, 0).format.font.color = "Bisque";
		var filter = table.columns.getItemAt(0).filter;
		filter.applyFontColorFilter("Chartreuse");
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, true, false, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.fontColor, filter.criteria.filterOn);
				Util.assertCompareValues("#7FFF00", filter.criteria.color);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterHelperIcon_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem("Table10");
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		var filter = table.columns.getItemAt(0).filter;
		filter.applyIconFilter(Excel.icons.fiveArrows.yellowDownInclineArrow);
		filter.load("criteria");
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [true, true, true, true, true, false];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.icon, filter.criteria.filterOn);
				Util.assertCompareValues(Excel.IconSet.fiveArrows, filter.criteria.icon.set);
				Util.assertCompareValues(Excel.icons.fiveArrows.yellowDownInclineArrow.index, filter.criteria.icon.index);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterHelperValuesStringOnly_cvt_JScript_V12() {
		var ctx = new Excel.RequestContext();
		var worksheet = ctx.workbook.worksheets.getItem(ExcelTest.SortUtil.sheetName);
		var table = worksheet.tables.getItem(ExcelTest.SortUtil.tableName);
		table.clearFilters();
		table.sort.clear();
		var range = table.getDataBodyRange();
		range.values = ExcelTest.SortUtil.tableDataset;
		var filterValues = ['782', '12', '94'];
		var filter = table.columns.getItemAt(1).filter;
		filter.applyValuesFilter(filterValues);
		filter.load('criteria');
		var rowCollection = [0, 1, 2, 3, 4, 5].map((index) => {
			var row = range.getRow(index);
			row.load("rowHidden");
			return row;
		});
		ctx.sync()
			.then(() => {
				var visibilities = rowCollection.map((row) => {
					return row.rowHidden;
				});
				var expected = [false, false, false, false, true, true];
				if (!Util.compareArray(visibilities, expected)) {
					throw new Error("Visibilities don't match expected values. Expected :'" + JSON.stringify(expected) + "'. Got :'" + JSON.stringify(visibilities) + "'.");
				}
				Util.assertCompareValues(Excel.FilterOn.values, filter.criteria.filterOn);
				var filterValuesOk = filter.criteria.values.every((val) => {
					return filterValues.indexOf(<any>val) != -1;
				});
				if (!filterValuesOk) {
					throw new Error("Filter values don't match expected values. Expected :'" + JSON.stringify(filterValues) + "'. Got :'" + JSON.stringify(filter.criteria.values) + "'.");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterCorrectlyUpdatesLinkedChart_cvt_JScript_V12() {
		var sheetName = "Sheet1";
		Util.removeAllChartsBefore(sheetName, function () {
			Excel.run(function (ctx) {
				var sheet = ctx.workbook.worksheets.getItem(sheetName);
				sheet.getRange("A:B").clear();
				var range = sheet.getRange("A1:B5");
				range.values = [
					["Item", "Price"],
					["A", 5],
					["B", 3],
					["C", 7],
					["D", 4]
				];
				var table = sheet.tables.add("A1:B5", true);
				var chart = sheet.charts.add("Line", range);
				var points = chart.series.getItemAt(0).points.load();
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(4, points.items.length);
						table.columns.getItem("Price").filter.applyTopItemsFilter(2);
						points.load();
						return ctx.sync().then(function () {
							Util.assertCompareValues(2, points.items.length);
						});
					});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
		});
	}
}
?module ExcelTest {
	export function test_Table_LoadTableAndRangeAddress_bvt_JScript_V11() {
		var tableName = "Table1";
		var rangeAddress = "ExistingTables!C3:E8";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(tableName);
		ctx.load(table);
		ctx.sync().then(function () {
			var success = true;
			RichApiTest.log.comment("Name='" + table.name + "'");
			if (table.name != tableName) {
				RichApiTest.log.comment("Name is not " + tableName);
				success = false;
			}
			var range = table.getRange();
			ctx.load(range);
			ctx.sync().then(function () {
				RichApiTest.log.comment("Table Range='" + range.address + "'");
				if (range.address != rangeAddress) {
					RichApiTest.log.comment("Tables Range.Address is not " + rangeAddress);
					success = false;
				}
				RichApiTest.log.done(success);
			}, reportError);
		}, reportError);
	}
	export function test_Table_LoadNonexistingTableString_cvt_JScript_V11() {
		var TABLENAME = "NonExisting";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		ctx.load(table);
		ctx.sync().then(() => {
			RichApiTest.log.fail("Shouldn't be able to load a non-existing table.");
		}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.itemNotFound) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.itemNotFound + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			});
	}
	export function test_Table_LoadNonexistingTableInt_cvt_JScript_V11() {
		var TABLENAME = "9001";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		ctx.load(table);
		ctx.sync().then(() => {
			RichApiTest.log.fail("Shouldn't be able to load a non-existing table.");
		}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.itemNotFound) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.itemNotFound + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			});
	}
	export function test_Table_CreateTableInvalidSheetname_cvt_JScript_V11() {
		var SHEETNAME = "Foo",
			TABLEADDRESS = SHEETNAME + "!A20:B22";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.add(TABLEADDRESS, true);
		ctx.load(table);
		ctx.sync().then(() => {
			RichApiTest.log.fail("Shouldn't be able to create a table with an invalid Sheetname");
			RichApiTest.log.done(false);
		}, (errorInfo: OfficeExtension.Error) => {
			var success = true;
			if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
				RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
				success = false;
			}
			RichApiTest.log.done(success);
		});
	}
	
	export function test_Table_CreateTableInvalidAddress_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!Foo";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			ctx.load(table);
			ctx.sync().then(() => {
				RichApiTest.log.fail("Shouldn't be able to create a table with an invalid Sheetname");
				RichApiTest.log.done(false);
			}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			});
		});
	}
	export function test_Table_CreateValidTable$Address_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!A23:B25";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			ctx.load(table);
			ctx.sync().then(() => {
				RichApiTest.log.pass("Successfully created a table");
				RichApiTest.log.done(true);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_CreateValidTable$AddressWSheetOnDifferentActive_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!A23:B25";
		Util.clearSheetBefore(SHEETNAME, () => {
			Excel.run(function (ctx) {
				ctx.workbook.worksheets.getItem("Sheet1").activate();
				var table = ctx.workbook.tables.add(TABLEADDRESS, true);
				return ctx.sync();
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_CreateValidTable$AddressWithoutSheet_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = "A23:B25";
		Util.clearSheetBefore(SHEETNAME, () => {
			Excel.run(function (ctx) {
				ctx.workbook.worksheets.getItem(SHEETNAME).activate();
				var table = ctx.workbook.tables.add(TABLEADDRESS, true);
				return ctx.sync();
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_CreateValidTable$RangeObject_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!A23:B25";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(SHEETNAME);
			var range = worksheet.getRange("A23:B25");
			var table = ctx.workbook.tables.add(range, true);
			ctx.load(table);
			ctx.sync().then(() => {
				RichApiTest.log.pass("Successfully created a table");
				RichApiTest.log.done(true);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_CreateValidTable$ExpiredRangeObject_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!A23:B25";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			ctx.workbook.tables.load("count");
			ctx.sync()
				.then(function () {
				var initialTableCount = ctx.workbook.tables.count;
					var worksheet = ctx.workbook.worksheets.getItem(SHEETNAME);
					var range = worksheet.getRange("A23:B25");
					worksheet.getRange("A:D").delete(Excel.DeleteShiftDirection.left);
					var table = ctx.workbook.tables.add(range, true);
					ctx.load(table);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.invalidBinding)
						.then(function () {
							ctx.workbook.tables.load();
							return ctx.sync()
								.then(function () {
									Util.assertCompareNumeric(initialTableCount,
										ctx.workbook.tables.count, 0, "Ensure that no table got created");
								});
						})
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_Retrieval_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!C23:D25",
			TABLENAME = "TestTable1";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.name = TABLENAME;
			ctx.load(table, "id");
			ctx.sync().then(() => {
				RichApiTest.log.comment("Successfully created a table");
				var retrievedTable = ctx.workbook.tables.getItem(TABLENAME);
				ctx.load(retrievedTable, "id");
				ctx.sync().then(() => {
					var success = true;
					if (retrievedTable.id != table.id) {
						RichApiTest.log.fail("retrieved table has Id : '" + retrievedTable.id + "' while the initial one had Id : '" + table.id + "'.");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_RetrievalAndDeletion_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!E23:F25",
			TABLENAME = "TestTable2";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.name = TABLENAME;
			ctx.load(table, "id");
			ctx.sync().then(() => {
				RichApiTest.log.comment("Successfully created a table");
				var retrievedTable = ctx.workbook.tables.getItem(TABLENAME);
				ctx.load(retrievedTable, "id");
				ctx.sync().then(() => {
					retrievedTable.delete();
					var reretrievedTable = ctx.workbook.tables.getItem(TABLENAME);
					ctx.load(reretrievedTable);
					ctx.sync().then(() => {
						RichApiTest.log.fail("Shouldn't be able to load a deleted table.");
					}, (errorInfo: OfficeExtension.Error) => {
						var success = true;
						if (errorInfo.code != Excel.ErrorCodes.itemNotFound) {
							RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.itemNotFound + "'.");
							success = false;
						}
						RichApiTest.log.done(success);
					});
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	
	export function test_Table_LoadAllAfterDeletion_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!E23:F25";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			ctx.load(table, "id");
			table.delete();
			ctx.load(ctx.workbook.tables, "id");
			ctx.sync().then(() => {
				RichApiTest.log.pass("This should just work");
				RichApiTest.log.done(true);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_RenameInvalidEmpty_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!G23:H25";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			ctx.sync().then(() => {
				table.name = "";
				ctx.sync().then(() => {
					RichApiTest.log.fail("Shouldn't be able to rename a table to an invalid name");
					RichApiTest.log.done(false);
				}, (errorInfo: OfficeExtension.Error) => {
					var success = true;
					if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
						RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
						success = false;
					}
					RichApiTest.log.done(success);
				});
			}, ExcelTest.reportError);
		});
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Table_RenameInvalidExisting_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!K23:L25";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			ctx.sync().then(() => {
				table.name = "Table1";
				ctx.sync().then(() => {
					RichApiTest.log.fail("Shouldn't be able to rename a table to an invalid name");
					RichApiTest.log.done(false);
				}, (errorInfo: OfficeExtension.Error) => {
					var success = true;
					if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
						RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
						success = false;
					}
					RichApiTest.log.done(success);
				});
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_PropertiesValidGetterSetter_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!M23:N25",
			TABLENAME = "TestTable9",
			NEWTABLENAME = "SuperTable9001",
			STYLE = "TableStyleDark11";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.name = TABLENAME;
			ctx.load(table, "name, showHeaders, showTotals, style");
			ctx.sync().then(() => {
				var success = true;
				RichApiTest.log.comment("Comparing creation values");
				if (!(Util.compareProperty(table, "name", TABLENAME) &&
					Util.compareProperty(table, "showHeaders", true) &&
					Util.compareProperty(table, "showTotals", false))) {
					success = false;
				}
				table.name = NEWTABLENAME;
				table.showHeaders = false;
				table.showTotals = false;
				table.style = STYLE
				ctx.sync().then(() => {
					RichApiTest.log.comment("Comparing modified values");
					if (!(Util.compareProperty(table, "name", NEWTABLENAME) &&
						Util.compareProperty(table, "showHeaders", false) &&
						Util.compareProperty(table, "showTotals", false) &&
						Util.compareProperty(table, "style", STYLE))) {
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_PropertiesRetrievedGetterSetter_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!M20:N22",
			STYLE = "TableStyleDark11";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			ctx.load(table, "id, showHeaders, showTotals, style");
			ctx.sync().then(() => {
				var success = true;
				table.showHeaders = false;
				table.showTotals = false;
				table.style = STYLE;
				var retrievedTable = ctx.workbook.tables.getItem(table.id);
				ctx.load(retrievedTable, "showHeaders, showTotals, style");
				ctx.sync().then(() => {
					RichApiTest.log.comment("Comparing modified values");
					if (!(Util.compareProperty(retrievedTable, "showHeaders", false) &&
						Util.compareProperty(retrievedTable, "showTotals", false) &&
						Util.compareProperty(retrievedTable, "style", STYLE))) {
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
							
	
	
	
	
	
	
	
	
	
	export function test_Table_AddRowLast_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!Q30:R32";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.rows.add(null, [[0, 4]]);
			ctx.load(table.rows);
			ctx.sync().then(() => {
				var success = true;
				if (table.rows.items.length != 3) {
					success = false;
					RichApiTest.log.fail("New row doesn't show up in table");
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_AddRowToEnd2D_cvt_JScript_V14() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!Q30:R32";
		var finalValues = [[1, 2], [3, 4], [0, 4], [1, 5]];
		Util.clearSheetBefore(SHEETNAME, () => {
			Excel.run(function (ctx) {
				ctx.workbook.worksheets.getItem(SHEETNAME).getRange("Q31:R32").values = [[1, 2], [3, 4]];
				var table = ctx.workbook.tables.add(TABLEADDRESS, true);
				table.rows.add(null, [[0, 4], [1, 5]]);
				var tableDataRange = table.getDataBodyRange();
				ctx.load(table.rows);
				ctx.load(tableDataRange);
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(4, table.rows.items.length, "RowCount via items");
						Util.assertCompareValues(4, table.rows.count, "RowCount via count property");
						Util.assertCompareArray(tableDataRange.values, finalValues);
				})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddRowToEnd2DWithTotalRow_cvt_JScript_V14() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!Q30:R32";
		var finalValues = [[1, 2], [3, 4], [0, 4], [1, 5]];
		Util.clearSheetBefore(SHEETNAME, () => {
			Excel.run(function (ctx) {
				ctx.workbook.worksheets.getItem(SHEETNAME).getRange("Q31:R32").values = [[1, 2], [3, 4]];
				var table = ctx.workbook.tables.add(TABLEADDRESS, true);
				table.showTotals = true;
				table.rows.add(null, [[0, 4], [1, 5]]);
				var tableDataRange = table.getDataBodyRange();
				var tableTotalRange = table.getTotalRowRange();
				ctx.load(table.rows);
				ctx.load(tableDataRange);
				ctx.load(tableTotalRange);
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(4, table.rows.items.length, "RowCount via items");
						Util.assertCompareValues(4, table.rows.count, "RowCount via count property");
						Util.assertCompareArray(tableDataRange.values, finalValues);
						Util.assertCompareArray(tableTotalRange.values, [["Total", 15]]);
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddRowToMiddle2D_cvt_JScript_V14() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!Q30:R33";
		var finalValues = [[1, 2], [0, 4], [1, 5], [3, 4], [5, 6]];
		Util.clearSheetBefore(SHEETNAME, () => {
			Excel.run(function (ctx) {
				ctx.workbook.worksheets.getItem(SHEETNAME).getRange("Q31:R33").values = [[1, 2], [3, 4], [5,6]];
				var table = ctx.workbook.tables.add(TABLEADDRESS, true);
				table.rows.add(1, [[0, 4], [1, 5]]);
				var tableDataRange = table.getDataBodyRange();
				ctx.load(table.rows);
				ctx.load(tableDataRange);
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(5, table.rows.items.length, "RowCount via items");
						Util.assertCompareValues(5, table.rows.count, "RowCount via count property");
						Util.assertCompareArray(tableDataRange.values, finalValues);
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddRowToMiddle2DWithTotalRow_cvt_JScript_V14() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!Q30:R33";
		var finalValues = [[1, 2], [0, 4], [1, 5], [3, 4], [5, 6]];
		Util.clearSheetBefore(SHEETNAME, () => {
			Excel.run(function (ctx) {
				ctx.workbook.worksheets.getItem(SHEETNAME).getRange("Q31:R33").values = [[1, 2], [3, 4], [5, 6]];
				var table = ctx.workbook.tables.add(TABLEADDRESS, true);
				table.showTotals = true;
				table.rows.add(1, [[0, 4], [1, 5]]);
				var tableDataRange = table.getDataBodyRange();
				ctx.load(table.rows);
				ctx.load(tableDataRange);
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(5, table.rows.items.length, "RowCount via items");
						Util.assertCompareValues(5, table.rows.count, "RowCount via count property");
						Util.assertCompareArray(tableDataRange.values, finalValues);
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddRowNullForBothParameters_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!Q30:R33";
		var finalValues = [[1, 2], [3, 4], [5, 6], ["", ""]];
		Util.clearSheetBefore(SHEETNAME, () => {
			Excel.run(function (ctx) {
				ctx.workbook.worksheets.getItem(SHEETNAME).getRange("Q31:R33").values = [[1, 2], [3, 4], [5, 6]];
				var table = ctx.workbook.tables.add(TABLEADDRESS, true);
				table.showTotals = true;
				table.rows.add(null, null);
				var tableDataRange = table.getDataBodyRange();
				ctx.load(table.rows);
				ctx.load(tableDataRange);
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(4, table.rows.items.length, "RowCount via items");
						Util.assertCompareValues(4, table.rows.count, "RowCount via count property");
						Util.assertCompareArray(tableDataRange.values, finalValues);
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddRowLastToEmptyTable_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!T30:U30";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.rows.add(null, [[0, 4]]);
			ctx.load(table.rows);
			ctx.sync().then(() => {
				var success = true;
				if (table.rows.items.length != 1) {
					success = false;
					RichApiTest.log.fail("New row doesn't show up in table");
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_AddRow_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!V3:W5";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.rows.add(0, [[0, 4]]);
			ctx.load(table.rows);
			ctx.sync().then(() => {
				var success = true;
				if (table.rows.items.length != 3) {
					success = false;
					RichApiTest.log.fail("New row doesn't show up in table");
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_AddRowInvalidIndexTooBig_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!C30:D32";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.rows.add(4, [[0, 4]]);
			ctx.load(table.rows);
			ctx.sync().then(() => {
				RichApiTest.log.fail("Shouldn't be able to add a row out of the tables range.");
				RichApiTest.log.done(false);
			}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			});
		});
	}
	export function test_Table_AddRowNegativeIndexAppendAtEnd_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!E30:F32";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.rows.add(-1, [[0, 4]]);
			ctx.load(table.rows);
			ctx.sync().then(() => {
				var success = true;
				if (table.rows.items.length != 3) {
					success = false;
					RichApiTest.log.fail("New row doesn't show up in table");
				}
				RichApiTest.log.done(success);
			});
		});
	}
	export function test_Table_AddRowTooSmall_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!G30:H32",
			TABLENAME = "TestRowTable4";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.name = TABLENAME;
			table.rows.add(0, [[0]]);
			ctx.sync().then(() => {
				RichApiTest.log.fail("Shouldn't be able to add a row out of the tables range.");
				RichApiTest.log.done(false);
			}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
					success = false;
				}
				table = ctx.workbook.tables.getItem(TABLENAME);
				ctx.load(table.rows);
				ctx.sync().then(() => {
					if (table.rows.count != 2) {
						RichApiTest.log.fail("Row has been added even though it shouldn't.");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			});
		});
	}
	export function test_Table_AddRowTooBig_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!I30:J32",
			TABLENAME = "TestRowTable5";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.name = TABLENAME;
			table.rows.add(0, [[0, 4, 6]]);
			ctx.sync().then(() => {
				RichApiTest.log.fail("Shouldn't be able to add a row out of the tables range.");
				RichApiTest.log.done(false);
			}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
					success = false;
				}
				table = ctx.workbook.tables.getItem(TABLENAME);
				ctx.load(table.rows);
				ctx.sync().then(() => {
					if (table.rows.count != 2) {
						RichApiTest.log.fail("Row has been added even though it shouldn't.");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			});
		});
	}
	export function test_Table_AddRowFraction_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!O30:P32",
			TABLENAME = "TestRowTable5";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.name = TABLENAME;
			table.rows.add(3.4, [[0, 4]]);
			ctx.sync().then(() => {
				RichApiTest.log.fail("Shouldn't be able to add a row out on fractionnal index.");
				RichApiTest.log.done(false);
			}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
					success = false;
				}
				table = ctx.workbook.tables.getItem(TABLENAME);
				ctx.load(table.rows);
				ctx.sync().then(() => {
					if (table.rows.count != 2) {
						RichApiTest.log.fail("Row has been added even though it shouldn't.");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			});
		});
	}
	export function test_Table_InsertRowCheckAutoExpansion_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!D11:F11",
			TABLENAME = "InsertingRowTest",
			SECOND_COLUMNFORMULA = "=[@Column1]",
			THIRD_COLUMNFORMULA = "=SUM(" + TABLENAME + "[@[Column1]:[Column2]])";
		Util.clearSheetBefore(SHEETNAME, function() {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.name = TABLENAME;
			table.rows.add(null, [[1, SECOND_COLUMNFORMULA, THIRD_COLUMNFORMULA]]); 
			table.rows.add(0, [[2, null, null]]); 
			table.rows.add(1, [[3, null, null]]); 
			var rangeRow1 = table.rows.getItemAt(0).getRange();
			var rangeRow2 = table.rows.getItemAt(1).getRange();
			var rangeRow3 = table.rows.getItemAt(2).getRange();
			ctx.load(rangeRow1, "address, formulas, values");
			ctx.load(rangeRow2, "address, formulas, values");
			ctx.load(rangeRow3, "address, formulas, values");
			ctx.sync()
				.then(function() {
					RichApiTest.log.comment("Comparing range properties for each row");
					Util.assertCompareValues(rangeRow1.address, SHEETNAME + "!" + "D12:F12");
					Util.assertCompareArray(rangeRow1.formulas, [[2, SECOND_COLUMNFORMULA, THIRD_COLUMNFORMULA]]);
					Util.assertCompareArray(rangeRow1.values, [[2, 2, 4]]);
					
					Util.assertCompareValues(rangeRow2.address, SHEETNAME + "!" + "D13:F13");
					Util.assertCompareArray(rangeRow2.formulas, [[3, SECOND_COLUMNFORMULA, THIRD_COLUMNFORMULA]]);
					Util.assertCompareArray(rangeRow2.values, [[3, 3, 6]]);
					
					Util.assertCompareValues(rangeRow3.address, SHEETNAME + "!" + "D14:F14");
					Util.assertCompareArray(rangeRow3.formulas, [[1, SECOND_COLUMNFORMULA, THIRD_COLUMNFORMULA]]);
					Util.assertCompareArray(rangeRow3.values, [[1, 1, 2]]);
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AppendRowCheckAutoExpansion_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!G11:I11",
			TABLENAME = "AppendingRowTest",
			SECOND_COLUMNFORMULA = "=[@Column1]",
			THIRD_COLUMNFORMULA = "=SUM(" + TABLENAME + "[@[Column1]:[Column2]])";
		Util.clearSheetBefore(SHEETNAME, function() {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.name = TABLENAME;
			table.rows.add(null, [[1, SECOND_COLUMNFORMULA, THIRD_COLUMNFORMULA]]); 
			table.rows.add(null, [[2, null, null]]); 
			var rangeRow1 = table.rows.getItemAt(0).getRange();
			var rangeRow2 = table.rows.getItemAt(1).getRange();
			ctx.load(rangeRow1, "address, formulas, values");
			ctx.load(rangeRow2, "address, formulas, values");
			ctx.sync()
				.then(function() {
					RichApiTest.log.comment("Comparing range properties for each row");
					Util.assertCompareValues(rangeRow1.address, SHEETNAME + "!" + "G12:I12");
					Util.assertCompareArray(rangeRow1.formulas, [[1, SECOND_COLUMNFORMULA, THIRD_COLUMNFORMULA]]);
					Util.assertCompareArray(rangeRow1.values, [[1, 1, 2]]);
					Util.assertCompareValues(rangeRow2.address, SHEETNAME + "!" + "G13:I13");
					Util.assertCompareArray(rangeRow2.formulas, [[2, SECOND_COLUMNFORMULA, THIRD_COLUMNFORMULA]]);
					Util.assertCompareArray(rangeRow2.values, [[2, 2, 4]]);
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export async function test_Table_AppendRowTableLevelFormula_cvt_JScript_V11() {
		var SHEETNAME = "Tables";
		var TABLEADDRESS = SHEETNAME + "!S11:T11";
		await Excel.run(async (ctx) => {
			await Util.clearSheet(SHEETNAME);
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.rows.add(null,
				[
					["TotalApples", "=SUMIFS([Column2],[Column1],\"Apple\")"],
					["Apple", "2"],
					["Orange", "1"],
				]);
			var totalApplesRow = table.rows.getItemAt(0).load("values");
			await ctx.sync();
			Util.assertCompareArray(totalApplesRow.values, [["TotalApples", 2]]);
			var newRowRange = table.rows.add().getRange();
			var values = new Array(2);
			values[0] = "Apple";
			values[1] = 3;
			newRowRange.values = [values];
			var updatedTotalApplesRow = table.rows.getItemAt(0).load("values");
			await ctx.sync();
			Util.assertCompareArray(updatedTotalApplesRow.values, [["TotalApples", 5]]);
		});
	}
	export function test_Table_RemoveRow_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!M30:N32";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.rows.getItemAt(0).delete();
			ctx.load(table.rows);
			ctx.sync().then(() => {
				var success = true;
				if (table.rows.count != 1) {
					RichApiTest.log.fail("Row hasn't been deleted");
					success = false;
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_GetRow_cvt_JScript_V11() {
		var TABLENAME = "Table2",
			EXPECTED = [["333", "444"]];
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		var row = table.rows.getItemAt(1);
		ctx.load(row, "values, index");
		ctx.sync().then(() => {
			var success = true;
			if (!Util.compareArray(row.values, EXPECTED)) {
				RichApiTest.log.fail("Row contains :'" + row.values + "'. Expected :'" + EXPECTED + "'.");
				success = false;
			}
			if (!Util.compareProperty(row, "index", 1)) {
				success = false;
			}
			RichApiTest.log.done(success);
		}, ExcelTest.reportError);
	}
	export function test_Table_GetRowTooBig_cvt_JScript_V11() {
		var TABLENAME = "Table2";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		var row = table.rows.getItemAt(4);
		ctx.load(row, "values");
		ctx.sync().then(() => {
			RichApiTest.log.fail("Shouldn't have been possible to retreive out of range row");
			RichApiTest.log.done(false);
		}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			});
	}
	export function test_Table_GetRowNegative_cvt_JScript_V11() {
		var TABLENAME = "Table2";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		var row = table.rows.getItemAt(-1);
		ctx.load(row, "values");
		ctx.sync().then(() => {
			RichApiTest.log.fail("Shouldn't have been possible to retreive out of range row");
			RichApiTest.log.done(false);
		}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			});
	}
	export function test_Table_GetRowDecimal_cvt_JScript_V11() {
		var TABLENAME = "Table2";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		var row = table.rows.getItemAt(3.4);
		ctx.load(row, "values");
		ctx.sync().then(() => {
			RichApiTest.log.fail("Shouldn't have been possible to retreive out of range row");
			RichApiTest.log.done(false);
		}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			});
	}
	export function test_Table_InsertRowOverOffsetTable_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!D11:F13";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var existingTable = ctx.workbook.tables.add(SHEETNAME + "!C3:E8", true);
			var offsetTable = ctx.workbook.tables.add(TABLEADDRESS, false);
			existingTable.rows.add(0, [[1, 2, 3]]);
			ctx.sync().then(() => {
				RichApiTest.log.fail("This shouldn't succeed as it would cause another table to move.");
				RichApiTest.log.done(false);
			}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.insertDeleteConflict) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.insertDeleteConflict + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			});
		});
	}
	export function test_Table_AppendRowOverOffsetTable_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!G11:I13";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var existingTable = ctx.workbook.tables.add(SHEETNAME + "!F3:H8", true);
			var offsetTable = ctx.workbook.tables.add(TABLEADDRESS, false);
			existingTable.rows.add(null, [[1, 2, 3]]);
			ctx.sync().then(() => {
				RichApiTest.log.fail("This shouldn't succeed as it would cause another table to move.");
				RichApiTest.log.done(false);
			}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.insertDeleteConflict) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.insertDeleteConflict + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			});
		});
	}
	export function test_Table_AddColumn_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!AF15:AG18";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			table.columns.add(0, [[0], [1], [3], [4], [5]]);
			ctx.load(table.columns);
			ctx.sync().then(() => {
				var success = true;
				if (table.columns.items.length != 3) {
					success = false;
					RichApiTest.log.fail("New column doesn't show up in table");
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_AddColumnWithName_cvt_JScript_V14() {
		var sheetName = "Tables";
		var tableAddress = sheetName + "!AF15:AG18";
		var newColumnName = "NewColumn";
		Util.clearSheetBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var table = ctx.workbook.tables.add(tableAddress, false);
				table.columns.add(0, null, newColumnName);
				ctx.load(table.columns);
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(3, table.columns.items.length, "Column count should increase by 1.");
						Util.assertCompareValues(newColumnName, table.columns.items[0].name, "Column name should match.");
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddColumnShouldFailOnTooLongName_cvt_JScript_V14() {
		var sheetName = "Tables";
		var tableAddress = sheetName + "!AF15:AG18";
		var newLongColumnName = "NewColumn_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789";
		Util.clearSheetBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(tableAddress, false);
			table.columns.add(0, null, newLongColumnName);
			Util.ensureSyncFailed(ctx, Excel.ErrorCodes.invalidArgument, null);
		});
	}
	export function test_Table_AddColumnShouldFailOnDuplicateName_cvt_JScript_V14() {
		var sheetName = "Tables";
		var tableAddress = sheetName + "!AF15:AG18";
		var newColumnName = "NewColumn";
		Util.clearSheetBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(tableAddress, false);
			table.columns.add(0, null, newColumnName);
			ctx.load(table.columns);
			ctx.sync().then(() => {
				Util.assertCompareValues(3, table.columns.items.length, "Column count should increase by 1.");
				Util.assertCompareValues(newColumnName, table.columns.items[0].name, "Column name should match.");
				table.columns.add(1, null, newColumnName);
				Util.ensureSyncFailed(ctx, Excel.ErrorCodes.itemAlreadyExists, null);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_AddColumnToEnd_cvt_JScript_V14() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!AF15:AG18",
			ADJACENTTABLE = SHEETNAME + "!AI15:AJ18";
		var finalValues = [[1, 2, 1], [3, 4, 3], [5, 6, 4], [7, 8, 5]];
		Util.clearSheetBefore(SHEETNAME, () => {
			Excel.run(function (ctx) {
				ctx.workbook.tables.add(ADJACENTTABLE, false);
				ctx.workbook.worksheets.getItem(SHEETNAME).getRange("AH16").values = [["foo"]];
				ctx.workbook.worksheets.getItem(SHEETNAME).getRange("AF15:AG18").values = [[1, 2], [3, 4], [5, 6], [7, 8]];
				var table = ctx.workbook.tables.add(TABLEADDRESS, false);
				table.columns.add(null, [[0], [1], [3], [4], [5]]);
				var tableDataRange = table.getDataBodyRange();
				ctx.load(table.columns);
				ctx.load(tableDataRange);
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(3, table.columns.items.length, "ColumnCount via items");
						Util.assertCompareValues(3, table.columns.count, "ColumnCount via count property");
						Util.assertCompareArray(tableDataRange.values, finalValues);
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddColumnToEndOtherTableBlocked_cvt_JScript_V14() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!AF15:AG18",
			ADJACENTTABLE = SHEETNAME + "!AI14:AJ20";
		var finalValues = [[1, 2, 1], [3, 4, 3], [5, 6, 4], [7, 8, 5]];
		Util.clearSheetBefore(SHEETNAME, () => {
			Excel.run(function (ctx) {
				ctx.workbook.tables.add(ADJACENTTABLE, false);
				ctx.workbook.worksheets.getItem(SHEETNAME).getRange("AH16").values = [["foo"]];
				ctx.workbook.worksheets.getItem(SHEETNAME).getRange("AF15:AG18").values = [[1, 2], [3, 4], [5, 6], [7, 8]];
				var table = ctx.workbook.tables.add(TABLEADDRESS, false);
				table.columns.add(null, [[0], [1], [3], [4], [5]]);
				var tableDataRange = table.getDataBodyRange();
				ctx.load(table.columns);
				ctx.load(tableDataRange);
				return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.insertDeleteConflict);
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddEmptyColumn_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!G36:H39";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			table.columns.add(0, null);
			ctx.load(table.columns);
			ctx.sync().then(() => {
				var success = true;
				if (table.columns.items.length != 3) {
					success = false;
					RichApiTest.log.fail("New column doesn't show up in table");
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_AddTableDeleteColumn_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!B6:F9";
		var SecondColumnName = "Second one";
		var FourthColumnName = "The 4th";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			var headerRowRange1;
			var headerRowRange2;
			ctx.load(table.columns);
			ctx.sync().then(() => {
				var success = true;
				table.columns.getItemAt(0).getHeaderRowRange().values = [["first one"]]; 
				table.columns.getItemAt(1).getHeaderRowRange().values = [[SecondColumnName]]; 
				table.columns.getItemAt(3).getHeaderRowRange().values = [[FourthColumnName]]; 
				table.columns.getItemAt(0).delete(); 
				table.columns.getItemAt(1).delete(); 
				table.columns.getItem("Column5").delete(); 
				ctx.load(table.columns);
				headerRowRange1 = table.columns.getItemAt(0).getHeaderRowRange(); 
				headerRowRange2 = table.columns.getItemAt(1).getHeaderRowRange(); 
				ctx.load(headerRowRange1);
				ctx.load(headerRowRange2);
				return ctx.sync();
			}).then(() => {
				Util.assertCompareValues(headerRowRange1.values[0][0], SecondColumnName, "Second column should be here after delete."); 
				Util.assertCompareValues(headerRowRange2.values[0][0], FourthColumnName, "Fourth column should be here after delete."); 
			}).then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddTableDeleteLastColumn_cvt_JScript_V11() {
		var SHEETNAME = "Tables", TABLEADDRESS = SHEETNAME + "!B6:F9";
		var table2 = null;
		Util.clearSheetBefore(SHEETNAME, function () {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			ctx.load(table);
			ctx.load(table.columns);
			return ctx.sync()
				.then(function () {
					var success = true;
					table.columns.getItemAt(0).delete(); 
					table.columns.getItemAt(0).delete(); 
					table.columns.getItemAt(0).delete(); 
					table.columns.getItemAt(0).delete(); 
					table.columns.getItemAt(0).delete(); 
					table2 = ctx.workbook.tables.getItemOrNullObject(table.name);
					ctx.load(table2);
					return ctx.sync();
				}).then(function () {
					if (!table2.isNull) {
						throw new Error("The loading of this table should have failed with itemNotFound because the deletion of the last table column should also delete the table.");
					}
					else {
						RichApiTest.log.comment("table was null as expected since it was removed with last column.")
					}
				}).then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddTableDeleteRange_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!B16:F19";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			ctx.load(table);
			ctx.sync().then(() => {
				
				ctx.workbook.worksheets.getItem(SHEETNAME).getRange("A15:G20").delete("Up");
				return ctx.sync();
			}).then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_AddEmptyTooSmall_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!J36:K39",
			TABLENAME = "TestColTooSmall";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			table.name = TABLENAME;
			table.columns.add(0, [[0]]);
			ctx.load(table.columns);
			ctx.sync().then(() => {
				RichApiTest.log.fail("Shouldn't be able to add a column with an invalid row.");
				RichApiTest.log.done(false);
			}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
					success = false;
				}
				table = ctx.workbook.tables.getItem(TABLENAME);
				ctx.load(table.columns);
				ctx.sync().then(() => {
					if (table.columns.count != 2) {
						RichApiTest.log.fail("Column has been added while it shouldn't have.");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			});
		});
	}
	export function test_Table_AddEmptyTooBig_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!M36:N39",
			TABLENAME = "TestColTooBig";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			table.name = TABLENAME;
			table.columns.add(0, [[0], [1], [2], [3], [4], [5], [6]]);
			ctx.load(table.columns);
			ctx.sync().then(() => {
				RichApiTest.log.fail("Shouldn't be able to add a column with an invalid row.");
				RichApiTest.log.done(false);
			}, (errorInfo: OfficeExtension.Error) => {
				var success = true;
				if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
					RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
					success = false;
				}
				table = ctx.workbook.tables.getItem(TABLENAME);
				ctx.load(table.columns);
				ctx.sync().then(() => {
					if (table.columns.count != 2) {
						RichApiTest.log.fail("Column has been added while it shouldn't have.");
						success = false;
					}
					RichApiTest.log.done(success);
				}, ExcelTest.reportError);
			});
		});
	}
	export function test_Table_SetColData_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!P36:Q39",
			VALUES = [[0], [1], [3], [4], [5]];
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			var col = table.columns.getItemAt(0);
			col.values = VALUES;
			ctx.load(col, "values");
			ctx.sync().then(() => {
				var success = true;
				if (!Util.compareArray(col.values, VALUES)) {
					RichApiTest.log.fail("Columns contains :'" + col.values + "'. Expected :'" + VALUES + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_GetCol_cvt_JScript_V11() {
		var TABLENAME = "Table2",
			EXPECTED = [["bbb"], [222], [444]];
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		var col = table.columns.getItemAt(1);
		ctx.load(col, "values, name, index");
		ctx.sync().then(() => {
			var success = true;
			if (!Util.compareArray(col.values, EXPECTED)) {
				RichApiTest.log.fail("Column contains :'" + col.values + "'. Expected :'" + EXPECTED + "'.");
				success = false;
			}
			if (!Util.compareProperty(col, "name", "bbb")) {
				success = false;
			}
			if (!Util.compareProperty(col, "index", 1)) {
				success = false;
			}
			RichApiTest.log.done(success);
		}, ExcelTest.reportError);
	}
	export function test_Table_GetColNegativeIndex_cvt_JScript_V11() {
		var TABLENAME = "Table2";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		var col = table.columns.getItemAt(-1);
		ctx.load(col, "values");
		ctx.sync().then(() => {
			RichApiTest.log.fail("Shouldn't be able to get a column out of the tables range.");
			RichApiTest.log.done(false);
		}, (errorInfo: OfficeExtension.Error) => {
			var success = true;
			if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
				RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
				success = false;
			}
			RichApiTest.log.done(success);
		});
	}
	export function test_Table_GetColTooBigIndex_cvt_JScript_V11() {
		var TABLENAME = "Table2";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		var col = table.columns.getItemAt(10);
		ctx.load(col, "values");
		ctx.sync().then(() => {
			RichApiTest.log.fail("Shouldn't be able to get a column out of the tables range.");
			RichApiTest.log.done(false);
		}, (errorInfo: OfficeExtension.Error) => {
			var success = true;
			if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
				RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
				success = false;
			}
			RichApiTest.log.done(success);
		});
	}
	export function test_Table_GetColDecimalIndex_cvt_JScript_V11() {
		var TABLENAME = "Table2";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		var col = table.columns.getItemAt(0.7);
		ctx.load(col, "values");
		ctx.sync().then(() => {
			RichApiTest.log.fail("Shouldn't be able to get a column out of the tables range.");
			RichApiTest.log.done(false);
		}, (errorInfo: OfficeExtension.Error) => {
			var success = true;
			if (errorInfo.code != Excel.ErrorCodes.invalidArgument) {
				RichApiTest.log.fail("Got error code: '" + errorInfo.code + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.");
				success = false;
			}
			RichApiTest.log.done(success);
		});
	}
	export function test_Table_SetColumnName_cvt_JScript_V14() {
		var sheetName = "Tables";
		var tableAddress = sheetName + "!AF15:AG18";
		var newColumnName = "NewColumn";
		var updatedColumnName = "UpdatedColumn";
		Util.clearSheetBefore(sheetName, () => {
			Excel.run(function (ctx) {
				var table = ctx.workbook.tables.add(tableAddress, false);
				table.columns.add(0, null, newColumnName);
				ctx.load(table.columns);
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(3, table.columns.items.length, "Column count should increase by 1.");
						Util.assertCompareValues(newColumnName, table.columns.items[0].name, "Column name should match.");
						var col = table.columns.getItem(newColumnName);
						col.name = updatedColumnName;
						ctx.load(table.columns);
						return ctx.sync()
							.then(function () {
								Util.assertCompareValues(updatedColumnName, table.columns.items[0].name, "Column name should match.");
							})
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_DataRangeRowsValues_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!T42:U43",
			VALUES = [[0, 1], [2, 3]],
			TOTALROW = [['Total', 2]];
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			table.showTotals = true;
			var totalRow = table.getTotalRowRange();
			var dataRange = table.getDataBodyRange();
			dataRange.values = VALUES;
			ctx.load(table.rows, "values");
			ctx.load(totalRow, "values");
			ctx.sync().then(() => {
				var success = true;
				if (!Util.compareArray(table.rows.items[0].values, [VALUES[0]])) {
					RichApiTest.log.comment("First table row has values :'" + table.rows.items[0].values + "'. Expected :'" + [VALUES[0]] + "'.");
					success = false;
				}
				if (!Util.compareArray(table.rows.items[1].values, [VALUES[1]])) {
					RichApiTest.log.comment("Second table row has values :'" + table.rows.items[1].values + "'. Expected :'" + [VALUES[1]] + "'.");
					success = false;
				}
				if (!Util.compareArray(totalRow.values, TOTALROW)) {
					RichApiTest.log.comment("Total row has values :'" + totalRow.values + "'. Expected :'" + TOTALROW + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_DataRangeUpdateValues_cvt_JScript_V11() {
		var SHEETNAME = "Tables";
		var TABLEADDRESS = SHEETNAME + "!A58:B59";
		var RANGEADDRESS = SHEETNAME + "!A60:B60";
		var VALUES = [[0, 1], [2, 3]];
		var RANGEVALUES = [[5, 6]];
		var TOTALROW = [['Total', 3]];
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, false);
			table.showTotals = true;
			var dataRange = table.getDataBodyRange();
			dataRange.values = VALUES;
			var range = ctx.workbook.worksheets.getItem("Tables").getRange("$60:$60");
			range.insert("Down");
			ctx.sync().then(function () {
				var totalRow = table.getTotalRowRange();
				var rangeRow = ctx.workbook.worksheets.getItem("Tables").getRange(RANGEADDRESS);
				rangeRow.values = RANGEVALUES;
				ctx.load(rangeRow);
				ctx.load(totalRow, "values");
				ctx.sync().then(function () {
					var success = true;
					if (!Util.compareArray(totalRow.values, TOTALROW)) {
						RichApiTest.log.comment("Total row has values :'" + totalRow.values + "'. Expected :'" + TOTALROW + "'.");
						success = false;
					}
					RichApiTest.log.done(success)
				}, ExcelTest.reportError);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_Ranges_cvt_JScript_V11() {
		var TABLENAME = "Table2",
			SHEETNAME = "ExistingTables",
			FULLRANGE_ADDRESS = "H11:I13",
			FULLRANGE_VALUE = [["aaa", "bbb"], [111, 222], [333, 444]],
			DATARANGE_ADDRESS = "H12:I13",
			DATARANGE_VALUE = [[111, 222], [333, 444]],
			HEADERRANGE_ADDRESS = "H11:I11",
			HEADERRANGE_VALUE = [["aaa", "bbb"]];
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(TABLENAME);
		var fullRange = table.getRange();
		var dataRange = table.getDataBodyRange();
		var headerRange = table.getHeaderRowRange();
		ctx.load(fullRange, "values, address");
		ctx.load(dataRange, "values, address");
		ctx.load(headerRange, "values, address");
		ctx.sync().then(() => {
			var success = true;
			RichApiTest.log.comment("Verifying Full Range");
			if (!Util.compareProperty(fullRange, "address", SHEETNAME + "!" + FULLRANGE_ADDRESS)) {
				success = false;
			}
			if (!Util.compareArray(fullRange.values, FULLRANGE_VALUE)) {
				success = false;
			}
			RichApiTest.log.comment("Verifying Data Range");
			if (!Util.compareProperty(dataRange, "address", SHEETNAME + "!" + DATARANGE_ADDRESS)) {
				success = false;
			}
			if (!Util.compareArray(dataRange.values, DATARANGE_VALUE)) {
				success = false;
			}
			RichApiTest.log.comment("Verifying Header Range");
			if (!Util.compareProperty(headerRange, "address", SHEETNAME + "!" + HEADERRANGE_ADDRESS)) {
				success = false;
			}
			if (!Util.compareArray(headerRange.values, HEADERRANGE_VALUE)) {
				success = false;
			}
			RichApiTest.log.done(success);
		}, ExcelTest.reportError);
	}
	export function test_Table_SelectionStays_cvt_JScript_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!A47:B48",
			SELECTIONADDRESS = SHEETNAME + "!A1";
		Util.clearSheetBefore(SHEETNAME, () => {
			var ctx = new Excel.RequestContext();
			ctx.workbook.worksheets.getItem(SHEETNAME).getRange(SELECTIONADDRESS).select();
			ctx.workbook.tables.add(TABLEADDRESS, true);
			var selection = ctx.workbook.getSelectedRange();
			ctx.load(selection, "address");
			ctx.sync().then(() => {
				var success = true;
				if (selection.address != SELECTIONADDRESS) {
					RichApiTest.log.fail("Selection changed. Expected : '" + SELECTIONADDRESS + "'. Got : '" + selection.address + "'.");
					success = false;
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		});
	}
	export function test_Table_ConvertToRange_cvt_JScript_V12() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!K16:N19";
		Util.clearSheetBefore(SHEETNAME, () => {
			Excel.run(function (ctx) {
				var table = ctx.workbook.tables.add(TABLEADDRESS, true);
				ctx.load(table);
				return ctx.sync().then(function () {
					var tableName = table.name;
					var range = table.convertToRange();
					ctx.load(range);
					return ctx.sync()
				.then(function () {
					Util.assertCompareValues(TABLEADDRESS, range.address, "Range Address");
					var table2 = ctx.workbook.tables.getItem(tableName);
					ctx.load(table2);
					RichApiTest.log.comment("Attempting to re-fetch table after conversion");
					return ctx.sync()
				.then(function () {
						throw new Error("Expected to fail.");
					})
				.catch(function (error) {
						RichApiTest.log.comment("Catching expected error since table has been converted and thus shouldn't get fetchable anymore.");
						var expected = (error instanceof OfficeExtension.Error) && ((<OfficeExtension.Error>error).code == Excel.ErrorCodes.itemNotFound);
						if (!expected) {
							throw new Error("Expected to fail with itemNotFound, but failed with another error instead.");
					}
				})
				})
				})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_GetWorksheet_cvt_JScript_V12() {
		var sheetName = "ExistingTables";
		var tableName = "Table1";
		var ctx = new Excel.RequestContext();
		var table = ctx.workbook.tables.getItem(tableName);
		ctx.load(table.worksheet);
		ctx.sync()
			.then(function() {
				Util.assertCompareValues(sheetName, table.worksheet.name);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_ClearRangeWithTableWithFilter_cvt_JScript_V12() {
		var sheetName = "Tables";
		var tableAddress = sheetName + "!V3:X3";
		var tableName = "TableWithFilter1";
		Util.clearSheetBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(tableAddress, true);
			table.name = tableName;
			table.rows.add(0, [[0, 100, 5]]);
			table.rows.add(1, [[1, 101, 6]]);
			table.rows.add(2, [[0, 102, 1]]);
			table.rows.add(3, [[1, 103, 5]]);
			table.rows.add(4, [[1, 105, 5]]);
			table.rows.add(5, [[3, 106, 5]]);
			var filterValues = ['0', '3'];
			var filter = table.columns.getItemAt(0).filter;
			filter.apply({
				filterOn: Excel.FilterOn.values,
				values: filterValues
			});
			filter.load("criteria");
			ctx.sync()
				.then(() => {
					var rangeClear = ctx.workbook.worksheets.getItem(sheetName).getRange(null);
					rangeClear.clear(null);
					var receivedTable = ctx.workbook.tables.getItem(tableName);
					return Util.ensureSyncFailedPromise(ctx, Excel.ErrorCodes.itemNotFound);
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_DeleteEntireRangeOfATableWithFilter_cvt_JScript_V12() {
		var sheetName = "Tables";
		var tableAddress = sheetName + "!V3:X3";
		Util.clearSheetBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(tableAddress, true);
			table.rows.add(0, [[0, 100, 5]]);
			table.rows.add(1, [[1, 101, 6]]);
			table.rows.add(2, [[0, 102, 1]]);
			table.rows.add(3, [[1, 103, 5]]);
			table.rows.add(4, [[1, 105, 5]]);
			table.rows.add(5, [[3, 106, 5]]);
			var filterValues = ['0', '3'];
			var filter = table.columns.getItemAt(0).filter;
			filter.apply({
				filterOn: Excel.FilterOn.values,
				values: filterValues
			});
			filter.load("criteria");
			ctx.sync()
				.then(() => {
					var range = table.getDataBodyRange().getEntireRow().delete("up");
					ctx.load(table.rows);
					ctx.sync()
						.then(() => {
							Util.assertCompareValues(3, table.rows.count);
						})
						.then(ExcelTest.pass)
						.catch(ExcelTest.reportError);
				}, ExcelTest.reportError);
		});
	}
	export function test_Table_GetItemOrNull_cvt_JScript_V14() {
		var tableName = "Table1";
		Excel.run((ctx) => {
			var tableExist = ctx.workbook.tables.getItemOrNullObject(tableName);
			var tableNotExist = ctx.workbook.tables.getItemOrNullObject("Non-Exist-Table");
			return ctx.sync()
				.then(() => {
					Util.assert(!tableExist.isNull, "Expect isNull false");
					Util.assert(tableNotExist.isNull, "Expect isNull true");
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Table_ColumnGetItemOrNull_cvt_JScript_V14() {
		var tableName = "Table1";
		Excel.run((ctx) => {
			var table = ctx.workbook.tables.getItemOrNullObject(tableName);
			var columnExist = table.columns.getItemOrNullObject("Column1");
			var columnNotExist = table.columns.getItemOrNullObject("Not-Exist-Column");
			return ctx.sync()
				.then(() => {
					Util.assert(!columnExist.isNull, "Expect isNull false");
					Util.assert(columnNotExist.isNull, "Expect isNull true");
				});
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Table_TableOptions_cvt_JScript_V13() {
		var SHEETNAME = "Tables", TABLEADDRESS = SHEETNAME + "!A23:c30";
		Util.clearSheetBefore(SHEETNAME, function () {
			var ctx = new Excel.RequestContext();
			var table = ctx.workbook.tables.add(TABLEADDRESS, true);
			table.getDataBodyRange().getCell(0, 0).getBoundingRect(table.getDataBodyRange().getCell(1, 2)).values = [["a", "b", "1"], ["c", "d", "2"]];
			table.showBandedRows = false;
			table.showBandedColumns = true;
			table.highlightFirstColumn = true;
			table.highlightLastColumn = true;
			table.showFilterButton = false;
			ctx.load(table);
			ctx.sync()
				.then(function () {
					RichApiTest.log.pass("Successfully created a table");
					Util.assertCompareValues(true, table.highlightFirstColumn, "specialfirst");
					Util.assertCompareValues(true, table.highlightLastColumn, "specialLast");
					Util.assertCompareValues(true, table.showBandedColumns, "bandedCol");
					Util.assertCompareValues(false, table.showBandedRows, "bandedRow");
					Util.assertCompareValues(false, table.showFilterButton, "filterButton");
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Table_Count_cvt_JScript_V14() {
		_injectCollectionCountTest_JS((ctx) => ctx.workbook.worksheets.getItem("ExistingTables").tables)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_ColumnCount_cvt_JScript_V14() {
		_injectCollectionCountTest_JS((ctx) => ctx.workbook.worksheets.getItem("ExistingTables").tables.getItem("Table1").columns)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_RowCount_cvt_JScript_V14() {
		_injectCollectionCountTest_JS((ctx) => ctx.workbook.worksheets.getItem("ExistingTables").tables.getItem("Table1").rows)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?
module ExcelTest {
	export function test_Visual_AddWithFullAddressScenario_cvt_JScript_V19() {
		
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var worksheet = ctx.workbook.worksheets.getItem(sheetName);
			var guid = "{72CABB45-F424-439B-A1A7-052CF9D9BCA9}";
			worksheet.visuals.add(guid, "xlFormula", "Sheet1!A1:B3"); 
			worksheet.visuals.add(guid, "xlFormula"); 
			worksheet.visuals.add(guid, "xlCurrentSelection"); 
			worksheet.visuals.add(guid); 
			ctx.sync()
			   .then(ExcelTest.pass)
			   .catch(ExcelTest.reportError);
		});
	}
}
?module ExcelTest {
	export function test_Events_Workbook$AddRemoveSelectionChanged_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext();
		var eventResult1: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		RichApiTest.log.comment("Select A1:A1");
		var range = ctx.workbook.worksheets.getItem("sheet1").getRange("A1:A1");
		range.select();
		ctx.sync()
			.then(() => {
				RichApiTest.log.comment("Adding event");
				eventResult1 = ctx.workbook.onSelectionChanged.add(
					(args: Excel.SelectionChangedEventArgs) => {
						eventCount++;
						RichApiTest.log.comment("first eventCount=" + eventCount);
						return null;
					});
				return ctx.sync();
			})
			.then(() => {
				RichApiTest.log.comment("select another cell");
				var range = ctx.workbook.worksheets.getItem("sheet1").getRange("B3:B3");
				range.select();
				return ctx.sync();
			})
			.then(() => {
				RichApiTest.log.comment("Wait for 2 second");
				return OfficeExtension.Utility._createTimeoutPromise(2000);
			})
			.then(() => {
				RichApiTest.log.comment("EventCount=" + eventCount);
				Util.assertCompareValues(1, eventCount, "Selection event should be fired");
			})
			.then(() => {
				eventResult1.remove();
				return ctx.sync();
			})
			.then(() => {
				Util.assert(!ctx.workbook.onSelectionChanged._registered, "Event handler should be unregistered now");
				Util.assertCompareValues(0, ctx.workbook.onSelectionChanged._handlers.length, "Event handlers should be empty");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Events_Settings$AddRemoveSettingsChanged_cvt_JScript_V13() {
		var ctx = new Excel.RequestContext();
		var eventResult1: OfficeExtension.EventHandlerResult<any>;
		var eventCount = 0;
		ctx.sync()
			.then(() => {
				RichApiTest.log.comment("Adding event");
				eventResult1 = ctx.workbook.settings.onSettingsChanged.add(
					(args: Excel.SettingsChangedEventArgs) => {
						eventCount++;
						RichApiTest.log.comment("first eventCount=" + eventCount);
						return null;
					});
				return ctx.sync();
			})
			.then(() => {
				Office.context.document.settings.set("firstKey", "firstVal");
				return Util.promisify((callback) => Office.context.document.settings.saveAsync(callback))
				
				
				
			})
			.then(() => {
				RichApiTest.log.comment("Wait for 5 second");
				return OfficeExtension.Utility._createTimeoutPromise(5000);
			})
			.then(() => {
				RichApiTest.log.comment("EventCount=" + eventCount);
				Util.assertCompareValues(1, eventCount, "Selection event should be fired");
			})
			.then(() => {
				eventResult1.remove();
				return ctx.sync();
			})
			.then(() => {
				Util.assert(!ctx.workbook.settings.onSettingsChanged._registered, "Event handler should be unregistered now");
				Util.assertCompareValues(0, ctx.workbook.settings.onSettingsChanged._handlers.length, "Event handlers should be empty");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Workbook_GetApplicationCalculationMode_cvt_JScript_V11() {
		var ctx = new Excel.RequestContext();
		var app = ctx.workbook.application;
		ctx.load(app);
		ctx.sync().then(function () {
			var success = true;
			if (app.calculationMode != "Automatic") {
				RichApiTest.log.comment("The actual application calculation mode is '" + app.calculationMode + "'. The expected one is 'Automatic'");
				success = false;
			}
			RichApiTest.log.done(success);
		}, ExcelTest.reportError);
	}
	export function test_Workbook_SuspendApiCalculationUntilNextSync_cvt_JScript_V17() {
		var SheetName = "Sheet1";
		Util.clearSheetBefore(SheetName, () => {
			Excel.run(function (ctx) {
				var app = ctx.workbook.application;
				var sheet = ctx.workbook.worksheets.getItem(SheetName);
				var range1: Excel.Range;
				var range2: Excel.Range;
				var range3: Excel.Range;
				var range4: Excel.Range;
				app.load("calculationMode");
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues(app.calculationMode, "Automatic",
							"Calculation mode should be Automatic.");
						range1 = sheet.getRange("A1:C1")
						range1.values = [[1, 2, "=SUM(A1:B1)"]];
						range1.load("values");
						return ctx.sync();
					})
					.then(function () {
						var expectedRangeValues = [[1, 2, 3]];
						Util.assertCompareArray(range1.values, expectedRangeValues);
						
						app.suspendApiCalculationUntilNextSync();
						range2 = sheet.getRange("A1");
						range2.values = [[10]];
						range3 = sheet.getRange("A1:C1")
						range3.load("values");
						app.load("calculationMode");
						return ctx.sync();
					})
					.then(function () {
						Util.assertCompareValues(app.calculationMode, Excel.CalculationMode.automatic,
							"Automatic calc mode should still have remained as is, even with suspended recalc.");
						
						var expectedRangeValues = [[10, 2, 3]];
						Util.assertCompareArray(range3.values, expectedRangeValues);
						
						range4 = sheet.getRange("A1:C1")
						range4.load("values");
						return ctx.sync();
					})
					.then(function () {
						var rangeValuesToGet = [[10, 2, 12]];
						Util.assertCompareArray(range4.values, rangeValuesToGet);
					})
			})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Workbook_ApplicationViaContextDirectly$GetCalcMode_cvt_JScript_V11() {
		Excel.run(function (ctx) {
			ctx.application.load('calculationMode');
			return ctx.sync()
				.then(function () {
					if (ctx.application.calculationMode != "Automatic") {
						throw new Error("The actual application calculation mode is '" + ctx.application.calculationMode + "'. The expected one is 'Automatic'");
					}
				});
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_GetSelectedRange_cvt_JScript_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A3:B4";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.select();
		ctx.sync().then(function () {
			var range = ctx.workbook.getSelectedRange();
			ctx.load(range);
			ctx.sync().then(function () {
				var success = true;
				if (range.address != rangeAddress) {
					success = false;
					RichApiTest.log.comment("The actual selected range address is '" + range.address + "', while the expected one is '" + rangeAddress + "'.");
				}
				RichApiTest.log.done(success);
			}, ExcelTest.reportError);
		}, ExcelTest.reportError);
	}
	export function test_Workbook_GetActiveCell_cvt_JScript_V17() {
		var sheetName = "Sheet1";
		var rangeAddress = "Sheet1!A3:B4";
		var expectedActiveCellAddress = "Sheet1!A3";
		return Excel.run(async ctx => {
			
			ctx.workbook.worksheets.getItem(sheetName).getRange("A1:A1").select();
			await ctx.sync();
			
			ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).select();
			await ctx.sync();
			var activeCell = ctx.workbook.getActiveCell();
			activeCell.load("address");
			await ctx.sync();
			Util.assertCompareValues(expectedActiveCellAddress, activeCell.address);
		});
	}
	export function test_Workbook_GetWorkbookName_cvt_JScript_V17() {
		Excel.run((ctx) => {
			ctx.workbook.load("name");
			return ctx.sync().then(function () {
				Util.assertCompareValues("AgaveTest.xlsx", ctx.workbook.name);
			})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	export async function test_Workbook_DataConnectionsRefreshAll_cvt_JScript_V17() {
		await Excel.run(async(ctx) => {
			var book = ctx.workbook;
			book.dataConnections.refreshAll;
			await ctx.sync();
			
			
		});
	}
	export async function test_Workbook_GetReadOnly_cvt_JScript_V18() {
		await Excel.run(async(ctx) => {
			var book = ctx.workbook;
			book.load("readOnly");
			await ctx.sync();
			
			ExcelTest.Util.assert(book.readOnly == true || book.readOnly == false);
		});
	}
	export async function test_Workbook_GetSaved_cvt_JScript_V18() {
		await Excel.run(async(ctx) => {
			
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1");
			range.values = [[1]];
			await ctx.sync();
			var book = ctx.workbook;
			book.load("saved");
			await ctx.sync();
			ExcelTest.Util.assertCompareValues(false, book.saved);
		});
	}
	export async function test_Workbook_PutSavedFalse_cvt_JScript_V18() {
		await Excel.run(async(ctx) => {
			var bookToSet = ctx.workbook;
			bookToSet.saved = false;
			var bookToGet = ctx.workbook;
			bookToGet.load("saved");
			await ctx.sync();
			ExcelTest.Util.assertCompareValues(false, bookToGet.saved);
		});
	}
	export async function test_Workbook_PutSavedTrue_cvt_JScript_V18() {
		await Excel.run(async(ctx) => {
			var bookToSet = ctx.workbook;
			bookToSet.saved = true;
			var bookToGet = ctx.workbook;
			bookToGet.load("saved");
			await ctx.sync();
			ExcelTest.Util.assertCompareValues(true, bookToGet.saved);
		});
	}
}
?module ExcelTest {
	export function test_Binding_GetShouldFail_cvt_REST_V11() {
		
		if (Util.isApple()) { return ExcelTest.pass(); }
		RestUtility.ensureDisabledApiFailed("bindings", RichApiTest.RestUtility.httpMethodGet);
	}
}
?module ExcelTest {
}
?module ExcelTest {
	export function test_Chart_AddWithTitleAndLegendSettings_cvt_REST_V11() {
		var desiredTitle: string = "Pie Chart";
		var desiredPosition: string = Excel.ChartLegendPosition.corner;
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: desiredTitle, overlay: false });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateTitlePropertiesOnObject)
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "legend", { position: desiredPosition, overlay: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateLegendPropertiesOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateTitlePropertiesOnObject(title) {
			Util.assert(
				Util.compare(title.text, desiredTitle) &&
				Util.compare(title.overlay, false));
		}
		function validateLegendPropertiesOnObject(legend) {
			Util.assert(
				Util.compare(legend.position, desiredPosition) &&
				Util.compare(legend.overlay, false));
		}
	}
	export function test_Chart_AddAndCheckNullablePropertiesOfTitleAndLegend_cvt_REST_V11() {
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { visible: false });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateTitlePropertiesOnObject)
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "legend", { visible: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateLegendPropertiesOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateTitlePropertiesOnObject(title) {
			Util.assert(
				Util.compare(title.text, null) &&
				Util.compare(title.overlay, null));
		}
		function validateLegendPropertiesOnObject(legend) {
			Util.assert(
				Util.compare(legend.position, null) &&
				Util.compare(legend.overlay, null));
		}
	}
	export function test_Chart_AddAndCheckNullablePropertiesOfDataLabels_cvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(ChartUtil.Rest.Thenable.patchChart("datalabels", {
					position: Excel.ChartDataLabelPosition.outsideEnd,
					separator: "|",
					showBubbleSize: false,
					showCategoryName: true,
					showLegendKey: true,
					showPercentage: true,
					showSeriesName: true,
					showValue: true
				})
			)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			
			.then(validateDataLabelsPropertiesOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateDataLabelsPropertiesOnObject(dataLabels) {
			Util.assert(
				Util.compare(dataLabels.position, null) &&
				Util.compare(dataLabels.separator, null) &&
				Util.compare(dataLabels.showBubbleSize, null) &&
				Util.compare(dataLabels.showCategoryName, null) &&
				Util.compare(dataLabels.showLegendKey, null) &&
				Util.compare(dataLabels.showPercentage, null) &&
				Util.compare(dataLabels.showSeriesName, null) &&
				Util.compare(dataLabels.showValue, null));
		}
	}
}
?
module ExcelTest {
	export function test_Chart_ChartsCollectionPost_bvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartsCollectionAddMethodInvoke_bvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('charts')/charts/add", { "type": "pie", "sourceData": "charts!A1:B4" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartsCollectionAddFailsWithInvalidArgument_bvt_REST_V11() {
		
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.getChartCount())
			.then((count) => Util.assert(count == 0))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('charts')/charts/add", { "type": "pie", "sourceData": "charts!A1:invalid" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ChartUtil.Rest.Thenable.getChartCount())
			.then((count) => Util.assert(count == 0))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartsCollectionAddFailsWhenNonExistantChart_bvt_REST_V11() {
		
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.getChartCount())
			.then((count) => Util.assert(count == 0))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('charts')/charts/add", { "type": "pie", "sourceData": "NonExistantWorksheet!A1:B4" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ChartUtil.Rest.Thenable.getChartCount())
			.then((count) => Util.assert(count == 0))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	
	
	
	
	
	
	
	
	
	
	export function test_Chart_AddWithGlobalNamedRange_cvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('charts')/charts/add", { "type": "pie", "sourceData": "ChartsNovemberGlobalNamedRange" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AddWithDataFromAnotherSheet_cvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('charts')/charts/add", { "type": "pie", "sourceData": "Sheet1!A1:B3" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	export function test_Chart_ChartsCollectionItemAtSuccess_cvt_REST_V11() {
		var createdChartOdataId;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((createdChart) => {
				createdChartOdataId = RestUtility.getODataId(createdChart);
			})
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<any>())
			.then((retrievedChart) => {
				Util.assert(() => (RestUtility.getODataId(retrievedChart) === createdChartOdataId));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartsCollectionGetByName_cvt_REST_V12() {
		var createdChartInfo: { name: string; odataId: string };
		ChartUtil.Rest.removeAll()
			
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((createdChart) => {
				createdChartInfo = {
					name: createdChart.name,
					odataId: RestUtility.getODataId(createdChart)
				};
			})
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(() => RestUtility.get("worksheets('charts')/charts('" + createdChartInfo.name + "')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<any>())
			.then((retrievedChart) => {
				Util.assert(() => (RestUtility.getODataId(retrievedChart) === createdChartInfo.odataId));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartsCollectionItemAtFailIfInvalidArgument_cvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=invalid)"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartsCollectionItemAtFailIfOutOfBounds_cvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NotFound))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartCollectionDeleteSuccess_cvt_REST_V11() {
		var numChartsToCreate = 5;
		ChartUtil.Rest.removeAll()
			.then(() => {
				var promises: OfficeExtension.IPromise<any>[] = [];
				for (var i = 0; i < numChartsToCreate; i++) {
					promises.push(ChartUtil.Rest.createBasicChart())
				}
				return OfficeExtension.Promise.all(promises);
			})
			.then(ChartUtil.Rest.Thenable.getChartCount())
			.then((count) => Util.assert(count == numChartsToCreate))
			.then(ChartUtil.Rest.Thenable.removeAll())
			.then(ChartUtil.Rest.Thenable.getChartCount())
			.then((count) => Util.assert(count === 0, "After removing charts, count should be back to 0"))
		
			.then(ChartUtil.Rest.Thenable.removeAll())
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_CheckDefaultSizeOnAddingChart_cvt_REST_V11() {
		
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				Util.assert(chart.width === 360 && chart.height === 216);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ResizeAndMove_cvt_REST_V11() {
		var desiredTop = 100;
		var desiredLeft = 150;
		var desiredWidth = 300;
		var desiredHeight = 200;
		var createdChartOdataId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartOdataId = RestUtility.getODataId(chart);
				return RestUtility.patch(RestUtility.getODataId(chart), {
					top: 100, left: 150, width: 300, height: 200
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
		
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(validateSizePropertiesOnObject)
		
			.then(() => RestUtility.get(createdChartOdataId))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateSizePropertiesOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateSizePropertiesOnObject(chart) {
			Util.assert(
				Util.compare(chart.top, desiredTop, 5) &&
				Util.compare(chart.left, desiredLeft, 5) &&
				Util.compare(chart.width, desiredWidth, 5) &&
				Util.compare(chart.height, desiredHeight, 5));
		}
	};
	export function test_Chart_ChartTop_cvt_REST_V11() {
		var expectedTopValue = 50;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.patch("worksheets('charts')/charts/itemAt(index=0)", { "top": expectedTopValue }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject((body) => body.top))
			.then((value) => {
				RestUtility.validateValue(value, expectedTopValue, 5);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartAxes_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/axes", "Microsoft.ExcelServices.ChartAxes");
	}
	export function test_Chart_ChartSeriesCollectionCount_cvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/series"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject((body) => body.value.length))
			.then((value) => {
				RestUtility.validateValue(value, 1);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartUpdatesOnSourceDataChange_cvt_REST_V11() {
		var originalValue = 50;
		var valueToSet = 500;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.patch("worksheets('charts')/range(address='B4:B4')", { "values": valueToSet }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/series/itemAt(index=0)/points/itemAt(index=2)"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject((body) => body.value))
			.then((value) => {
				RestUtility.validateValue(value, valueToSet);
			})
			.then(RestUtility.Thenable.patch("worksheets('charts')/range(address='B4:B4')", { "values": originalValue }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AsImage_cvt_REST_V12() {
		if (Util.isiOS()) {
			
			RichApiTest.log.comment("TODO: This test disabled for iOS due to a known rendering issue (VSO:368016).");
			RichApiTest.log.comment("On iOS only, the chart is missing its bottom and right borders.");
			RichApiTest.log.done(true);
		}
		else {
			ChartUtil.Rest.removeAll()
				.then(ChartUtil.Rest.Thenable.createBasicChart())
				.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/Image"))
				.then(RestUtility.Thenable.getBodyAsObject((body) => body.value))
				.then((value) => { if (value.length < 1000) { throw new Error("Image is too small for it to be a valid image"); } })
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		} 
	}
	export function test_Chart_AsImageHeight_cvt_REST_V12() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/Image(width=800, height=800)"))
			.then(RestUtility.Thenable.getBodyAsObject((body) => body.value))
			.then((value) => { if (value.length < 1000) { throw new Error("Image is too small for it to be a valid image"); }})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	export function test_Chart_AsImageWidth_cvt_REST_V12() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/Image(width=800)"))
			.then(RestUtility.Thenable.getBodyAsObject((body) => body.value))
			.then((value) => { if (value.length < 1000) { throw new Error("Image is too small for it to be a valid image"); } })
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AsImageBoth_cvt_REST_V12() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/Image(width=800, height=800)"))
			.then(RestUtility.Thenable.getBodyAsObject((body) => body.value))
			.then((value) => { if (value.length < 1000) { throw new Error("Image is too small for it to be a valid image"); } })
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AsImageBothFill_cvt_REST_V12() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/Image(width=800, height=800, fittingMode='Fill')"))
			.then(RestUtility.Thenable.getBodyAsObject((body) => body.value))
			.then((value) => { if (value.length < 1000) { throw new Error("Image is too small for it to be a valid image"); } })
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AsImageBothFitAndCenter_cvt_REST_V12() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/Image(width=800, height=800, fittingMode='FitAndCenter')"))
			.then(RestUtility.Thenable.getBodyAsObject((body) => body.value))
			.then((value) => { if (value.length < 1000) { throw new Error("Image is too small for it to be a valid image"); } })
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AsImageFitModeAndDefault_cvt_REST_V12() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/Image(fittingMode='FitAndCenter')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AsImageNegative_cvt_REST_V12() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/Image(width=-4)"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_Worksheet_cvt_REST_V12() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/worksheet"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues("Charts", worksheet["name"], "Name");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_Count_cvt_REST_V14() {
		_injectCollectionCountTest_REST("worksheets('charts')/charts/")
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Chart_AddWithNoTitle_cvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(ChartUtil.Rest.Thenable.patchChart("title", { visible: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.visible, false)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_TitleRemovalFollowedBySettingTextOnIt_cvt_REST_V11() {
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { visible: false });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.visible, false)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "title", { text: "Client distribution" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.visible, true)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_TitleRemovalFollowedBySettingOverlay_cvt_REST_V11() {
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { visible: false });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.visible, false)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "title", { overlay: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.visible, true)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SetTitleTextNull_cvt_REST_V11() {
		if (Util.isGraphTest()) {
			
			RichApiTest.log.done(true);
		}
		else {
			
			ChartUtil.Rest.removeAll()
				.then(ChartUtil.Rest.Thenable.createBasicChart())
				.then(ChartUtil.Rest.Thenable.patchChart("title", { text: null }))
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		}
	}
	export function test_Chart_LegendOnAndOffAndOverlay_cvt_REST_V11() {
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "legend", {
					position: Excel.ChartLegendPosition.left,
					overlay: false
				});
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateLegendPropertiesOnObject)
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "legend", { visible: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((legend: Excel.ChartLegend) => Util.assert(Util.compare(legend.visible, false)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "legend", { overlay: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((legend: Excel.ChartLegend) => Util.assert(Util.compare(legend.visible, true)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateLegendPropertiesOnObject(legend) {
			Util.assert(
				Util.compare(legend.position, Excel.ChartLegendPosition.left) &&
				Util.compare(legend.overlay, false) &&
				Util.compare(legend.visible, true));
		}
	}
	export function test_Chart_LegendProperty_cvt_REST_V18() {
		var createdChartId: string;
		var data = [10.0010236220472, 20.0010236220472, 30.0010236220472, 40.0010236220472];
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "legend", {
					visible: false
				});
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateLegendNullablePropertiesOnObject)
			.then(() => {
				return ChartUtil.Rest.patchChartById(createdChartId, "legend", {
					visible: true,
					left: data[0],
					top: data[1],
					width: data[2],
					height: data[3],
					showShadow: true
				});
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateLegendPropertiesOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateLegendPropertiesOnObject(legend) {
			ExcelTest.Util.assertCompareValues(true, legend.visible, "legend.visible");
			ExcelTest.Util.assertCompareValues(data[0], legend.left, "legend.left");
			ExcelTest.Util.assertCompareValues(data[1], legend.top, "legend.top");
			ExcelTest.Util.assertCompareValues(data[2], legend.width, "legend.width");
			ExcelTest.Util.assertCompareValues(data[3], legend.height, "legend.height");
			ExcelTest.Util.assertCompareValues(true, legend.showShadow, "legend.hasShadow");
		}
		function validateLegendNullablePropertiesOnObject(legend) {
			ExcelTest.Util.assertCompareValues(false, legend.visible, "legend.visible");
			ExcelTest.Util.assertCompareValues(null, legend.left, "legend.left");
			ExcelTest.Util.assertCompareValues(null, legend.top, "legend.top");
			ExcelTest.Util.assertCompareValues(null, legend.width, "legend.width");
			ExcelTest.Util.assertCompareValues(null, legend.height, "legend.height");
			ExcelTest.Util.assertCompareValues(null, legend.showShadow, "legend.hasShadow");
		}
	}
	export function test_Chart_LegendEntryProperty_cvt_REST_V18() {
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "legend", {
					visible: true
				});
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateLegendPropertiesOnObject)
			.then((legend) => {
				return ChartUtil.Rest.patchChartById(createdChartId + "/legend/legendEntries/itemAt(index=0)", null, {
					visible: false
				});
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateLegendEntryPropertiesOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateLegendPropertiesOnObject(legend) {
			ExcelTest.Util.assertCompareValues(true, legend.visible, "legend.visible");
		}
		function validateLegendEntryPropertiesOnObject(legendEntry) {
			ExcelTest.Util.assertCompareValues(false, legendEntry.visible, "legendEntry.visible");
		}
	}
	export function test_Chart_DataLabelsShowValuesAndLegendKeysScenario_cvt_REST_V11() {
		
		
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.patch("worksheets('charts')/charts/itemAt(index=0)/datalabels", {
					showvalue: true,
					showlegendkey: true
				})
			)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DataLabelsShowPercentagesAndCategoryNamesWithCustomSeparatorScenario_cvt_REST_V11() {
		
		
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "datalabels", {
					showcategoryname: true,
					showpercentage: true,
					separator: " - "
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "legend", { visible: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DataLabelsBubbleSizeAndSettingSeparatorFirstScenario_cvt_REST_V11() {
		
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.bubble;
		var sourceData: string = sheetName + "!E8:G11";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then(ChartUtil.Rest.Thenable.patchChart("datalabels", {
					separator: '\n',
					showvalue: true,
					showbubblesize: true,
					position: Excel.ChartDataLabelPosition.center
				})
			)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DataLabelsEnsureSettingSeparatorButNothingElseDoesntAddAnyTextsScenario_cvt_REST_V11() {
		
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.bubble;
		var sourceData: string = sheetName + "!E8:G11";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then(ChartUtil.Rest.Thenable.patchChart("datalabels", { separator: '\n' }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DataLabelsCallouts_cvt_REST_V11() {
		
		
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(ChartUtil.Rest.Thenable.patchChart("datalabels", {
					position: Excel.ChartDataLabelPosition.callout,
					showvalue: false
				})
			)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DataLabelsSettingPropertyToFalseWhenNoDataLabelsExist_cvt_REST_V11() {
		
		
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(ChartUtil.Rest.Thenable.patchChart("datalabels", { showvalue: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DataLabelsSettingInvalidPositionForChartType_cvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(ChartUtil.Rest.Thenable.patchChart("datalabels", { position: Excel.ChartDataLabelPosition.bottom }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DataLabelsSettingInvalidElementType1_cvt_REST_V11() {
		
		
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then(ChartUtil.Rest.Thenable.patchChart("datalabels", { showvalue: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ChartUtil.Rest.Thenable.patchChart("datalabels", { showPercentage: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DataLabelsSettingInvalidElementType2_cvt_REST_V11() {
		
		
		
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			
			
			
			.then(ChartUtil.Rest.Thenable.patchChart("datalabels", { showPercentage: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DataLabelsSettingInvalidElementType3_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			
			
			
			.then(ChartUtil.Rest.Thenable.patchChart("datalabels", { showPercentage: false }))
			
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AxisMinMaxUnitPropertiesScenario_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.barClustered;
		var sourceData: string = sheetName + "!E2:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis", {
					
					
					majorunit: 20,
					minorunit: 2,
					maximum: 50,
					
					minimum: 0
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateValueAxisPropertiesOnObject)
			
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/categoryaxis", { maximum: 5 }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((categoryAxis: Excel.ChartAxis) => Util.assert(Util.parseStringAsNumberAndCompare(categoryAxis.maximum, 5)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateValueAxisPropertiesOnObject(valueAxis: Excel.ChartAxis) {
			Util.assert(
				Util.parseStringAsNumberAndCompare(valueAxis.majorUnit, 20) &&
				Util.parseStringAsNumberAndCompare(valueAxis.minorUnit, 2) &&
				Util.parseStringAsNumberAndCompare(valueAxis.maximum, 50) &&
				Util.parseStringAsNumberAndCompare(valueAxis.minimum, 0));
		}
	}
	export function test_Chart_SetAndGetAxisDisplayUnitScenario1_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.barClustered;
		var sourceData: string = sheetName + "!A1:B4";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis", {
					displayUnit: "Hundreds"
				});
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateAxisDisplayUnitPropertiesOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateAxisDisplayUnitPropertiesOnObject(valueAxis: Excel.ChartAxis) {
			Util.assertCompareValues(valueAxis.displayUnit, "Hundreds");
			Util.assertCompareValues(valueAxis.showDisplayUnitLabel, true);
			Util.assertCompareValues(valueAxis.customDisplayUnit, null);
		}
	}
	export function test_Chart_SetAndGetAxisDisplayUnitScenario2_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.line;
		var sourceData: string = sheetName + "!E2:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis", {
					displayUnit: "Thousands"
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((valueAxis: Excel.ChartAxis) => {
				RichApiTest.log.comment(JSON.stringify(valueAxis));
				Util.assertCompareValues("Thousands", valueAxis["displayUnit"], "DisplayUnit");
				Util.assertCompareValues(null, valueAxis["customDisplayUnit"], "CustomDisplayUnit");
				valueAxis.displayUnit = "Hundreds";
				valueAxis.showDisplayUnitLabel = false;
				return ChartUtil.Rest.patchChartById(RestUtility.getODataId(valueAxis), null, valueAxis);
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((valueAxis: Excel.ChartAxis) => {
				RichApiTest.log.comment(JSON.stringify(valueAxis));
				Util.assertCompareValues("Hundreds", valueAxis["displayUnit"], "DisplayUnit");
				Util.assertCompareValues(false, valueAxis["showDisplayUnitLabel"], "ShowDisplayUnitLabel");
				Util.assertCompareValues(null, valueAxis["customDisplayUnit"], "CustomDisplayUnit");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SetAndGetAxisPropertyScenario_cvt_REST_V18() {
		var sheetName: string = "ChartsAxis";
		var chartType: string = Excel.ChartType.line;
		var sourceData: string = sheetName + "!A1:B4";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis", {
					logBase: 5,
					reversePlotOrder: false
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((valueAxis: Excel.ChartAxis) => {
				RichApiTest.log.comment(JSON.stringify(valueAxis));
				Util.assertCompareValues("Primary", valueAxis["axisGroup"], "AxisGroup");
				Util.assertCompareValues("Logarithmic", valueAxis["scaleType"], "ScaleType");
				Util.assertCompareValues(5, valueAxis["logBase"], "LogBase");
				Util.assertCompareValues(false, valueAxis["reversePlotOrder"], "reversePlotOrder");
				Util.assertCompareValues(true, valueAxis["visible"], "visible");
				Util.assertCompareValues("number", typeof (valueAxis.top), "Axis Top");
				Util.assertCompareValues("number", typeof (valueAxis.left), "Axis Left");
				Util.assertCompareValues("number", typeof (valueAxis.width), "Axis Width");
				Util.assertCompareValues("number", typeof (valueAxis.height), "Axis Height");
				valueAxis.visible = false;
				return ChartUtil.Rest.patchChartById(RestUtility.getODataId(valueAxis), null, valueAxis);
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((valueAxis: Excel.ChartAxis) => {
				RichApiTest.log.comment(JSON.stringify(valueAxis));
				Util.assertCompareValues(false, valueAxis["visible"], "visible");
				Util.assertCompareValues(null, valueAxis.top, "Axis Top");
				Util.assertCompareValues(null, valueAxis.left, "Axis left");
				Util.assertCompareValues(null, valueAxis.width, "Axis width");
				Util.assertCompareValues(null, valueAxis.height, "Axis height");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SetAndGetAxisCrossesScenario_cvt_REST_V18() {
		var sheetName: string = "ChartsAxis";
		var chartType: string = Excel.ChartType.line;
		var sourceData: string = sheetName + "!A1:B4";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis", {
					crosses: "Minimum"
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((valueAxis: Excel.ChartAxis) => {
				RichApiTest.log.comment(JSON.stringify(valueAxis));
				Util.assertCompareValues("Minimum", valueAxis["crosses"], "Crosses");
				Util.assertCompareValues(null, valueAxis["crossesAt"], "CrossesAt");
				valueAxis.crosses = "Automatic";
				return ChartUtil.Rest.patchChartById(RestUtility.getODataId(valueAxis), null, valueAxis);
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((valueAxis: Excel.ChartAxis) => {
				RichApiTest.log.comment(JSON.stringify(valueAxis));
				Util.assertCompareValues("Automatic", valueAxis["crosses"], "Crosses");
				Util.assertCompareValues(null, valueAxis["crossesAt"], "CrossesAt");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AxisSetMinToDataTrimmingValuesScenario_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.barClustered;
		var sourceData: string = sheetName + "!E2:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "axes/categoryaxis", { minimum: 2 });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((categoryAxis: Excel.ChartAxis) => Util.assert(Util.parseStringAsNumberAndCompare(categoryAxis.minimum, 2)))
			
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis", { minimum: 8 }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((valueAxis: Excel.ChartAxis) => Util.assert(Util.parseStringAsNumberAndCompare(valueAxis.minimum, 8)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AxisMinMaxUnitPropertyReset_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.barClustered;
		var sourceData: string = sheetName + "!E2:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis", {
					majorunit: 20,
					minorunit: 2,
					maximum: 50,
					minimum: 0
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateValueAxisPropertiesOnObject)
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/categoryaxis", { maximum: 5 }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((categoryAxis: Excel.ChartAxis) => Util.assert(Util.parseStringAsNumberAndCompare(categoryAxis.maximum, 5)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis", {
					majorunit: "",
					minorunit: "",
					maximum: "",
					minimum: ""
				})
			)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateValueAxisDefaultPropertiesOnObject)
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/categoryaxis", { maximum: "" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((categoryAxis: Excel.ChartAxis) => Util.assert(Util.parseStringAsNumberAndCompare(categoryAxis.maximum, 3)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateValueAxisPropertiesOnObject(valueAxis: Excel.ChartAxis) {
			Util.assert(
				Util.parseStringAsNumberAndCompare(valueAxis.majorUnit, 20) &&
				Util.parseStringAsNumberAndCompare(valueAxis.minorUnit, 2) &&
				Util.parseStringAsNumberAndCompare(valueAxis.maximum, 50) &&
				Util.parseStringAsNumberAndCompare(valueAxis.minimum, 0));
		}
		function validateValueAxisDefaultPropertiesOnObject(valueAxis: Excel.ChartAxis) {
			Util.assert(
				Util.parseStringAsNumberAndCompare(valueAxis.majorUnit, 5) &&
				Util.parseStringAsNumberAndCompare(valueAxis.minorUnit, 1) &&
				Util.parseStringAsNumberAndCompare(valueAxis.maximum, 25) &&
				Util.parseStringAsNumberAndCompare(valueAxis.minimum, 0));
		}
	}
	export function test_Chart_SetAndGetAxisTickProperties_cvt_REST_V18() {
		var sheetName: string = "ChartsAxis";
		var chartType: string = Excel.ChartType.line;
		var sourceData: string = sheetName + "!A1:B4";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis", {
					majorTickMark: Excel.AxisTickMark.inside,
					minorTickMark: Excel.AxisTickMark.outside
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((valueAxis: Excel.ChartAxis) => {
				RichApiTest.log.comment(JSON.stringify(valueAxis));
				Util.assertCompareValues(Excel.AxisTickMark.inside, valueAxis["majorTickMark"], "MajorTickMark");
				Util.assertCompareValues(Excel.AxisTickMark.outside, valueAxis["minorTickMark"], "MinorTickMark");
				Util.assertCompareValues(null, valueAxis["tickMarkSpacing"], "TickMarkSpacing");
				Util.assertCompareValues(Excel.AxisTickLabelPosition.nextToAxis, valueAxis["tickLabelPosition"], "TickLabelPosition");
				Util.assertCompareValues(null, valueAxis["tickLabelSpacing"], "TickLabelSpacing");
			})
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/categoryaxis", {
				majorTickMark: Excel.AxisTickMark.outside,
				tickMarkSpacing: 2,
				tickLabelPosition: Excel.AxisTickLabelPosition.high,
				tickLabelSpacing: 2
			})
			)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((categoryAxis: Excel.ChartAxis) => {
				RichApiTest.log.comment(JSON.stringify(categoryAxis));
				Util.assertCompareValues(Excel.AxisTickMark.outside, categoryAxis["majorTickMark"], "MajorTickMark");
				Util.assertCompareValues(Excel.AxisTickMark.none, categoryAxis["minorTickMark"], "MinorTickMark");
				Util.assertCompareValues(2, categoryAxis["tickMarkSpacing"], "TickMarkSpacing");
				Util.assertCompareValues(Excel.AxisTickLabelPosition.high, categoryAxis["tickLabelPosition"], "TickLabelPosition");
				Util.assertCompareValues(2, categoryAxis["tickLabelSpacing"], "TickLabelSpacing");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AxisValueAdjustment_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.barClustered;
		var sourceData: string = sheetName + "!E2:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return RestUtility.get(createdChartId + "/axes/valueaxis");
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateDefaultValueAxisPropertiesOnObject)
			.then(() => RestUtility.get(createdChartId + "/axes/categoryaxis"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((categoryAxis: Excel.ChartAxis) => Util.assert(Util.parseStringAsNumberAndCompare(categoryAxis.maximum, 3) && Util.parseStringAsNumberAndCompare(categoryAxis.minimum, 1)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis", { maximum: 50 }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateAdjustedValueAxisPropertiesOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateDefaultValueAxisPropertiesOnObject(valueAxis: Excel.ChartAxis) {
			Util.assert(
				Util.parseStringAsNumberAndCompare(valueAxis.majorUnit, 5) &&
				Util.parseStringAsNumberAndCompare(valueAxis.minorUnit, 1) &&
				Util.parseStringAsNumberAndCompare(valueAxis.maximum, 25) &&
				Util.parseStringAsNumberAndCompare(valueAxis.minimum, 0));
		}
		function validateAdjustedValueAxisPropertiesOnObject(valueAxis: Excel.ChartAxis) {
			Util.assert(
				Util.parseStringAsNumberAndCompare(valueAxis.majorUnit, 10) &&
				Util.parseStringAsNumberAndCompare(valueAxis.minorUnit, 2) &&
				Util.parseStringAsNumberAndCompare(valueAxis.maximum, 50));
		}
	}
	export function test_Chart_AxisGridlinesAndTitlesScenario_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.xyscatter;
		var sourceData: string = sheetName + "!E8: F11";
		var desiredValueAxisTitle: string = "number of crickets";
		var desiredCategoryAxisTitle: string = "temperature";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis/majorgridlines", { visible: true });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((gridlines: Excel.ChartGridlines) => Util.assert(Util.compare(gridlines.visible, true)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis/minorgridlines", { visible: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((gridlines: Excel.ChartGridlines) => Util.assert(Util.compare(gridlines.visible, true)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis/title", { text: desiredValueAxisTitle }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartAxisTitle) => Util.assert(Util.compare(title.text, desiredValueAxisTitle)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/categoryaxis/majorgridlines", { visible: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((gridlines: Excel.ChartGridlines) => Util.assert(Util.compare(gridlines.visible, true)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/categoryaxis/minorgridlines", { visible: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((gridlines: Excel.ChartGridlines) => Util.assert(Util.compare(gridlines.visible, true)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/categoryaxis", { majorunit: .5 }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((axis: Excel.ChartAxis) => Util.assert(Util.parseStringAsNumberAndCompare(axis.majorUnit, .5)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/categoryaxis", { minorunit: .2 }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((axis: Excel.ChartAxis) => Util.assert(Util.parseStringAsNumberAndCompare(axis.minorUnit, .2)))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/categoryaxis/title", { text: desiredCategoryAxisTitle }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartAxisTitle) => Util.assert(Util.compare(title.text, desiredCategoryAxisTitle)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AxisTitleRetrievalWhenNoAxisTitleExists1_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				return RestUtility.get(RestUtility.getODataId(chart) + "/axes/valueaxis/title");
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.visible, false) && Util.compare(title.text, null)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AxisTitleRetrievalWhenNoAxisTitleExists2_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		var desiredValueAxisTitle: string = "Something that will turn the axis title on";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis/title", { text: desiredValueAxisTitle });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.text, desiredValueAxisTitle)))
			
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "axes/valueaxis/title", { visible: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.visible, false) && Util.compare(title.text, null)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_AxisValueSettingThrowsOnNull_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.xyscatter;
		var sourceData: string = sheetName + "!E8:F11";
		if (Util.isGraphTest()) {
			
			RichApiTest.log.done(true);
		}
		else {
			ChartUtil.Rest.removeAll()
				.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
				.then(ChartUtil.Rest.Thenable.patchChart("axes/valueaxis", { maximum: null }))
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		}
	}
	export function test_Chart_InvalidAxisSet1_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.xyscatter;
		var sourceData: string = sheetName + "!E8:F11";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then(ChartUtil.Rest.Thenable.patchChart("axes/seriesaxis/format/font", { bold: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_InvalidAxisSet2_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.xyscatter;
		var sourceData: string = sheetName + "!E8:F11";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then(ChartUtil.Rest.Thenable.patchChart("axes/seriesaxis/majorgridlines", { visbile: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_InvalidAxisSet3_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType._3DPie;
		var sourceData: string = sheetName + "!A1:B4";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then(ChartUtil.Rest.Thenable.patchChart("axes/valueaxis", { maximum: "" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_InvalidAxisGet1_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.xyscatter;
		var sourceData: string = sheetName + "!E8:F11";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				return RestUtility.get(RestUtility.getODataId(chart) + "/axes/seriesaxis");
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_InvalidAxisGet2_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.xyscatter;
		var sourceData: string = sheetName + "!E8:F11";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				return RestUtility.get(RestUtility.getODataId(chart) + "/axes/seriesaxis/majorgridlines");
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ObjectPeristenceSeries_cvt_REST_V11() {
		
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return RestUtility.post(createdChartId + "/series/itemAt(index=1)/format/fill/setsolidcolor", { color: "FF0000" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			
			.then(() => RestUtility.post(createdChartId + "/setdata", { sourceData: sheetName + "!A1:B4" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			
			.then(() => RestUtility.post(createdChartId + "/series/itemAt(index=1)/format/fill/setsolidcolor", { color: "FF0000" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ObjectPeristencePointsSet_cvt_REST_V11() {
		
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!A1:B4";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return RestUtility.post(createdChartId + "/series/itemAt(index=0)/points/itemAt(index=2)/format/fill/setsolidcolor", { color: "FF0000" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			
			.then(() => RestUtility.post(createdChartId + "/setdata", { sourceData: sheetName + "!A1:B3" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			
			.then(() => RestUtility.post(createdChartId + "/series/itemAt(index=0)/points/itemAt(index=2)/format/fill/setsolidcolor", { color: "FF0000" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ObjectPeristencePointsLoad_cvt_REST_V11() {
		
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!A1:B4";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return RestUtility.post(createdChartId + "/series/itemAt(index=0)/points/itemAt(index=2)/format/fill/setsolidcolor", { color: "FF0000" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			
			.then(() => RestUtility.post(createdChartId + "/setdata", { sourceData: sheetName + "!A1:B3" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			
			.then(() => RestUtility.get(createdChartId + "/series/itemAt(index=0)/points/itemAt(index=2)"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DataPointValues1_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.pie;
		var sourceData: string = sheetName + "!A1:B4";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				return RestUtility.get(RestUtility.getODataId(chart) + "/series/itemAt(index=0)/points");
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<Array<Excel.ChartPoint>>((obj) => obj.value))
			.then(validatePointsCollectionOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validatePointsCollectionOnObject(points: Array<Excel.ChartPoint>) {
			var expectedValues = [132, 323, 50];
			Util.assert(Util.compare(points.length, expectedValues.length));
			for (var i = 0; i < expectedValues.length; i++) {
				Util.assert(Util.parseStringAsNumberAndCompare(points[i].value, expectedValues[i]));
			}
		}
	}
	export function test_Chart_GetOutOfBoundsSeries1_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				return RestUtility.post(RestUtility.getODataId(chart) + "/series/itemAt(index=-5)/format/fill/setsolidcolor", { color: "FF0000" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_GetOutOfBoundsSeries2_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				return RestUtility.post(RestUtility.getODataId(chart) + "/series/itemAt(index=5)/format/fill/setsolidcolor", { color: "FF0000" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_GetOutOfBoundsPoints1_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				return RestUtility.post(RestUtility.getODataId(chart) + "/series/itemAt(index=0)/points/itemAt(index=-1)/format/fill/setsolidcolor", { color: "FF0000" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_GetOutOfBoundsPoints2_cvt_REST_V11() {
		
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				return RestUtility.post(RestUtility.getODataId(chart) + "/series/itemAt(index=0)/points/itemAt(index=100)/format/fill/setsolidcolor", { color: "FF0000" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_TitleEmpty_cvt_REST_V11() {
		var chartName = "TestChart";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: ""  });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.visible, false)))
			
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, null, { name: chartName }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((chart: Excel.Chart) => Util.assert(Util.compare(chart.name, chartName)))
			
			.then(() => RestUtility.get(createdChartId + "/title"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.visible, false)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_TitleLocale_cvt_REST_V11() {
		var chineseTitle = "????";
		var chartName = "TestChart";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: chineseTitle });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, null, { name: chartName }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(() => RestUtility.get(createdChartId + "/title"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.text, chineseTitle)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_TitleLocaleRightToLeft_cvt_REST_V11() {
		var arabicTitle = "????? ??????";
		var chartName = "TestChart";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: arabicTitle });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, null, { name: chartName }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(() => RestUtility.get(createdChartId + "/title"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.text, arabicTitle)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_TitleHorizontalAlignment_cvt_REST_V18() {
		var chartName = "TestChart";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { HorizontalAlignment: "Right" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, null, { name: chartName }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(() => RestUtility.get(createdChartId + "/title"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.horizontalAlignment, "Right")))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_TitleTopLeftWidthHeight_cvt_REST_V18() {
		var chartName = "TestChart";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { Top: 50 , Left: 50.05});
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, null, { name: chartName }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(() => RestUtility.get(createdChartId + "/title"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => {
				Util.assertCompareValues("number", typeof(title.top), "Title Top");
				Util.assertCompareValues("number", typeof(title.left), "Title Left");
				Util.assertCompareValues("number", typeof(title.width), "Title Width");
				Util.assertCompareValues("number", typeof(title.height), "Title Height");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_TitleHiddenFont_cvt_REST_V11() {
		var chartTitle = "Rich API Chart Title";
		var chartName = "TestChart";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: chartTitle });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "title/format/font", {
					bold: false,
					color: "FFFFFE",
					size: 12
				})
			)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "title", { visible: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, null, { name: chartName }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => RestUtility.get(createdChartId + "/title"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.visible, false)))
			
			
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "title", { text: chartTitle }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "title/format/font", {
					bold: true,
					color: "AAAAAB",
					size: 16,
					name: "Algerian"
				})
			)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => RestUtility.get(createdChartId + "/title"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.text, chartTitle) && Util.compare(title.visible, true)))
			.then(() => RestUtility.get(createdChartId + "/title/format/font"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateChartTitleFormatFontOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateChartTitleFormatFontOnObject(font: Excel.ChartFont) {
			Util.assert(
				Util.compare(font.bold, true) &&
				Util.compare(font.color, "#AAAAAB") &&
				Util.compare(font.size, 16) &&
				Util.compare(font.name, "Algerian"));
		}
	}
	
	export function test_Chart_NameGetterDup_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData1: string = sheetName + "!A1:B4";
		var sourceData2: string = sheetName + "!E1:H5";
		var sourceData3: string = sheetName + "!E8:G11";
		var chartTitles = ["Chart1", "Chart2", "Chart3"];
		var chartName = "ChartName";
		var createdChartId1: string;
		var createdChartId2: string;
		var createdChartId3: string;
		ChartUtil.Rest.removeAll()
			
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.pie, sourceData1))
			.then((chart) => {
				createdChartId1 = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId1, null, {
					name: chartName,
					left: 10,
					top: 50
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId1, "title", { text: chartTitles[0] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.columnClustered, sourceData2))
			.then((chart) => {
				createdChartId2 = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId2, null, {
					name: chartName,
					left: 300,
					top: 30
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId2, "title", { text: chartTitles[1] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.bubble, sourceData3))
			.then((chart) => {
				createdChartId3 = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId3, null, {
					name: chartName,
					left: 10,
					top: 50
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId3, "title", { text: chartTitles[2] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/item(name='" + chartName + "')/title"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.text, chartTitles[0])))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_NameGetterNoChart_cvt_REST_V11() {
		var chartName = "ChartName";
		var chartDoesNotExistName = "NotFound";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: chartName });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, null, { name: chartName }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/item(name='" + chartDoesNotExistName + "')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NotFound))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DeleteDupName_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData1: string = sheetName + "!A1:B4";
		var sourceData2: string = sheetName + "!E1:H5";
		var chartTitles = ["Chart1", "Chart2"];
		var chartName = "ChartName";
		var createdChartId1: string;
		var createdChartId2: string;
		ChartUtil.Rest.removeAll()
			
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.pie, sourceData1))
			.then((chart) => {
				createdChartId1 = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId1, null, {
					name: chartName,
					left: 10,
					top: 50
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId1, "title", { text: chartTitles[0] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.bubble, sourceData2))
			.then((chart) => {
				createdChartId2 = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId2, null, { name: chartName });
			})
			.then(() => ChartUtil.Rest.patchChartById(createdChartId2, null, { name: chartName }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId2, "title", { text: chartTitles[1] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/item(name='" + chartName + "')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((item) => (RestUtility.deleteItem(item)))
			
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/item(name='" + chartName + "')/title"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.text, chartTitles[1])))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_List_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData1: string = sheetName + "!A1:B4";
		var sourceData2: string = sheetName + "!E1:H5";
		var sourceData3: string = sheetName + "!E8:G11";
		ChartUtil.Rest.removeAll()
			
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.pie, sourceData1))
			.then(ChartUtil.Rest.Thenable.patchChart(null, { left: 10, top: 50 }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.columnClustered, sourceData2))
			.then(ChartUtil.Rest.Thenable.patchChart(null, { left: 300, top: 30 }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.bubble, sourceData3))
			.then(ChartUtil.Rest.Thenable.patchChart(null, { left: 10, top: 50 }))
			
			.then(RestUtility.Thenable.get("worksheets('charts')/charts"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<Array<Excel.Chart>>((obj) => obj.value))
			.then((charts: Array<Excel.Chart>) => Util.assert(Util.compare(charts.length, 3)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesUpdate_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData: string = sheetName + "!A1:B4";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.columnClustered, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: "Chart by Series row" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => RestUtility.post(createdChartId + "/setdata", { sourceData: sourceData, seriesBy: "columns" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(() => RestUtility.post(createdChartId + "/setdata", { sourceData: sourceData, seriesBy: "auto" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_NameLocale_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData: string = sheetName + "!A1:B4";
		var localizedChartName = "????";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.bubble, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, null, { name: localizedChartName });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => RestUtility.get(createdChartId))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((chart: Excel.Chart) => Util.assert(Util.compare(chart.name, localizedChartName)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_NameLocaleRightToLeft_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData: string = sheetName + "!A1:B4";
		var localizedChartName = "??? ????";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.bubble, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, null, { name: localizedChartName });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => RestUtility.get(createdChartId))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((chart: Excel.Chart) => Util.assert(Util.compare(chart.name, localizedChartName)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DeleteAdd_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData1: string = sheetName + "!A1:B4";
		var sourceData2: string = sheetName + "!E1:H5";
		var chartTitles = ["Chart1", "Chart2"];
		var chartName = "RandomChart";
		var createdChartId1: string;
		var createdChartId2: string;
		ChartUtil.Rest.removeAll()
			
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.pie, sourceData1))
			.then((chart) => {
				createdChartId1 = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId1, null, {
					name: chartName,
					left: 10,
					top: 50
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId1, "title", { text: chartTitles[0] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/item(name='" + chartName + "')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((item) => (RestUtility.deleteItem(item)))
			
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.bubble, sourceData2))
			.then((chart) => {
				createdChartId2 = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId2, null, {
					name: chartName,
					left: 200,
					top: 50
				})
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => ChartUtil.Rest.patchChartById(createdChartId2, "title", { text: chartTitles[1] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/item(name='" + chartName + "')/title"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((title: Excel.ChartTitle) => Util.assert(Util.compare(title.text, chartTitles[1])))
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/item(name='" + chartName + "')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateChartPropertiesOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateChartPropertiesOnObject(chart: Excel.Chart) {
			Util.assert(
				Util.compare(chart.name, chartName) &&
				Util.compare(Math.round(chart.left), 200) &&
				Util.compare(Math.round(chart.top), 50));
		}
	}
	export function test_Chart_DatasourceUpdatedToNull_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData: string = sheetName + "!A1:B4";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.columnClustered, sourceData, "rows"))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: "Chart by Series row" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => RestUtility.post(createdChartId + "/setdata", { sourceData: null, seriesBy: "columns" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DatasourceUpdatedToStringValid_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData: string = sheetName + "!A1:B4";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.columnClustered, sourceData, "rows"))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: "Chart by Series row" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => RestUtility.post(createdChartId + "/setdata", { sourceData: sourceData, seriesBy: "columns" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DatasourceNull_cvt_REST_V11() {
		var sheetName: string = "Charts";
		ChartUtil.Rest.removeAll()
			.then(() => RestUtility.post("worksheets('" + sheetName + "')/charts", { "type": Excel.ChartType.columnClustered, "sourceData": null, "seriesBy": "rows" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DatasourceRangeCleared_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData: string = sheetName + "!A20:C23";
		var rangeValues = [["june", "july", "august"], ["1", "33", "2"], ["123", "11", "12"], ["1", "2", "3"]];
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(RestUtility.Thenable.patch("worksheets('charts')/range(address='A20:C23')", { values: rangeValues }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.cylinderColClustered, sourceData, "rows"))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: "Chart with cleared data range" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('charts')/range(address='A20:C23')/clear", {}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(() => RestUtility.get(createdChartId + "/series/itemAt(index=1)/points"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<Array<Excel.ChartPoint>>((obj) => obj.value))
			.then((points: Array<Excel.ChartPoint>) => Util.assert(Util.compare(points.length, 3)))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DatasourceUnbounded_cvt_REST_V11() {
		var sheetName: string = "Charts";
		var sourceData: string = sheetName + "!K:K";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, Excel.ChartType.pie, sourceData, "auto"))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "title", { text: "Chart with unbounded data" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => RestUtility.get(createdChartId + "/series/itemAt(index=0)/points"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<Array<Excel.ChartPoint>>((obj) => obj.value))
			.then((points: Array<Excel.ChartPoint>) => Util.assert(points.length < 100))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesCount_cvt_REST_V14() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var sheetName: string = "Charts";
			var sourceData: string = sheetName + "!E1:H5";
			var createdChartId: string;
			ChartUtil.Rest.removeAll()
				.then(ChartUtil.Rest.Thenable.createChart(sheetName, "ColumnClustered", sourceData, "auto"))
				.then((chart) => {
					createdChartId = RestUtility.getODataId(chart);
					return _injectCollectionCountTest_REST(createdChartId + "/series/")
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_PointsCount_cvt_REST_V14() {
		var sheetName = "Charts";
		Util.removeAllChartsBefore(sheetName, () => {
			var sheetName: string = "Charts";
			var sourceData: string = sheetName + "!A1:B4";
			var createdChartId: string;
			ChartUtil.Rest.removeAll()
				.then(ChartUtil.Rest.Thenable.createChart(sheetName, "pie", sourceData, "auto"))
				.then((chart) => {
					createdChartId = RestUtility.getODataId(chart);
					return _injectCollectionCountTest_REST(createdChartId + "/series/itemAt(index=0)/points")
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_Chart_TrendlineSetAndGetForwardAndBackward_cvt_REST_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			var sheetName: string = "ChartTrendline";
			var chartType: string = Excel.ChartType.xyscatter;
			var sourceData: string = sheetName + "!A1:B11";
			var createdChartId: string;
			ChartUtil.Rest.removeAll()
				.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
				.then((chart) => {
					createdChartId = RestUtility.getODataId(chart);
					return RestUtility.post(createdChartId + "series/itemAt(0)/trendlines/add", {
						type: "Linear"
					});
				})
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
				.then(RestUtility.Thenable.getBodyAsObject())
				.then(() => ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(0)/trendlines(0)/", {
					forward: 2,
					backward: 3.4,
				})
				)
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
				.then(RestUtility.Thenable.getBodyAsObject())
				.then(validateTrendlinePropertiesOnObject)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
			function validateTrendlinePropertiesOnObject(trendline) {
				ExcelTest.Util.assertCompareValues(2, trendline.forward, "trendline.forward");
				ExcelTest.Util.assertCompareValues(3.4, trendline.backward, "trendline.backward");
			}
		})
	}
	export function test_Chart_TrendlineSetAndGetForwardAndBackwardOnMovingAverage_cvt_REST_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			var sheetName: string = "ChartTrendline";
			var chartType: string = Excel.ChartType.xyscatter;
			var sourceData: string = sheetName + "!A1:B11";
			var createdChartId: string;
			ChartUtil.Rest.removeAll()
				.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
				.then((chart) => {
					createdChartId = RestUtility.getODataId(chart);
					return RestUtility.post(createdChartId + "series/itemAt(0)/trendlines/add", {
						type: "MovingAverage"
					});
				})
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
				.then(RestUtility.Thenable.getBodyAsObject())
				.then(() => ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(0)/trendlines(0)/", {
					forward: 2,
					backward: 3.4,
				})
				)
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		})
	}
	export function test_Chart_DeleteTrendline_cvt_REST_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			var sheetName: string = "ChartTrendline";
			var chartType: string = Excel.ChartType.xyscatter;
			var sourceData: string = sheetName + "!A1:B11";
			var createdChartId: string;
			ChartUtil.Rest.removeAll()
				.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
				.then((chart) => {
					createdChartId = RestUtility.getODataId(chart);
					return RestUtility.post(createdChartId + "series/itemAt(0)/trendlines/add", {
						type: "Linear"
					});
				})
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
				.then(RestUtility.Thenable.getBodyAsObject())
				.then(RestUtility.Thenable.post("worksheets('ChartTrendline')/charts/itemAt(index=0)/series/itemAt(0)/trendlines(0)/delete", {}))
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
				.then(RestUtility.Thenable.get("worksheets('ChartTrendline')/charts/itemAt(index=0)/series/itemAt(0)/trendlines/count"))
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
				.then(RestUtility.Thenable.getBodyAsObject())
				.then(validateTrendlinePropertiesOnObject)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
			function validateTrendlinePropertiesOnObject(result) {
				ExcelTest.Util.assertCompareValues(0, result.value, "Expected trendline count");
			}
		})
	}
	export function test_Chart_TrendlineSetAndGetDisplayEquationAndDisplayRSquared_cvt_REST_V18() {
		var sheetName: string = "ChartTrendline";
		var chartType: string = Excel.ChartType.xyscatter;
		var sourceData: string = sheetName + "!A1:B11";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return RestUtility.post(createdChartId + "series/itemAt(0)/trendlines/add", {
					type: "Linear"
				});
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(0)/trendlines(0)/", {
				displayEquation: true,
				displayRSquared: true,
				})
			)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateTrendlinePropertiesOnObject)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
		function validateTrendlinePropertiesOnObject(trendline) {
			ExcelTest.Util.assertCompareValues(true, trendline.displayEquation, "trendline.displayEquation");
			ExcelTest.Util.assertCompareValues(true, trendline.displayRSquared, "trendline.displayRSquared");
		}
	}
	export function test_Chart_TrendlineSetAndGetDisplayEquationAndDisplayRSquaredOnMovingAverage_cvt_REST_V18() {
		var sheetName: string = "ChartTrendline";
		var chartType: string = Excel.ChartType.xyscatter;
		var sourceData: string = sheetName + "!A1:B11";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return RestUtility.post(createdChartId + "series/itemAt(0)/trendlines/add", {
					type: "MovingAverage"
				});
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(() => ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(0)/trendlines(0)/", {
				displayEquation: true,
				displayRSquared: true,
			})
		)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_Chart_AddSeries_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!A1:B4";
		var seriesName: string = "NewSeries";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return RestUtility.post(createdChartId + "/series/add", { name: seriesName, index: 1 });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(() => RestUtility.get(createdChartId + "/series/itemAt(index=1)"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assertCompareValues(seriesName, series.name))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_DeleteSeries_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return RestUtility.post(createdChartId + "/series/itemAt(index=1)/delete");
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(() => RestUtility.get(createdChartId + "/series"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<Array<Excel.ChartSeries>>((obj) => obj.value))
			.then((seriesCol: Array<Excel.ChartSeries>) => Util.assertCompareValues(2, seriesCol.length))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesGetAndSetChartType_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		var createdChartId: string;
		var targetType: string = Excel.ChartType.lineMarkers;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=1)", { chartType: targetType });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assertCompareValues(targetType, series.chartType))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesGetAndSetFiltered_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.lineMarkers;
		var sourceData: string = sheetName + "!E1:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=0)", { filtered: true });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assert(series.filtered, "Series.filtered"))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesGetAndSetHasDataLabels_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.lineMarkers;
		var sourceData: string = sheetName + "!E1:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=0)", { hasDataLabels: true });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assert(series.hasDataLabels, "Series.hasDataLabels"))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesGetAndSetMarkerSize_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.lineMarkers;
		var sourceData: string = sheetName + "!E1:H5";
		var markerSize = 10;
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=1)", { markerSize: markerSize });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assertCompareValues(markerSize, series.markerSize))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesGetAndSetMarkerStyle_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.lineMarkers;
		var sourceData: string = sheetName + "!E1:H5";
		var markerStyle = "Square";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=1)", { markerStyle: markerStyle });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assertCompareValues(markerStyle, series.markerStyle))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_TrendlineSetAndGetNameAndIntercept_cvt_REST_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			var sheetName: string = "ChartTrendline";
			var chartType: string = Excel.ChartType.xyscatter;
			var sourceData: string = sheetName + "!A1:B11";
			var createdChartId: string;
			ChartUtil.Rest.removeAll()
				.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
				.then((chart) => {
					createdChartId = RestUtility.getODataId(chart);
					return RestUtility.post(createdChartId + "series/itemAt(0)/trendlines/add", {
						type: "Linear"
					});
				})
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
				.then(RestUtility.Thenable.getBodyAsObject())
				.then(() => ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(0)/trendlines(0)/", {
					name: "Custom Name",
					intercept: 1234567,
				})
				)
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
				.then(RestUtility.Thenable.getBodyAsObject())
				.then(validateTrendlinePropertiesOnObject)
				.then(() => ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(0)/trendlines(0)/", {
					name: null,
					intercept: "",
				})
				)
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
				.then(RestUtility.Thenable.getBodyAsObject())
				.then(validateTrendlinePropertiesOnObject2)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
			function validateTrendlinePropertiesOnObject(trendline) {
				ExcelTest.Util.assertCompareValues("Custom Name", trendline.name, "Trendline Custom Name");
				ExcelTest.Util.assertCompareValues(1234567, trendline.intercept, "Trendline Custom Intercept");
			}
			function validateTrendlinePropertiesOnObject2(trendline) {
				ExcelTest.Util.assertCompareValues("Linear (Sales)", trendline.name, "Trendline Automation Name");
				ExcelTest.Util.assertCompareValues(0, trendline.intercept, "Trendline Automation Intercept");
			}
		})
	}
	export function test_Chart_TrendlineSetInterceptOnWrongTypeTrendline_cvt_REST_V18() {
		var sheetName = "ChartTrendline";
		Util.removeAllChartsBefore(sheetName, () => {
			var sheetName: string = "ChartTrendline";
			var chartType: string = Excel.ChartType.xyscatter;
			var sourceData: string = sheetName + "!A1:B11";
			var createdChartId: string;
			ChartUtil.Rest.removeAll()
				.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
				.then((chart) => {
					createdChartId = RestUtility.getODataId(chart);
					return RestUtility.post(createdChartId + "series/itemAt(0)/trendlines/add", {
						type: "MovingAverage"
					});
				})
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
				.then(RestUtility.Thenable.getBodyAsObject())
				.then(() => ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(0)/trendlines(0)/", {
					intercept: 1234567,
				})
				)
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		})
	}
	export function test_Chart_SeriesGetAndSetShowShadow_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.lineMarkers;
		var sourceData: string = sheetName + "!E1:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=1)", { showShadow: true });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assert(series.showShadow))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesGetAndSetMarkerBackgroundColor_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.lineMarkers;
		var sourceData: string = sheetName + "!E1:H5";
		var markerColor = "#555555";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=1)", { markerBackgroundColor: markerColor });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assertCompareValues(markerColor, series.markerBackgroundColor))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesGetAndSetMarkerForegroundColor_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.lineMarkers;
		var sourceData: string = sheetName + "!E1:H5";
		var markerColor = "#555555";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=1)", { markerForegroundColor: markerColor });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assertCompareValues(markerColor, series.markerForegroundColor))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesSetMarkerForegroundColorForInvalidType_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=1)", { markerForegroundColor: "#555555" });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesGetAndSetPlotOrder_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.lineMarkers;
		var sourceData: string = sheetName + "!E1:H5";
		var newPlotOrder = 2;
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=1)", { plotOrder: newPlotOrder });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assertCompareValues(newPlotOrder, series.plotOrder))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesGetAndSetSmooth_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.lineMarkers;
		var sourceData: string = sheetName + "!E1:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=1)", { smooth: true });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((series: Excel.ChartSeries) => Util.assert(series.smooth))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_SeriesSetSmoothForInvalidType_cvt_REST_V18() {
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		var createdChartId: string;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then((chart) => {
				createdChartId = RestUtility.getODataId(chart);
				return ChartUtil.Rest.patchChartById(createdChartId, "series/itemAt(index=1)", { smooth: true });
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}?module ExcelTest {
	export function test_Chart_Chart_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/format", "Microsoft.ExcelServices.ChartAreaFormat");
	}
	export function test_Chart_ChartFill_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/format/fill", "Microsoft.ExcelServices.ChartFill");
	}
	export function test_Chart_ChartFont_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/format/font", "Microsoft.ExcelServices.ChartFont");
	}
	export function test_Chart_ChartSeriesFormat_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/series/itemAt(index=0)/format", "Microsoft.ExcelServices.ChartSeriesFormat");
	}
	export function test_Chart_ChartSeriesFormatFill_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/series/itemAt(index=0)/format/fill", "Microsoft.ExcelServices.ChartFill");
	}
	export function test_Chart_ChartAxisFormat_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/axes/categoryaxis/format", "Microsoft.ExcelServices.ChartAxisFormat");
	}
	export function test_Chart_ChartAxisFormatFont_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/axes/categoryaxis/format/font", "Microsoft.ExcelServices.ChartFont");
	}
	export function test_Chart_ChartAxisFormatLine_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/axes/categoryaxis/format/line", "Microsoft.ExcelServices.ChartLineFormat");
	}
	export function test_Chart_ChartAxisTitleFormat_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/axes/categoryaxis/title/format", "Microsoft.ExcelServices.ChartAxisTitleFormat");
	}
	export function test_Chart_ChartAxisTitleFormatFont_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/axes/categoryaxis/title/format/font", "Microsoft.ExcelServices.ChartFont");
	}
	export function test_Chart_ChartDatalabelsFormat_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/datalabels/format", "Microsoft.ExcelServices.ChartDataLabelFormat");
	}
	export function test_Chart_ChartDatalabelsFormatFont_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/datalabels/format/font", "Microsoft.ExcelServices.ChartFont");
	}
	export function test_Chart_ChartDatalabelsFormatFill_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/datalabels/format/fill", "Microsoft.ExcelServices.ChartFill");
	}
	export function test_Chart_ChartAxisGridLineFormat_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/axes/categoryaxis/majorgridlines/format", "Microsoft.ExcelServices.ChartGridlinesFormat");
	}
	export function test_Chart_ChartLegendFormat_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/legend/format", "Microsoft.ExcelServices.ChartLegendFormat");
	}
	export function test_Chart_ChartLegendFormatFont_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/legend/format/font", "Microsoft.ExcelServices.ChartFont");
	}
	export function test_Chart_ChartLegendFormatFill_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/legend/format/fill", "Microsoft.ExcelServices.ChartFill");
	}
	export function test_Chart_ChartTitleFormat_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/title/format", "Microsoft.ExcelServices.ChartTitleFormat");
	}
	export function test_Chart_ChartTitleFormatFont_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/title/format/font", "Microsoft.ExcelServices.ChartFont");
	}
	export function test_Chart_ChartTitleFormatFill_cvt_REST_V11() {
		ChartUtil.Rest.getChartPropertyWithAxisAndValidateObjectType("worksheets('charts')/charts/itemAt(index=0)/title/format/fill", "Microsoft.ExcelServices.ChartFill");
	}
	export function test_Chart_ChartLegendFormatFontBold_cvt_REST_V11() {
		ChartUtil.Rest.setChartFontPropertyAndValidateValue(
			"worksheets('charts')/charts/itemAt(index=0)/legend/format/font",
			{ "bold": true },
			"worksheets('charts')/charts/itemAt(index=0)/legend/format/font/bold",
			true
			);
	}
	export function test_Chart_ChartLegendFormatFontColor_cvt_REST_V11() {
		ChartUtil.Rest.setChartFontPropertyAndValidateValue(
			"worksheets('charts')/charts/itemAt(index=0)/legend/format/font",
			{ "color": "#FFFF00" },
			"worksheets('charts')/charts/itemAt(index=0)/legend/format/font/color",
			"#FFFF00"
			);
	}
	export function test_Chart_ChartLegendFormatFontItalic_cvt_REST_V11() {
		ChartUtil.Rest.setChartFontPropertyAndValidateValue(
			"worksheets('charts')/charts/itemAt(index=0)/legend/format/font",
			{ "italic": true },
			"worksheets('charts')/charts/itemAt(index=0)/legend/format/font/italic",
			true
			);
	}
	export function test_Chart_ChartLegendFormatFontName_cvt_REST_V11() {
		ChartUtil.Rest.setChartFontPropertyAndValidateValue(
			"worksheets('charts')/charts/itemAt(index=0)/legend/format/font",
			{ "name": "Aharoni" },
			"worksheets('charts')/charts/itemAt(index=0)/legend/format/font/name",
			"Aharoni"
			);
	}
	export function test_Chart_ChartLegendFormatFontSize_cvt_REST_V11() {
		ChartUtil.Rest.setChartFontPropertyAndValidateValue(
			"worksheets('charts')/charts/itemAt(index=0)/legend/format/font",
			{ "size": 11 },
			"worksheets('charts')/charts/itemAt(index=0)/legend/format/font/size",
			11
			);
	}
	
	
	
	
	
	
	export function test_Chart_ChartTitleFormatFillClear_cvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('charts')/charts/itemAt(index=0)/title/format/fill/clear"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartTitleFormatFillSetSolidColor_cvt_REST_V11() {
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('charts')/charts/itemAt(index=0)/title/format/fill/setsolidcolor", {"color":"red"}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Chart_ChartLineFormat_cvt_REST_V11() {
		var expectedColor = "#FF0000";
		var sheetName: string = "Charts";
		var chartType: string = Excel.ChartType.columnClustered;
		var sourceData: string = sheetName + "!E1:H5";
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createChart(sheetName, chartType, sourceData))
			.then(RestUtility.Thenable.patch("worksheets('charts')/charts/itemAt(index=0)/axes/categoryaxis/majorgridlines/format/line", { "color": expectedColor }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(validateColorPropertiesOnObject)
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('charts')/charts/itemAt(index=0)/axes/categoryaxis/majorgridlines/format/line/clear"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('charts')/charts/itemAt(index=0)/axes/categoryaxis/majorgridlines/format/line/color"))
			.then(validateValueIsUndefined)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateColorPropertiesOnObject(obj) {
			Util.assert(Util.compare(obj.color, expectedColor));
		}
		function validateValueIsUndefined(obj) {
			Util.assert(Util.compare(obj.value, undefined));
		}
	}
}
?module ExcelTest {
	export function test_ConditionalFormats_GetCount_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='C5:E5')/conditionalFormats/Count")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(1, result["value"], "Count");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetRange_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='C5:E5')/conditionalFormats/ItemAt(index=0)/Range")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("ConditionalFormat!A5:E5", result["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetPriority_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='C9:C15')/conditionalFormats/ItemAt(index=0)/Priority")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(0, result["value"], "Priority");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetPriority_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='D9:D15')/conditionalFormats/ItemAt(index=0)", { "Priority": 1 })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetPriorityGreaterThanMax_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='D9:D15')/conditionalFormats/ItemAt(index=1)", { "Priority": 2 })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetStopIfTrue_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='H9:H15')/conditionalFormats/ItemAt(index=0)/StopIfTrue")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(true, result["value"], "StopIfTrue");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetStopIfTrueFail_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='E9:E15')/conditionalFormats/ItemAt(index=0)", { "StopIfTrue": true })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetType_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='A9:A15')/conditionalFormats/ItemAt(index=0)/Type")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("IconSet", result["value"], "Type");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarShowValue_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='E9:E15')/conditionalFormats/ItemAt(index=0)/DataBar/ShowDataBarOnly")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(false, result["value"], "ShowDataBarOnly");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarShowValue_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar", { "ShowDataBarOnly": true })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/ShowDataBarOnly"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(true, result["value"], "ShowDataBarOnly");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarBarDirection_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='E9:E15')/conditionalFormats/ItemAt(index=0)/DataBar/BarDirection")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalDataBarDirection.context, result["value"], "BarDirection");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarBarDirection_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar", { "BarDirection": Excel.ConditionalDataBarDirection.rightToLeft })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/BarDirection"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalDataBarDirection.rightToLeft, result["value"], "BarDirection");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarBorderColor_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='E9:E15')/conditionalFormats/ItemAt(index=1)/DataBar/PositiveFormat/BorderColor")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("", result["value"], "BorderColor");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarBorderColor_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/PositiveFormat", { "BorderColor": "#000001" })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/PositiveFormat/BorderColor"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("#000001", result["value"], "BorderColor");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarAxisFormat_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='E9:E15')/conditionalFormats/ItemAt(index=0)/DataBar/AxisFormat")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalDataBarAxisFormat.automatic, result["value"], "AxisFormat");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarAxisFormat_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar", { "AxisFormat": Excel.ConditionalDataBarAxisFormat.cellMidPoint })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/AxisFormat"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalDataBarAxisFormat.cellMidPoint, result["value"], "AxisFormat");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarPositiveFormatColor_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='E9:E15')/conditionalFormats/ItemAt(index=0)/DataBar/PositiveFormat/FillColor")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("#638EC6", result["value"], "FillColor");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPositiveFormatColor_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/PositiveFormat", { "FillColor": "#000001" })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/PositiveFormat/FillColor"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("#000001", result["value"], "FillColor");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarPositiveFormatGradient_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='E9:E15')/conditionalFormats/ItemAt(index=1)/DataBar/PositiveFormat/GradientFill")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(true, result["value"], "GradientFill");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarPositiveFormatGradient_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/PositiveFormat", { "GradientFill": false })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/PositiveFormat/GradientFill"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(false, result["value"], "GradientFill");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarNegativeFormatColor_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='E9:E15')/conditionalFormats/ItemAt(index=0)/DataBar/NegativeFormat/FillColor")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("#FF0000", result["value"], "FillColor");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarNegativeFormatColor_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/NegativeFormat", { "FillColor": "#000001" })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar/NegativeFormat/FillColor"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("#000001", result["value"], "FillColor");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarLowerBoundRuleType_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='E9:E15')/conditionalFormats/ItemAt(index=0)/DataBar")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalFormatRuleType.automatic, result["lowerBoundRule"]["type"], "Type");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarLowerBoundRuleType_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar", { "lowerBoundRule": { "Type": Excel.ConditionalFormatRuleType.number } })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='F9:F15')/conditionalFormats/ItemAt(index=0)/DataBar"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalFormatRuleType.number, result["lowerBoundRule"]["type"], "Type");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarLowerBoundRuleFormulaRange_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='G9:G15')/conditionalFormats/ItemAt(index=0)/DataBar")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("ConditionalFormat!$F$9", result["lowerBoundRule"]["formula"], "Formula");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarLowerBoundRuleFormulaRange_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='I9:I15')/conditionalFormats/ItemAt(index=0)/DataBar", { "lowerBoundRule": { "type": Excel.ConditionalFormatRuleType.formula, "Formula": "=ConditionalFormat!$A$1" } })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='I9:I15')/conditionalFormats/ItemAt(index=0)/DataBar"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("ConditionalFormat!$A$1", result["lowerBoundRule"]["formula"], "Formula");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_GetDatabarUpperBoundRuleFormulaValue_cvt_REST_V15() {
		RestUtility.get("worksheets('ConditionalFormat')/range(address='G9:G15')/conditionalFormats/ItemAt(index=0)/DataBar")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("5", result["upperBoundRule"]["formula"], "Formula");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarLowerBoundRuleFormulaValue_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='I9:I15')/conditionalFormats/ItemAt(index=0)/DataBar", { "lowerBoundRule": { "type": Excel.ConditionalFormatRuleType.formula, "Formula": 4 } })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='I9:I15')/conditionalFormats/ItemAt(index=0)/DataBar"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("4", result["lowerBoundRule"]["formula"], "Formula");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetDatabarLowerBoundRuleFormulaString_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='I9:I15')/conditionalFormats/ItemAt(index=0)/DataBar", { "lowerBoundRule": { "type": Excel.ConditionalFormatRuleType.formula, "Formula": "\"=ConditionalFormat!$A$1\"" } })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='I9:I15')/conditionalFormats/ItemAt(index=0)/DataBar"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues("\"=ConditionalFormat!$A$1\"", result["lowerBoundRule"]["formula"], "Formula");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AddCustom_cvt_REST_V15() {
		RestUtility.postAsUrlAction("worksheets('ConditionalFormat')/range(address='M5:M8')/conditionalFormats/clearAll")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.post("worksheets('ConditionalFormat')/range(address='M5:M8')/conditionalFormats/add", { type: Excel.ConditionalFormatType.custom }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalFormatType.custom, result["type"], "Type");
			})
			.then(RestUtility.Thenable.patch("worksheets('ConditionalFormat')/range(address='M5:M8')/conditionalFormats/ItemAt(index=0)/Custom/rule", { Formula1: "=M5<10" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('ConditionalFormat')/range(address='M5:M8')/conditionalFormats/ItemAt(index=0)/Custom/format/font", { bold: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='M5:M8')/conditionalFormats/ItemAt(index=0)/Custom/format/font"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(true, result["bold"], "Font Bold");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AddDatabar_cvt_REST_V15() {
		RestUtility.postAsUrlAction("worksheets('ConditionalFormat')/range(address='M5:M8')/conditionalFormats/clearAll")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.post("worksheets('ConditionalFormat')/range(address='M5:M8')/conditionalFormats/add", { type: Excel.ConditionalFormatType.dataBar }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalFormatType.dataBar, result["type"], "Type");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AddIconSet_cvt_REST_V15() {
		RestUtility.postAsUrlAction("worksheets('ConditionalFormat')/range(address='N5:N8')/conditionalFormats/clearAll")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.post("worksheets('ConditionalFormat')/range(address='N5:N8')/conditionalFormats/add", { type: Excel.ConditionalFormatType.iconSet }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalFormatType.iconSet, result["type"], "Type");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetIconProperties_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='I25:I29')/conditionalFormats/ItemAt(index=0)/IconSet", { "showIconOnly": true })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='I25:I29')/conditionalFormats/ItemAt(index=0)/IconSet"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(true, result["showIconOnly"], "showIconOnly");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetIconCriteria_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='I25:I29')/conditionalFormats/ItemAt(index=0)/IconSet", {
			"criteria":
			[
				{ "type": Excel.ConditionalFormatIconRuleType.percent, "Formula": 20, "operator": Excel.ConditionalIconCriterionOperator.greaterThanOrEqual },
				{ "type": Excel.ConditionalFormatIconRuleType.percent, "Formula": 50, "operator": Excel.ConditionalIconCriterionOperator.greaterThan },
				{ "type": Excel.ConditionalFormatIconRuleType.number, "Formula": 80, "operator": Excel.ConditionalIconCriterionOperator.greaterThanOrEqual }
			]
		})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='I25:I29')/conditionalFormats/ItemAt(index=0)/IconSet"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.number, result["criteria"][2]["type"], "crit 2 type");
				Util.assertCompareValues("50", result["criteria"][1]["formula"], "crit 1 formula");
				Util.assertCompareValues(Excel.ConditionalIconCriterionOperator.greaterThan, result["criteria"][1]["operator"], "crit 1 operator");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_SetIconCriteriaCustomIcon_cvt_REST_V15() {
		RestUtility.patch("worksheets('ConditionalFormat')/range(address='I25:I29')/conditionalFormats/ItemAt(index=0)/IconSet", {
			"criteria":
			[
				{ "type": Excel.ConditionalFormatIconRuleType.percent, "Formula": 20, "operator": Excel.ConditionalIconCriterionOperator.greaterThanOrEqual, "customicon": Excel.icons.fiveArrows.yellowDownInclineArrow },
				{ "type": Excel.ConditionalFormatIconRuleType.percent, "Formula": 50, "operator": Excel.ConditionalIconCriterionOperator.greaterThan },
				{ "type": Excel.ConditionalFormatIconRuleType.number, "Formula": 80, "operator": Excel.ConditionalIconCriterionOperator.greaterThanOrEqual }
			]
		})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('ConditionalFormat')/range(address='I25:I29')/conditionalFormats/ItemAt(index=0)/IconSet"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.IconSet.fiveArrows, result["criteria"][0]["customIcon"]["set"], "crit 0 icon");
				Util.assertCompareValues(Excel.ConditionalFormatIconRuleType.number, result["criteria"][2]["type"], "crit 2 type");
				Util.assertCompareValues("50", result["criteria"][1]["formula"], "crit 1 formula");
				Util.assertCompareValues(Excel.ConditionalIconCriterionOperator.greaterThan, result["criteria"][1]["operator"], "crit 1 operator");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AddColorScale_cvt_REST_V15() {
		RestUtility.postAsUrlAction("worksheets('ConditionalFormat')/range(address='N5:N8')/conditionalFormats/clearAll")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.post("worksheets('ConditionalFormat')/range(address='N5:N8')/conditionalFormats/add", { type: Excel.ConditionalFormatType.colorScale }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(Excel.ConditionalFormatType.colorScale, result["type"], "Type");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AddCellValue_cvt_REST_V15() {
		RestUtility.postAsUrlAction("worksheets('ConditionalFormat')/range(address='T20:T23')/conditionalFormats/clearAll")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.post("worksheets('ConditionalFormat')/range(address='T20:T23')/conditionalFormats/add", { type: Excel.ConditionalFormatType.cellValue }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.patch("worksheets('ConditionalFormat')/range(address='T20:T23')/conditionalFormats/ItemAt(index=0)/CellValue/format/fill", { color: "#0000FF" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('ConditionalFormat')/range(address='T20:T23')/conditionalFormats/ItemAt(index=0)/CellValue", {
				"rule":
				{ "operator": Excel.ConditionalCellValueOperator.notBetween, "Formula1": "=3", "Formula2": "=10" },
			}))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_ConditionalFormats_AddCellValueOneOperator_cvt_REST_V15() {
		RestUtility.postAsUrlAction("worksheets('ConditionalFormat')/range(address='T20:T23')/conditionalFormats/clearAll")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.post("worksheets('ConditionalFormat')/range(address='T20:T23')/conditionalFormats/add", { type: Excel.ConditionalFormatType.cellValue }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.patch("worksheets('ConditionalFormat')/range(address='T20:T23')/conditionalFormats/ItemAt(index=0)/CellValue/format/fill", { color: "#FF0000" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('ConditionalFormat')/range(address='T20:T23')/conditionalFormats/ItemAt(index=0)/CellValue", {
				"rule":
				{ "operator": Excel.ConditionalCellValueOperator.equalTo, "Formula1": "=3", "Formula2": null },
			}))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
module ExcelTest {
	export function test_CustomXmlParts_GetAll_cvt_REST_V15() {
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then(() => RestUtility.get("customXmlParts"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => CustomXmlPartsUtil.Common.Helper.validateResetCollection(data.value))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_Add_cvt_REST_V15() {
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then(() => RestUtility.post("customXmlParts/add", { "xml": CustomXmlPartsUtil.Xml.makeFragment(CustomXmlPartsUtil.Namespace.ns3) }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((part: Excel.CustomXmlPart) => Util.assertCompareValues(CustomXmlPartsUtil.Namespace.ns3, part.namespaceUri, "Namespace"))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_Update_cvt_REST_V15() {
		var xmlUpdated: string = CustomXmlPartsUtil.Xml.makeFragment(CustomXmlPartsUtil.Namespace.ns3);
		var id: string;
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then((part: Excel.CustomXmlPart) => id = part.id)
			.then(() => RestUtility.post("customXmlParts('" + id + "')/setXml", { "xml": xmlUpdated }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(() => RestUtility.get("customXmlParts('" + id + "')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((part: Excel.CustomXmlPart) => Util.assertCompareValues(CustomXmlPartsUtil.Namespace.ns3, part.namespaceUri, "Namespace"))
			.then(() => RestUtility.get("customXmlParts('" + id + "')/xml"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => Util.assertCompareValues(xmlUpdated, data.value, "XML"))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_Delete_cvt_REST_V15() {
		var id: string;
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then((part: Excel.CustomXmlPart) => id = part.id)
			.then(() => RestUtility.deleteItem("customXmlParts('" + id + "')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(() => RestUtility.get("customXmlParts('" + id + "')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NotFound))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetByNamespace_cvt_REST_V15() {
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then(() => RestUtility.get("customXmlParts/byNamespace(namespaceUri=@v)?@v='" + CustomXmlPartsUtil.Namespace.ns2 + "'"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => CustomXmlPartsUtil.Common.Helper.validateCollectionNamespace(data.value, 2 , CustomXmlPartsUtil.Namespace.ns2))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_CantGetByNamespace_cvt_REST_V15() {
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then(() => RestUtility.get("customXmlParts/byNamespace(namespaceUri=@v)?@v='https://microsoft.com/excel/test/cantfind'"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => CustomXmlPartsUtil.Common.Helper.validateCollection(data.value, 0 ))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetOnlyItem0_cvt_REST_V15() {
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then(() => RestUtility.get("customXmlParts/byNamespace(namespaceUri=@v)/onlyItem?@v='" + CustomXmlPartsUtil.Namespace.ns3 + "'"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(RestUtility.Thenable.validateErrorCode(Excel.ErrorCodes.invalidOperation))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetOnlyItem1_cvt_REST_V15() {
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then(() => RestUtility.get("customXmlParts/byNamespace(namespaceUri=@n)/onlyItem?@n='" + CustomXmlPartsUtil.Namespace.ns1 + "'"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((part: Excel.CustomXmlPart) => Util.assertCompareValues(CustomXmlPartsUtil.Namespace.ns1, part.namespaceUri, "Namespace"))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetOnlyItem2_cvt_REST_V15() {
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then(() => RestUtility.get("customXmlParts/byNamespace(namespaceUri=@v)/onlyItem?@v='" + CustomXmlPartsUtil.Namespace.ns2 + "'"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(RestUtility.Thenable.validateErrorCode(Excel.ErrorCodes.invalidOperation))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetCountAll_cvt_REST_V15() {
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then(() => RestUtility.get("customXmlParts/count"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => Util.assertCompareValues(3, data.value, "Count"))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_CustomXmlParts_GetCountScoped_cvt_REST_V15() {
		CustomXmlPartsUtil.Rest.Thenable.reset()
			.then(() => RestUtility.get("customXmlParts/byNamespace(namespaceUri=@v)/count?@v='" + CustomXmlPartsUtil.Namespace.ns2 + "'"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => Util.assertCompareValues(2, data.value, "Count"))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_DocumentProperties_SetAndGetBuiltInDocumentProperties_cvt_REST_V17() {
		var titleValue = "TestAgave";
		var subjectValue = "Test";
		var authorValue = "Philip Rueker";
		var keywordsValue = "Agave Javascript Test";
		var commentsValue = "This is a Agave for Rich Api Test";
		var revisionnumberValue = 3;
		var categoryValue = "Agave";
		var managerValue = "Shaofeng Zhu";
		var companyValue = "Microsoft";
		ExcelTest.RestUtility.patch("properties", {
			title: titleValue,
			subject: subjectValue,
			author: authorValue,
			keywords: keywordsValue,
			comments: commentsValue,
			revisionNumber: revisionnumberValue,
			category: categoryValue,
			manager: managerValue,
			company: companyValue
		})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.get("properties"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (DocumentProperties) {
				ExcelTest.Util.assertCompareValues(DocumentProperties["title"], titleValue);
				ExcelTest.Util.assertCompareValues(DocumentProperties["subject"], subjectValue);
				ExcelTest.Util.assertCompareValues(DocumentProperties["author"], authorValue);
				ExcelTest.Util.assertCompareValues(DocumentProperties["keywords"], keywordsValue);
				ExcelTest.Util.assertCompareValues(DocumentProperties["comments"], commentsValue);
				ExcelTest.Util.assertCompareValues(DocumentProperties["revisionNumber"], revisionnumberValue);
				ExcelTest.Util.assertCompareValues(DocumentProperties["category"], categoryValue);
				ExcelTest.Util.assertCompareValues(DocumentProperties["manager"], managerValue);
				ExcelTest.Util.assertCompareValues(DocumentProperties["company"], companyValue);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_GetReadOnlyBuiltInDocumentProperties_cvt_REST_V17() {
		ExcelTest.RestUtility.get("properties")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (DocumentProperties) {
				RichApiTest.log.comment("LastAuthor: " + DocumentProperties["lastAuthor"]);
				RichApiTest.log.comment("CreationDate: " + DocumentProperties["creationDate"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_AddStringCustomDocumentProperties_cvt_REST_V17() {
		var textKey = "Text"
		var textValue = "TestAgave";
		ExcelTest.RestUtility.post("properties/custom/add", {
			key: textKey,
			value: textValue
		})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(201))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (textProperty) {
				ExcelTest.Util.assertCompareValues(textProperty["key"], textKey);
				ExcelTest.Util.assertCompareValues(textProperty["value"], textValue);
				ExcelTest.Util.assertCompareValues(textProperty["type"], Excel.DocumentPropertyType.string);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_AddPositiveBooleanCustomDocumentProperties_cvt_REST_V17() {
		var boolPositiveKey = "BoolPositive";
		var boolPositiveValue = true;
		ExcelTest.RestUtility.post("properties/custom/add", {
			key: boolPositiveKey,
			value: boolPositiveValue
		})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(201))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (boolProperty) {
				ExcelTest.Util.assertCompareValues(boolProperty["key"], boolPositiveKey);
				ExcelTest.Util.assertCompareValues(boolProperty["value"], boolPositiveValue);
				ExcelTest.Util.assertCompareValues(boolProperty["type"], Excel.DocumentPropertyType.boolean);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_AddNegativeBooleanCustomDocumentProperties_cvt_REST_V17() {
		var boolNegativeKey = "BoolNegative";
		var boolNegativeValue = false;
		ExcelTest.RestUtility.post("properties/custom/add", {
			key: boolNegativeKey,
			value: boolNegativeValue
		})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(201))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (boolProperty) {
				ExcelTest.Util.assertCompareValues(boolProperty["key"], boolNegativeKey);
				ExcelTest.Util.assertCompareValues(boolProperty["value"], boolNegativeValue);
				ExcelTest.Util.assertCompareValues(boolProperty["type"], Excel.DocumentPropertyType.boolean);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_AddDateCustomDocumentProperties_cvt_REST_V17() {
		var dateKey = "Date";
		var dateValue = new Date("2015-06-07");
		ExcelTest.RestUtility.post("properties/custom/add", {
			key: dateKey,
			value: dateValue
		})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(201))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (dateProperty) {
				ExcelTest.Util.assertCompareValues(dateProperty["key"], dateKey);
				ExcelTest.Util.assertCompareValues(dateProperty["value"], dateValue.toISOString());
				ExcelTest.Util.assertCompareValues(dateProperty["type"], Excel.DocumentPropertyType.date);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_AddIntegerCustomDocumentProperties_cvt_REST_V17() {
		var integerKey = "Integer";
		var integerValue = 13;
		ExcelTest.RestUtility.post("properties/custom/add", {
			key: integerKey,
			value: integerValue
		})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(201))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (integerProperty) {
				ExcelTest.Util.assertCompareValues(integerProperty["key"], integerKey);
				ExcelTest.Util.assertCompareValues(integerProperty["value"], integerValue);
				ExcelTest.Util.assertCompareValues(integerProperty["type"], Excel.DocumentPropertyType.number);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_AddFloatCustomDocumentProperties_cvt_REST_V17() {
		var floatKey = "Float";
		var floatValue = 28.8;
		ExcelTest.RestUtility.post("properties/custom/add", {
			key: floatKey,
			value: floatValue
		})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(201))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (floatProperty) {
				ExcelTest.Util.assertCompareValues(floatProperty["key"], floatKey);
				ExcelTest.Util.assertCompareValues(floatProperty["value"], floatValue);
				ExcelTest.Util.assertCompareValues(floatProperty["type"], Excel.DocumentPropertyType.float);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_DocumentProperties_DeleteAllCustomDocumentProperties_cvt_REST_V17() {
		var cExpectedProperties = 0;
		
		ExcelTest.RestUtility.post(("properties/custom/deleteAll"), {})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(204))
			.then(ExcelTest.RestUtility.Thenable.get("properties/custom/"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (customProperties) {
				ExcelTest.Util.assertCompareValues(customProperties['value'].length, cExpectedProperties);
				})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Error_GetRangeWithInvalidAddress$Expect400_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='00')")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(RestUtility.Thenable.validateErrorCode(Excel.ErrorCodes.invalidArgument))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_Error_GetNonExistingSheet$Expect404_cvt_REST_V11() {
		RestUtility.get("worksheets('non-existing-worksheet')")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NotFound))
			.then(RestUtility.Thenable.validateErrorCode(Excel.ErrorCodes.itemNotFound))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_Error_PatchRangeWithInvalidAddress$Expect400_cvt_REST_V11() {
		RestUtility.patch("worksheets('Sheet1')/range(address='00')", {values:[[1]]})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(RestUtility.Thenable.validateErrorCode(Excel.ErrorCodes.invalidArgument))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_Error_PatchNonExistingSheet$Expect404_cvt_REST_V11() {
		RestUtility.patch("worksheets('non-existing-worksheet')", {"name": "NewName"})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NotFound))
			.then(RestUtility.Thenable.validateErrorCode(Excel.ErrorCodes.itemNotFound))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
}
?module ExcelTest {
	export function test_Functions_BasicNumberTest_cvt_REST_V12() {
		RestUtility.post("functions/sum", { values: [1, 2, 3.5, 10.333] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
			.then((result) => {
				Util.assertCompareValues(null, result.error);
				Util.assert(Util.parseStringAsNumberAndCompare(result.value, 16.833));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_StringAndRangeAndBoolArguments_bvt_REST_V12() {
		RestUtility.post("functions/vlookup", {
				lookupValue: 'Wrench',
				tableArray: { Address: 'Charts!E2:H5' },
				colIndexNum: 3,
				rangeLookup: false
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
			.then((result) => {
				Util.assertCompareValues(null, result.error);
				Util.assert(Util.parseStringAsNumberAndCompare(result.value, 11));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_AllowRangeObjectsAsPartOfArrayTest_cvt_REST_V12() {
		
		RestUtility.post("functions/sum",
			{
				values: [
					20,
					{ Address: 'Charts!F3:F5' },
					{ Address: 'Charts!H3:H5' },
				]
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
			.then((result) => {
				Util.assertCompareValues(null, result.error);
				Util.assert(Util.parseStringAsNumberAndCompare(result.value, 110));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_AllowOptionalParams_cvt_REST_V12() {
		
		RestUtility.post("functions/vlookup",
			{
				lookupValue: 'Wrench',
				tableArray: { Address: 'Charts!E2:H5' },
				colIndexNum: 3
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
			.then((result) => {
				Util.assertCompareValues(null, result.error);
				Util.assert(Util.parseStringAsNumberAndCompare(result.value, 11));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_FailOnInsufficientParameterCount_cvt_REST_V12() {
		
		RestUtility.post("functions/vlookup", {
				lookupValue: 'Wrench'
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_ErrorsAreSurfaced_cvt_REST_V12() {
		RestUtility.patch("worksheets('Sheet1')/range(address='A1')", { formulas: [["=5/InvalidRangeThatDoesntExist"]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("functions/sum",
			{
				values: [
					15,
					{ Address: 'Sheet1!A1' },
				]
			}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
			.then((result) => {
				Util.assertCompareValues("#NAME?", result.error);
				Util.assertCompareValues(null, result.value);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_WillExtractValueFromRangeIfNeeded_bvt_REST_V12() {
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B1')", { formulas: [["=5/5", "=5/InvalidRangeThatDoesntExist"]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => invokeIsErrorFunctionAndCheckResult("Sheet1!A1", false))
			.then(() => invokeIsErrorFunctionAndCheckResult("Sheet1!B1", false))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function invokeIsErrorFunctionAndCheckResult(cellAddress: string, expectedIsError: boolean): OfficeExtension.IPromise<any> {
			return RestUtility.post("functions/isError",
				{
					value: { Address: 'Sheet1!A1' },
				})
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
				.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
				.then((result) => {
					Util.assertCompareValues(null, result.error);
					Util.assertCompareValues(false, result.value);
				});
		}
	}
	export function test_Functions_ValueExtractionOnlyForSingleCell_cvt_REST_V12() {
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B1')", { formulas: [["=5/5", "=5/InvalidRangeThatDoesntExist"]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("functions/isError",
				{
					value: { Address: 'Sheet1!A1:B1' },
				}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_AllowNullAsPartOfArgument_cvt_REST_V12() {
		RestUtility.post("functions/sum", { values: [1, null, 2, null, 3, 4, 5, null, null, null] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
			.then((result) => {
				Util.assertCompareValues(null, result.error);
				Util.assert(Util.parseStringAsNumberAndCompare(result.value, 15));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_Coercion_cvt_REST_V12() {
		
		
		
		RestUtility.post("functions/sum", { values: [1, 2, 3, "String"] })
			.then(validateError)
			.then(RestUtility.Thenable.post("functions/sum", { values: [1, 2, 3, "10"] }))
			.then(validateError)
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
		function validateError(response: RichApiTest.RestResponseInfo): () => void {
			return () => {
				RestUtility.validateValue(response, RestUtility.Status.OK);
				var result = RestUtility.getBodyAsObject<{ error: string; value: any }>(response);
				Util.assertCompareValues("#VALUE!", result.error);
				Util.assertCompareValues(null, result.value);
			};
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Functions_ComplexObjectInPlaceOfExpectedArrayFails_cvt_REST_V12() {
		RestUtility.post("functions/sum",
			{
				
				values: { Address: 'ChartsNovemberGlobalNamedRange' }
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_CanUseGlobalNamedRange_cvt_REST_V12() {
		RestUtility.post("functions/sum",
			{
				values: [
					{ Address: 'ChartsNovemberGlobalNamedRange' },
				]
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
			.then((result) => {
				Util.assertCompareValues(null, result.error);
				Util.assert(Util.parseStringAsNumberAndCompare(result.value, 40));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_CanUseTableReferences_cvt_REST_V12() {
		RestUtility.post("functions/sum",
			{
				values: [
					{ Address: 'Table5[[#Totals],[Column2]]' },
					{ Address: 'Table5[[#Totals],[Column3]]' }
				]
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
			.then((result) => {
				Util.assertCompareValues(null, result.error);
				Util.assert(Util.parseStringAsNumberAndCompare(result.value, 22 + 6.5));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Functions_CanUseTableReferencesColenSyntax_cvt_REST_V12() {
		RestUtility.post("functions/sum",
			{
				values: [
					{ Address: 'Table5[[#Totals],[Column2]:[Column4]]' }
				]
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
			.then((result) => {
				Util.assertCompareValues(null, result.error);
				Util.assert(Util.parseStringAsNumberAndCompare(result.value, 40.5));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	export function test_Functions_FailOnCrossSheetAddress_cvt_REST_V12() {
		RestUtility.post("functions/sum",
			{
				values: [
					{ Address: 'Table5[[#Totals],[Column2]]' },
					{ Address: 'Table5[[#Totals],[Column3]]' }
				]
			})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<{ error: string; value: any }>())
			.then((result) => {
				Util.assertCompareValues(null, result.error);
				Util.assert(Util.parseStringAsNumberAndCompare(result.value, 22 + 6.5));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export module NamedItemUtil {
		export function DeleteIfExist(namedItemName: string): OfficeExtension.IPromise<any> {
			return RestUtility.deleteItem("names('" + namedItemName + "')");
		}
		export function DeleteIfExistOnWorksheet(namedItemName: string, worksheetName: string): OfficeExtension.IPromise<any> {
			return RestUtility.deleteItem("worksheets('" + worksheetName + "')/names('" + namedItemName + "')");
		}
	}
	export function test_NamedItem_RangeExisting_cvt_REST_V11() {
		var namedItemName = "RangeRef";
		var rangeAddress = "NamedItems!$D$3";
		RichApiTest.log.comment("REST GET");
		var relativeUrl = "names('" + namedItemName + "')";
		RestUtility.get(relativeUrl)
			.then(RestUtility.Thenable.getBodyAsObject<Excel.NamedItem>())
			.then((body) => {
				RestUtility.validateValue(body.value, rangeAddress);
				RestUtility.validateValue(body.type, Excel.NamedItemType.range);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddSimple_cvt_REST_V14() {
		var namedItemName = "foobarRest";
		var rangeAddress = "=NamedItems!$D$3";
		var relativeUrl = "names('" + namedItemName + "')";
		NamedItemUtil.DeleteIfExist(namedItemName)
			.then(RestUtility.Thenable.post("names/add", {
				name: namedItemName,
				reference: rangeAddress
			}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(RestUtility.Thenable.get(relativeUrl))
			.then(RestUtility.Thenable.getBodyAsObject<Excel.NamedItem>())
			.then((body) => {
				RestUtility.validateValue(body.value, rangeAddress.substr(1));
				RestUtility.validateValue(body.name, namedItemName);
				RestUtility.validateValue(body.type, Excel.NamedItemType.range);
				RestUtility.validateValue(body.scope, Excel.NamedItemScope.workbook);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddString_cvt_REST_V14() {
		var namedItemName = "foobarRest";
		var ref = "foobarstring";
		var relativeUrl = "names('" + namedItemName + "')";
		NamedItemUtil.DeleteIfExist(namedItemName)
			.then(RestUtility.Thenable.post("names/add", {
				name: namedItemName,
				reference: ref
			}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(RestUtility.Thenable.get(relativeUrl))
			.then(RestUtility.Thenable.getBodyAsObject<Excel.NamedItem>())
			.then((body) => {
				RestUtility.validateValue(body.value, ref);
				RestUtility.validateValue(body.name, namedItemName);
				RestUtility.validateValue(body.type, Excel.NamedItemType.string);
				RestUtility.validateValue(body.scope, Excel.NamedItemScope.workbook);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddNumber_cvt_REST_V14() {
		var namedItemName = "foobarRest";
		var ref = "3.5";
		var relativeUrl = "names('" + namedItemName + "')";
		NamedItemUtil.DeleteIfExist(namedItemName)
			.then(RestUtility.Thenable.post("names/add", {
				name: namedItemName,
				reference: ref
			}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(RestUtility.Thenable.get(relativeUrl))
			.then(RestUtility.Thenable.getBodyAsObject<Excel.NamedItem>())
			.then((body) => {
				RestUtility.validateValue(body.value, 3.5);
				RestUtility.validateValue(body.name, namedItemName);
				RestUtility.validateValue(body.type, Excel.NamedItemType.double);
				RestUtility.validateValue(body.scope, Excel.NamedItemScope.workbook);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddBool_cvt_REST_V14() {
		var namedItemName = "foobarRest";
		var ref = "=FALSE";
		var relativeUrl = "names('" + namedItemName + "')";
		NamedItemUtil.DeleteIfExist(namedItemName)
			.then(RestUtility.Thenable.post("names/add", {
				name: namedItemName,
				reference: ref
			}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(RestUtility.Thenable.get(relativeUrl))
			.then(RestUtility.Thenable.getBodyAsObject<Excel.NamedItem>())
			.then((body) => {
				RestUtility.validateValue(body.value, false);
				RestUtility.validateValue(body.name, namedItemName);
				RestUtility.validateValue(body.type, Excel.NamedItemType.boolean);
				RestUtility.validateValue(body.scope, Excel.NamedItemScope.workbook);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddInvalid_cvt_REST_V14() {
		var namedItemName = "foobarRest";
		var ref = "=garoidjvroidje";
		var relativeUrl = "names('" + namedItemName + "')";
		NamedItemUtil.DeleteIfExist(namedItemName)
			.then(RestUtility.Thenable.post("names/add", {
				name: namedItemName,
				reference: ref
			}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(RestUtility.Thenable.get(relativeUrl))
			.then(RestUtility.Thenable.getBodyAsObject<Excel.NamedItem>())
			.then((body) => {
				RestUtility.validateValue(body.value, "#NAME?");
				RestUtility.validateValue(body.name, namedItemName);
				RestUtility.validateValue(body.type, Excel.NamedItemType.error);
				RestUtility.validateValue(body.scope, Excel.NamedItemScope.workbook);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddExisting_cvt_REST_V14() {
		var namedItemName = "foobarRest";
		var ref = "3.14";
		var relativeUrl = "names('" + namedItemName + "')";
		NamedItemUtil.DeleteIfExist(namedItemName)
			.then(RestUtility.Thenable.post("names/add", {
				name: namedItemName,
				reference: ref
			}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(RestUtility.Thenable.post("names/add", {
				name: namedItemName,
				reference: ref
			}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.BadRequest))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_SetComment_cvt_REST_V14() {
		var namedItemName = "foobarRest";
		var ref = "=5";
		var comment = "never gonna give you up";
		var relativeUrl = "names('" + namedItemName + "')";
		NamedItemUtil.DeleteIfExist(namedItemName)
			.then(RestUtility.Thenable.post("names/add", {
				name: namedItemName,
				reference: ref
			}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(RestUtility.Thenable.patch(relativeUrl, {
				comment: comment
			}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(RestUtility.Thenable.get(relativeUrl))
			.then(RestUtility.Thenable.getBodyAsObject<Excel.NamedItem>())
			.then((body) => {
				RestUtility.validateValue(body.comment, comment);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedItem_AddWorksheet_cvt_REST_V14() {
		var namedItemName = "sheetScopedRest";
		var ref = "=NamedItems!$D$3";
		var relativeUrl = "worksheets('NamedItems')/names('" + namedItemName + "')";
		NamedItemUtil.DeleteIfExistOnWorksheet(namedItemName, "NamedItems")
			.then(RestUtility.Thenable.post("worksheets('NamedItems')/names/add", {
				name: namedItemName,
				reference: ref
			}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(RestUtility.Thenable.get(relativeUrl))
			.then(RestUtility.Thenable.getBodyAsObject<Excel.NamedItem>())
			.then((body) => {
				RestUtility.validateValue(body.value, ref.substr(1));
				RestUtility.validateValue(body.name, namedItemName);
				RestUtility.validateValue(body.type, Excel.NamedItemType.range);
				RestUtility.validateValue(body.scope, Excel.NamedItemScope.worksheet);
			})
			.then(RestUtility.Thenable.get("names('" + ref + "')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NotFound))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedRange_Count$WorkbookScope_cvt_REST_V14() {
		_injectCollectionCountTest_REST("names/")
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_NamedRange_Count$Worksheetcope_cvt_REST_V14() {
		_injectCollectionCountTest_REST("worksheets('NamedItems')/names")
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	
	export function test_PageLayout_Orientation_Portrait_cvt_REST_V17() {
		
		var orientationToSet = Excel.PageOrientation.portrait;
		RestUtility.patch("worksheets('PageLayout')/PageLayout", { orientation: orientationToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('PageLayout')/PageLayout"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareValues(rangeView["orientation"], orientationToSet);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_PageLayout_Orientation_Landscape_cvt_REST_V17() {
		
		var orientationToSet = Excel.PageOrientation.landscape;
		RestUtility.patch("worksheets('PageLayout')/PageLayout", { orientation: orientationToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('PageLayout')/PageLayout"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareValues(rangeView["orientation"], orientationToSet);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_PageLayout_PaperSize_cvt_REST_v17() {
		var sheetName = "PageLayout";
		const enumValues = Object.keys(Excel.PaperType);
		var randomIndex = Math.floor(Math.random() * (enumValues.length - 1));
		var expectedPageType = Excel.PaperType[enumValues[randomIndex]];
		
		RestUtility.patch("worksheets('PageLayout')/PageLayout", { paperSize: expectedPageType })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('PageLayout')/PageLayout"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareValues(rangeView["paperSize"], expectedPageType);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_PageLayout_BlackAndWhite_cvt_REST_v17() {
		var sheetName = "PageLayout";
		var randomNumber = Math.floor(Math.random() * (2)) + 1;
		var expectedBlackAndWhiteValue = ((randomNumber == 1) ? true : false);
		
		RestUtility.patch("worksheets('PageLayout')/PageLayout", { blackAndWhite: expectedBlackAndWhiteValue })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('PageLayout')/PageLayout"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareValues(rangeView["blackAndWhite"], expectedBlackAndWhiteValue);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_PageLayout_PrintErrors_cvt_REST_v17() {
		var sheetName = "PageLayout";
		const enumValues = Object.keys(Excel.PrintErrorType);
		var randomIndex = Math.floor(Math.random() * (enumValues.length - 1));
		var expectedPrintError = Excel.PrintErrorType[enumValues[randomIndex]];
		
		RestUtility.patch("worksheets('PageLayout')/PageLayout", { printErrors: expectedPrintError })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('PageLayout')/PageLayout"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareValues(rangeView["printErrors"], expectedPrintError);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Protection_LockStatus_cvt_REST_V12(): void {
		RestUtility.invokeGetAndValidateResponse("worksheets('protection')/range(address='b20')/format/protection/locked", true, (body) => body.value);
	}
	export function test_Protection_FormulaHiddenStatus_cvt_REST_V12(): void {
		RestUtility.invokeGetAndValidateResponse("worksheets('protection')/range(address='b20')/format/protection/formulahidden", false, (body) => body.value);
	}
	export function test_Protection_ProtectAndUnprotectSheetNoPassword_cvt_REST_V12(): void {
		RestUtility.postAsUrlAction("worksheets('protection')/protection/protect")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.invokeGetAndValidateResponsePromise("worksheets('protection')/protection/protected", true, (body) => body.value))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('protection')/protection/unprotect"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.invokeGetAndValidateResponsePromise("worksheets('protection')/protection/protected", false, (body) => body.value))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_ProtectAndUnprotectSheetWithPassword_cvt_REST_V17(): void {
		RestUtility.postAsUrlAction("worksheets('protection')/protection/protect", { "options": null, "password": "abc"})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.invokeGetAndValidateResponsePromise("worksheets('protection')/protection/protected", true, (body) => body.value))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('protection')/protection/unprotect", { "password": "abc" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.invokeGetAndValidateResponsePromise("worksheets('protection')/protection/protected", false, (body) => body.value))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_ProtectAndUnprotectWorkbookNoPassword_cvt_REST_V17(): void {
		RestUtility.postAsUrlAction("protection/protect")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.invokeGetAndValidateResponsePromise("protection/protected", true, (body) => body.value))
			.then(RestUtility.Thenable.postAsUrlAction("protection/unprotect"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.invokeGetAndValidateResponsePromise("protection/protected", false, (body) => body.value))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Protection_ProtectAndUnprotectWorkbookWithPassword_cvt_REST_V17(): void {
		RestUtility.postAsUrlAction("protection/protect", { "options": null, "password": "abc" })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.invokeGetAndValidateResponsePromise("protection/protected", true, (body) => body.value))
			.then(RestUtility.Thenable.postAsUrlAction("protection/unprotect", { "password": "abc" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.invokeGetAndValidateResponsePromise("protection/protected", false, (body) => body.value))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}?
module ExcelTest {
	export function test_ROAgave_Read_cvt_REST_V11() {
		var sheetName = "ROAgave";
		var rangeAddress = "A1:B2";
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, sheetName, () => {
			RestUtility.get("worksheets('" + sheetName + "')/range(address='" + rangeAddress + "')")
				.then((resp) => {
					RichApiTest.log.comment(JSON.stringify(resp));
					return resp;
				})
				.then(RestUtility.Thenable.validateStatus(200))
				.then(RestUtility.Thenable.getBodyAsObject())
				.then((range: any) => {
					RichApiTest.log.comment("Address:" + range.address);
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_ROAgave_WriteBasicTest_cvt_REST_V11() {
		var sheetName = "ROAgave";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToSet = [[rangeValue.toString(), "=A1"], ["=B1", "=A1+B1"]];
		var ctx = new Excel.RequestContext();
		Util.checkSheetExistsRunTest(ctx, sheetName, () => {
			var range: any = {};
			range.values = rangeValuesToSet;
			RestUtility.patch("worksheets('" + sheetName + "')/range(address='" + rangeAddress + "')", JSON.stringify(range))
				.then((resp) => {
					RichApiTest.log.comment(JSON.stringify(resp));
					return resp;
				})
				.then(RestUtility.Thenable.validateStatus(403))
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
}
?module ExcelTest {
	export function test_RangeFormat_FillColor_cvt_REST_V11(): void {
		RestUtility.invokeGetAndValidateResponse("worksheets('rangeformat')/range(address='b15')/format/fill/color", "#FF0000", (body) => body.value);
	}
	export function test_RangeFormat_FillClear_cvt_REST_V11(): void {
		RestUtility.postAsUrlAction("worksheets('rangeformat')/range(address='c15')/format/fill/clear")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(() => (RestUtility.invokeGetAndValidateResponse("worksheets('rangeformat')/range(address='c15')/format/fill/color", "#FFFFFF", (body) => body.value)))
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_WrapText_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b3')/format/wraptext", true, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c3')/format/wraptext", false, (body) => body.value), 
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_HorizontalAlignment_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b1')/format/horizontalalignment", Excel.HorizontalAlignment.general, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c1')/format/horizontalalignment", Excel.HorizontalAlignment.left, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='d1')/format/horizontalalignment", Excel.HorizontalAlignment.center, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='e1')/format/horizontalalignment", Excel.HorizontalAlignment.right, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='f1')/format/horizontalalignment", Excel.HorizontalAlignment.fill, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='g1')/format/horizontalalignment", Excel.HorizontalAlignment.justify, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='h1')/format/horizontalalignment", Excel.HorizontalAlignment.centerAcrossSelection, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='i1')/format/horizontalalignment", Excel.HorizontalAlignment.distributed, (body) => body.value),
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_VerticalAlignment_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b2')/format/verticalalignment", Excel.VerticalAlignment.top, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c2')/format/verticalalignment", Excel.VerticalAlignment.center, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='d2')/format/verticalalignment", Excel.VerticalAlignment.bottom, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='e2')/format/verticalalignment", Excel.VerticalAlignment.justify, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='f2')/format/verticalalignment", Excel.VerticalAlignment.distributed, (body) => body.value), 
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_BorderLineStyle_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b4')/format/borders('EdgeTop')/style", Excel.BorderLineStyle.none, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c4')/format/borders('EdgeTop')/style", Excel.BorderLineStyle.continuous, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='d4')/format/borders('EdgeTop')/style", Excel.BorderLineStyle.dash, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='e4')/format/borders('EdgeTop')/style", Excel.BorderLineStyle.dashDot, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='f4')/format/borders('EdgeTop')/style", Excel.BorderLineStyle.dashDotDot, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='g4')/format/borders('EdgeTop')/style", Excel.BorderLineStyle.dot, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='h4')/format/borders('EdgeTop')/style", Excel.BorderLineStyle.double, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='i4')/format/borders('EdgeTop')/style", Excel.BorderLineStyle.slantDashDot, (body) => body.value), 
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_BorderColor_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b5:c6')/format/borders('EdgeTop')/color", "#FF0000", (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b5:c6')/format/borders('EdgeBottom')/color", "#000000", (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b5:c6')/format/borders('EdgeLeft')/color", "#00B0F0", (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b5:c6')/format/borders('EdgeRight')/color", "#00B050", (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b5:c6')/format/borders('InsideVertical')/color", "#7030A0", (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b5:c6')/format/borders('InsideHorizontal')/color", "#0070C0", (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='f5:g6')/format/borders('DiagonalDown')/color", "#FFFF00", (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='d5:e6')/format/borders('DiagonalUp')/color", "#FF0000", (body) => body.value), 
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_BorderWeight_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b7:c8')/format/borders('EdgeTop')/weight", Excel.BorderWeight.hairline, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b7:c8')/format/borders('EdgeBottom')/weight", Excel.BorderWeight.medium, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b7:c8')/format/borders('EdgeLeft')/weight", Excel.BorderWeight.thin, (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b7:c8')/format/borders('EdgeRight')/weight", Excel.BorderWeight.thick, (body) => body.value), 
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_BorderCollectionCount_cvt_REST_V11(): void {
		RestUtility.invokeGetAndValidateResponse("worksheets('rangeformat')/range(address='b7:c8')/format/borders", 8, (body) => body.value.length);
	}
	export function test_RangeFormat_BorderCollectionItemAt_cvt_REST_V11(): void {
		RestUtility.invokeGetAndValidateResponse("worksheets('rangeformat')/range(address='b7:c8')/format/borders/itemAt(index=1)", "EdgeBottom", (body) => body.sideIndex);
	}
	export function test_RangeFormat_FontBold_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b9')/format/font/bold", true, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c9')/format/font/bold", false, (body) => body.value),
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_FontColor_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b10')/format/font/color", "#FF0000", (body) => body.value), 
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c10')/format/font/color", "#00B050", (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='d10')/format/font/color", "#000000", (body) => body.value), 
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_FontItalic_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b11')/format/font/italic", true, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c11')/format/font/italic", false, (body) => body.value),
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_FontName_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b12')/format/font/name", "Calibri", (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c12')/format/font/name", "Aharoni", (body) => body.value),
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_FontSize_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b13')/format/font/size", 11, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c13')/format/font/size", 24, (body) => body.value),
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_FontUnderline_cvt_REST_V11(): void {
		OfficeExtension.Promise.all(
			[
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b14')/format/font/underline", Excel.RangeUnderlineStyle.none, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c14')/format/font/underline", Excel.RangeUnderlineStyle.single, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='d14')/format/font/underline", Excel.RangeUnderlineStyle.double, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='e14')/format/font/underline", Excel.RangeUnderlineStyle.singleAccountant, (body) => body.value),
				RestUtility.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='f14')/format/font/underline", Excel.RangeUnderlineStyle.doubleAccountant, (body) => body.value),
			])
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetNullPropertyandPatchNullableProperty_cvt_REST_V11(): void {
		RestUtility.get("worksheets('rangeformat')/range(address='B13:C13')/format/font")
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(null, result["size"], "size");
				return RestUtility.patch("worksheets('rangeformat')/range(address='B13:C13')/format/font", result);
			})
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				Util.assertCompareValues(null, result["size"], "size");
			})
			.then(RestUtility.Thenable.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='b13')/format/font/size", 11, (body) => body.value))
			.then(RestUtility.Thenable.invokeGetAndValidateResponsePromise("worksheets('rangeformat')/range(address='c13')/format/font/size", 24, (body) => body.value))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_RowHeightSet_cvt_REST_V12() {
		var sheetName = "Sheet1";
		var rangeAddress1 = "E3";
		RestUtility.patch("worksheets('Sheet1')/range(address='E3')/format", { rowHeight: 30 })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeFormat) => {
				Util.assertCompareValues(30, rangeFormat["rowHeight"], "rowHeight");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_RowHeightAutofit_cvt_REST_V12() {
		var sheetName = "Sheet1";
		var rangeAddress1 = "E3";
		RestUtility.postAsUrlAction("worksheets('Sheet1')/range(address='E3')/format/autofitRows")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_ColWidthSet_cvt_REST_V12() {
		var sheetName = "Sheet1";
		var rangeAddress1 = "E3";
		RestUtility.patch("worksheets('Sheet1')/range(address='E3')/format", { columnWidth: 30 })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeFormat) => {
				Util.assertCompareValues(30, rangeFormat["columnWidth"], "columnWidth");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_ColWidthAutofit_cvt_REST_V12() {
		var sheetName = "Sheet1";
		var rangeAddress1 = "E3";
		RestUtility.postAsUrlAction("worksheets('Sheet1')/range(address='E3')/format/autofitColumns")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetAndGetTextOrientation_cvt_REST_V17() {
		var expectedValues = 30;
		ExcelTest.RestUtility.post("worksheets('Sheet1')/range(address='A1')/Clear")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["textOrientation"], 0);
			})
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { textOrientation: expectedValues }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["textOrientation"], expectedValues);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetInvalidTextOrientationValue_cvt_REST_V17() {
		var expectedValues = "Foobar";
		ExcelTest.RestUtility.post("worksheets('Sheet1')/range(address='A1')/Clear")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["textOrientation"], 0);
			})
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { textOrientation: expectedValues }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.BadRequest))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (errorInfo) {
				ExcelTest.Util.assertCompareValues(errorInfo["error"]["code"], Excel.ErrorCodes.invalidArgument)
			})
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["textOrientation"], 0);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetColumnWidthStandardWidth_cvt_REST_V17() {
		var defaultWidth = 48;
		ExcelTest.RestUtility.post("worksheets('Sheet1')/range(address='A1')/Clear")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { columnWidth: defaultWidth * 2 }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["columnWidth"], defaultWidth * 2);
			})
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { useStandardWidth: true }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["columnWidth"], defaultWidth);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetStandardWidth_cvt_REST_V17() {
		var defaultWidth = 48;
		ExcelTest.RestUtility.post("worksheets('Sheet1')/range(address='A1')/Clear")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { columnWidth: defaultWidth }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["useStandardWidth"], true);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetUniformNonStandardWidth_cvt_REST_V17() {
		var defaultWidth = 48;
		ExcelTest.RestUtility.post("worksheets('Sheet1')/range(address='A1')/Clear")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { columnWidth: defaultWidth * 2 }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["useStandardWidth"], false);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetNonUniformNonStandardWidth_cvt_REST_V17() {
		var defaultWidth = 48;
		ExcelTest.RestUtility.post("worksheets('Sheet1')/range(address='A1:B2')/Clear")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { columnWidth: defaultWidth * 2 }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='B2')/format", { columnWidth: defaultWidth / 2 }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:B2')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["useStandardWidth"], null);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_SetRowWithStandardHeight_cvt_REST_V17() {
		var defaultHeight = 15;
		ExcelTest.RestUtility.post("worksheets('Sheet1')/range(address='A1')/Clear")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { rowHeight: defaultHeight * 2 }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["rowHeight"], defaultHeight * 2);
			})
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { useStandardHeight: true }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["rowHeight"], defaultHeight);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetStandardHeight_cvt_REST_V17() {
		var defaultHeight = 15;
		ExcelTest.RestUtility.post("worksheets('Sheet1')/range(address='A1')/Clear")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { rowHeight: defaultHeight }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["useStandardHeight"], true);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetUniformNonStandardHeight_cvt_REST_V17() {
		var defaultHeight = 15;
		ExcelTest.RestUtility.post("worksheets('Sheet1')/range(address='A1')/Clear")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { rowHeight: defaultHeight * 2 }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["useStandardHeight"], false);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeFormat_GetNonUniformNonStandardHeight_cvt_REST_V17() {
		var defaultHeight = 48;
		ExcelTest.RestUtility.post("worksheets('Sheet1')/range(address='A1:B2')/Clear")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1')/format", { rowHeight: defaultHeight * 2 }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='B2')/format", { rowHeight: defaultHeight / 2 }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:B2')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (format) {
				ExcelTest.Util.assertCompareValues(format["useStandardHeight"], null);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}?module ExcelTest {
	export function test_Range_SetMultipleValues_bvt_REST_V11() {
		var expectedValues = [["abcd", "defg"], ["hijk", 1234]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B2')", { values: expectedValues })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["values"], expectedValues)) {
					throw "Values were not as expected: '" + expectedValues + "' Actual: '" + range["values"] + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetMultipleValues$Null_cvt_REST_V13() {
		var rangeValuesToSet = [["a1", "a2", "a3"], ["b1", "b2", "b3"]];
		var rangeValuesToSetWithNull = [["a11", null, "a31"], [null, "b21", null]];
		var rangeValuesToGet = [["a11", "a2", "a31"], ["b1", "b21", "b3"]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C2')", { values: rangeValuesToSet })
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:C2')", { values: rangeValuesToSetWithNull }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareArray(range["values"], rangeValuesToGet);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SetSingleValue_cvt_REST_V11() {
		var expectedValues = [["abcd", "abcd"], ["abcd", "abcd"]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B2')", { values: "abcd" })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
			if (!Util.compareArray(range["values"], expectedValues)) {
				throw "Values were not as expected: '" + expectedValues + "' Actual: '" + range["values"] + "'";
			}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_Formulas_cvt_REST_V11() {
		var expectedValues = [[1, 2, 3]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C1')", { formulas: [[1, 2, "=A1+B1"]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["values"], expectedValues)) {
					throw "Values were not as expected: '" + expectedValues + "' Actual: '" + range["values"] + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_FormulasR1C1_cvt_REST_V12() {
		var expectedValues = [[3, 4, 7]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C1')", { formulasr1c1: [[3, 4, "=RC[-2]+RC[-1]"]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["values"], expectedValues)) {
					throw "Values were not as expected: '" + expectedValues + "' Actual: '" + range["values"] + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_NumberFormat_cvt_REST_V11() {
		var expectedText = [["123.45%", 2, 3]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C1')", { values: [[1.2345, 2, 3]], numberFormat: [["0.00%", "General", "General"]]})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["text"], expectedText)) {
					throw "Values were not as expected: '" + expectedText + "' Actual: '" + range["values"] + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_ValueTypes_cvt_REST_V11() {
		var expectedValueTypes = [[Excel.RangeValueType.double, Excel.RangeValueType.string, Excel.RangeValueType.empty]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C1')", { values: [[1, "abcd", ""]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
			if (!Util.compareArray(range["valueTypes"], expectedValueTypes)) {
				throw "Value types were not as expected: '" + expectedValueTypes + "' Actual: '" + range["valueTypes"] + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_OtherProperties_cvt_REST_V11() {
		var expectedValueTypes = [[Excel.RangeValueType.double, Excel.RangeValueType.string, Excel.RangeValueType.empty]];
		RestUtility.patch("worksheets('Sheet1')/range(address='B3:D3')", { values: [[1, "abcd", ""]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!B3:D3", range["address"], "Address");
				Util.assertCompareValues(3, range["cellCount"], "CellCount");
				Util.assertCompareValues(3, range["columnCount"], "ColumnCount");
				Util.assertCompareValues(1, range["rowCount"], "RowCount");
				Util.assertCompareValues(1, range["columnIndex"], "ColumnIndex");
				Util.assertCompareValues(2, range["rowIndex"], "RowIndex");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_SelectShouldFail_cvt_REST_V11() {
		RestUtility.ensureDisabledApiFailed("worksheets('sheet1')/range(address='a1')/select", RichApiTest.RestUtility.httpMethodPost);
	}
	export function test_Range_InsertRow_cvt_REST_V11() {
		var expectedValues = [[1, 2, 3], ["", "", ""], [4, 5, 6], [7, 8, 9]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C3')", { values: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('Sheet1')/range(address='A2:C2')/insert", { shift: Excel.InsertShiftDirection.down }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:C4')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["values"], expectedValues)) {
					throw "Values were not as expected: '" + expectedValues + "' Actual: '" + range["values"] + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_DeleteRow_cvt_REST_V11() {
		var expectedValues = [[1, 2, 3], [7, 8, 9], ["", "", ""]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C4')", { values: [[1, 2, 3], [4, 5, 6], [7, 8, 9], ["", "", ""]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('Sheet1')/range(address='A2:C2')/delete", { shift: Excel.DeleteShiftDirection.up }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:C3')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["values"], expectedValues)) {
					throw "Values were not as expected: '" + expectedValues + "' Actual: '" + range["values"] + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_InsertColumn_cvt_REST_V11() {
		var expectedValues = [[1, 2, "", 3], [4, 5, "", 6], [7, 8, "", 9]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C3')", { values: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('Sheet1')/range(address='C1:C3')/insert", { shift: Excel.InsertShiftDirection.right }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:D3')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["values"], expectedValues)) {
					throw "Values were not as expected: '" + expectedValues + "' Actual: '" + range["values"] + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_DeleteColumn_cvt_REST_V11() {
		var expectedValues = [[1, 3, ""], [4, 6, ""], [7, 9, ""]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:D3')", { values: [[1, 2, 3, ""], [4, 5, 6, ""], [7, 8, 9, ""]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('Sheet1')/range(address='B1:B3')/delete", { shift: Excel.DeleteShiftDirection.left }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:C3')"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["values"], expectedValues)) {
					throw "Values were not as expected: '" + expectedValues + "' Actual: '" + range["values"] + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_OffSet_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='F5')/offsetRange(rowoffset=1,columnoffset=1)")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!G6", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetRow_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='B5:F7')/row(row=1)")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!B6:F6", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetColumn_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='B5:F7')/column(column=1)")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!C5:C7", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_BoundingRect_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='B5:F7')/boundingrect(anotherRange='H20')")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!B5:H20", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_Intersection_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='B5:F7')/intersection(anotherRange='C6:H10')")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!C6:F7", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_Clear_cvt_REST_V11() {
		var expectedValues = [["", "", ""], ["", "", ""], ["", "", ""]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C3')", { values: "abcd" })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('Sheet1')/range(address='A1:C3')/clear", { applyTo: Excel.ClearApplyTo.all }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:C3')"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
			if (!Util.compareArray(range["values"], expectedValues)) {
				throw "Values were not as expected: '" + expectedValues + "' Actual: '" + range["values"] + "'";
			}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_UsedRangeValuesOnlyNull_cvt_REST_V11() {
		Util.clearSheetRest("Sheet1")
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:C3')", { values: [["", "", 3], ["", 5, 6], ["", 8, 9]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='D2')/format/fill", { color: "#FF0000" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:E5')/usedrange(valuesOnly=false)"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!B1:D3", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_UsedRangeValuesOnlyFalse_cvt_REST_V12() {
		RestUtility.post("worksheets('Sheet1')/range()/clear", { applyTo: Excel.ClearApplyTo.all })
		.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:C3')", { values: [["", "", 3], ["", 5, 6], ["", 8, 9]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='D2')/format/fill", { color: "#FF0000" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:E5')/usedrange(valuesOnly=false)"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!B1:D3", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_UsedRangeValuesOnlyTrue_cvt_REST_V12() {
		Util.clearSheetRest("Sheet1")
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:C3')", { values: [["", "", 3], ["", 5, 6], ["", 8, 9]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='D2')/format/fill", { color: "#FF0000" }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:E5')/usedrange(valuesOnly=true)"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!B1:C3", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_Worksheet_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='A1:C3')/worksheet")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues("Sheet1", worksheet["name"], "Name");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_LargeData_cvt_REST_V11() {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:Z100";
		var rangeValuesToSet = [];
		for (var row = 0; row < 100; row++) {
			var rowValue = [];
			for (var col = 0; col < 26; col++) {
				rowValue.push(row * col);
			}
			rangeValuesToSet.push(rowValue);
		}
		var relativeUrl = "worksheets('Sheet1')/range(address='" + rangeAddress + "')";
		RestUtility.patch(relativeUrl, { "values": rangeValuesToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["values"], rangeValuesToSet)) {
					throw "Values were not as expected: '" + rangeValuesToSet + "' Actual: '" + range["values"] + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_MergeUnmergeAcross_cvt_REST_V12() {
		var A1E5 = "worksheets('Merge')/range(address='A1:E5')";
		var A1 = "worksheets('Merge')/range(address='A1')";
		var A2 = "worksheets('Merge')/range(address='A2')";
		var A3 = "worksheets('Merge')/range(address='A3')";
		var A4 = "worksheets('Merge')/range(address='A4')";
		var B2 = "worksheets('Merge')/range(address='B2')";
		var C2 = "worksheets('Merge')/range(address='C2')";
		var C4 = "worksheets('Merge')/range(address='C4')";
		var usedNumber = 1;
		var usedNumber2 = 2;
		var usedNumber3 = 3;
		var empty = '';	
		RestUtility.patch(A1, { "values": [[usedNumber]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch(A3, { "values": [[usedNumber]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch(B2, { "values": [[usedNumber2]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch(C2, { "values": [[usedNumber3]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch(C4, { "values": [[usedNumber3]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post(A1E5 + "/merge", { across: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get(A1))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(usedNumber, range["values"][0][0], "A1 value after merge across (should be " + usedNumber + ") and is :" + range["values"]);
				RichApiTest.log.comment("A1 value after merge across (should be " + usedNumber + ") and is :" + range["values"]);
			})
			.then(RestUtility.Thenable.get(A3))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(usedNumber, range["values"][0][0], "A3 value after merge across (should be " + usedNumber + ") and is :" + range["values"]);
				RichApiTest.log.comment("A3 value after merge across (should be " + usedNumber + ") and is :" + range["values"]);
			})
			.then(RestUtility.Thenable.post(A1E5 + "/unmerge", { across: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get(A3))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(usedNumber, range["values"][0][0], "A3 value after merge across (should be " + usedNumber + ") and is :" + range["values"]);
				RichApiTest.log.comment("A3 value after merge across (should be " + usedNumber + ") and is :" + range["values"]);
			})
			.then(RestUtility.Thenable.patch(B2, { "values": [[usedNumber2]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch(C2, { "values": [[usedNumber3]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch(C4, { "values": [[usedNumber3]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get(B2))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(usedNumber2, range["values"][0][0], "B2 value after unmerge across and set (should be " + usedNumber2 + ") and is :" + range["values"]);
				RichApiTest.log.comment("B2 value after unmerge across and set (should be " + usedNumber2 + ") and is :" + range["values"]);
			})
			.then(RestUtility.Thenable.get(C2))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(usedNumber3, range["values"][0][0], "C2 value after unmerge across and set (should be " + usedNumber3 + ") and is :" + range["values"]);
				RichApiTest.log.comment("C2 value after unmerge across and set (should be " + usedNumber3 + ") and is :" + range["values"]);
			})
			.then(RestUtility.Thenable.get(C4))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(usedNumber3, range["values"][0][0], "C4 value after unmerge across and set (should be " + usedNumber3 + ") and is :" + range["values"]);
				RichApiTest.log.comment("C4 value after unmerge across and set (should be " + usedNumber3 + ") and is :" + range["values"]);
			})
			.then(RestUtility.Thenable.post(A1E5 + "/clear", {}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_MergeUnmerge_cvt_REST_V12() {
		var A1E5 = "worksheets('Merge')/range(address='A1:E5')";
		var A1 = "worksheets('Merge')/range(address='A1')";
		var A4 = "worksheets('Merge')/range(address='A4')";
		var usedNumber = 1;
		var usedNumber2 = 2;
		var usedNumber3 = 3;
		var empty = '';	
		RestUtility.patch(A1, { "values": [[usedNumber]] })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch(A4, { "values": [[usedNumber2]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post(A1E5 + "/merge", { across: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get(A1))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(usedNumber, range["values"][0][0], "A1 value after merge (should be " + usedNumber + "):" + range["values"]);
				RichApiTest.log.comment("A1 value after merge (should be " + usedNumber + "):" + range["values"]);
			})
			.then(RestUtility.Thenable.patch(A4, { "values": [[usedNumber]] }))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["values"], [['']])) {
					throw new Error("A4 values were not as expected: '' Actual: '" + range["values"] + "'");
				}
			})
			.then(RestUtility.Thenable.post(A1E5 + "/unmerge", {}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.patch(A4, { "values": [[usedNumber2]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get(A4))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				if (!Util.compareArray(range["values"], [[usedNumber2]])) {
					throw new Error("A4 Values were not as expected: '" + [[usedNumber2]] + "' Actual: '" + range["values"] + "'");
				}
			})
			.then(RestUtility.Thenable.post(A1E5 + "/clear", {}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_HideUnhideCols_cvt_REST_V12() {
		var sheetName = "Sheet1";
		var rangeAddress1 = "E3:G7";
		RestUtility.patch("worksheets('Sheet1')/range(address='E3:G7')", { columnHidden: true })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(true, range["columnHidden"], "columnHidden");
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='E3:G7')", { columnHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(false, range["columnHidden"], "columnHidden");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_HideUnhideRows_cvt_REST_V12() {
		var sheetName = "Sheet1";
		var rangeAddress1 = "E3:G7";
		RestUtility.patch("worksheets('Sheet1')/range(address='E3:G7')", { rowHidden: true })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(true, range["rowHidden"], "rowHidden");
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='E3:G7')", { rowHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues(false, range["rowHidden"], "rowHidden");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetRowsAbove_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='D7:G10')/rowsAbove(count=3)")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!D4:G6", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetRowsAboveOutOfBoundsShouldFail_cvt_REST_V11() {
		ExcelTest.RestUtility.get("worksheets('Sheet1')/range(address='D1:G10')/rowsAbove(count=3)")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(400))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetRowsBelow_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='D7:G10')/rowsBelow(count=3)")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!D11:G13", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	
	
	
	
	
	
	
	export function test_Range_GetColumnsAfter_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='D7:G10')/ColumnsAfter(count=3)")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!H7:J10", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	
	
	
	
	
	
	
	export function test_Range_GetColumnsBefore_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='D7:G10')/ColumnsBefore(count=3)")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!A7:C10", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetColumnsBeforeOutOfBoundsShouldFail_cvt_REST_V11() {
		ExcelTest.RestUtility.get("worksheets('Sheet1')/range(address='D1:G10')/rowsAbove(count=5)")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(400))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_GetResizedRange_cvt_REST_V11() {
		RestUtility.get("worksheets('Sheet1')/range(address='D7:G10')/ResizedRange(deltaRows=1, deltaColumns = 1)")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!D7:H11", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Range_Areas_cvt_REST_V18() {
		RestUtility.get("worksheets('Sheet1')/range(address='C3:E5')/Areas")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject<Array<Range>>((obj) => obj.value))
			.then((areas) => {
				Util.assertCompareValues(areas.length, 1, "There should be only one area in this range");
				Util.assertCompareValues(areas[0]["address"], "Sheet1!C3:E5", "The area address should match the range");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	
	
	
	
	
	
	
}
?module ExcelTest {
	export function test_RangeView_HiddenRowsValuesGet_cvt_REST_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [[1, 2], [1, 3], [7, 8], [9, 10]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B5')", { values: rangeValuesToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A3')", { rowHidden: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:B5')/visibleView"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
			Util.assertCompareArray(rangeView["values"], rangeValuesToGet);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:B5')", { rowHidden: false, columnHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeView_HiddenRowsValuesPut_cvt_REST_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToSetVisible = [["a", "b"], [11, 12], [13, 14], [15, 16]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B5')", { values: rangeValuesToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A3')", { rowHidden: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:B5')/visibleView", { values: rangeValuesToSetVisible }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:B5')/visibleView"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareArray(rangeView["values"], rangeValuesToSetVisible);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:B5')", { rowHidden: false, columnHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeView_HiddenRowsRowCountGet_cvt_REST_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B5')", { values: rangeValuesToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A3')", { rowHidden: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:B5')/visibleView"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareValues(rangeView["rowCount"], 4);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:B5')", { rowHidden: false, columnHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeView_HiddenRowsCellAddressGet_cvt_REST_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeValuesToGet = [["A1", "B1"], ["A2", "B2"], ["A4", "B4"], ["A5", "B5"]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B5')", { values: rangeValuesToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A3')", { rowHidden: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:B5')/visibleView"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareArray(rangeView["cellAddresses"], rangeValuesToGet);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:B5')", { rowHidden: false, columnHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeView_HiddenColumnsValuesGet_cvt_REST_V13() {
		var rangeValuesToSet = [[1, 2, 21], ["=A1", "=SUM(A1:B1)", "=C1"], [5, 6, 23], [7, 8, 24], [9, 10, 25]];
		var rangeValuesToGet = [[1, 21], [1, 21], [5, 23], [7, 24], [9, 25]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C5')", { values: rangeValuesToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='B3')", { columnHidden: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:C5')/visibleView"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareArray(rangeView["values"], rangeValuesToGet);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:C5')", { rowHidden: false, columnHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeView_HiddenColumnsColumnCountGet_cvt_REST_V13() {
		var rangeValuesToSet = [[1, 2, 21], ["=A1", "=SUM(A1:B1)", "=C1"], [5, 6, 23], [7, 8, 24], [9, 10, 25]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:C5')", { values: rangeValuesToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='B3')", { columnHidden: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:C5')/visibleView"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareValues(rangeView["columnCount"], 2);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:C5')", { rowHidden: false, columnHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeView_RowsCollectionValuesGet_cvt_REST_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B5')", { values: rangeValuesToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A3')", { rowHidden: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:B5')/visibleView/rows"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeViewRows: any) => {
				Util.assertCompareArray(rangeViewRows.value[0].values, [[1, 2]]);
				Util.assertCompareArray(rangeViewRows.value[1].values, [[1, 3]]);
				Util.assertCompareArray(rangeViewRows.value[2].values, [[7, 8]]);
				Util.assertCompareArray(rangeViewRows.value[3].values, [[9, 10]]);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:B5')", { rowHidden: false, columnHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeView_RowsCollectionValuesCount_cvt_REST_V13() {
		RestUtility.patch("worksheets('Sheet1')/range(address='A3')", { rowHidden: true })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(() => _injectCollectionCountTest_REST("worksheets('Sheet1')/range(address='A1:B5')/visibleView/rows"))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A3')", { rowHidden: false}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeView_RowsCollectionValuesGetSkipTop_cvt_REST_V13() {
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B40')", { rowHidden: false, columnHidden: false })
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A15:A18')", { rowHidden: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:B40')/visibleView/rows?$skip=10&$top=15"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeViewRows: any) => {
				Util.assertCompareArray(rangeViewRows.value[0].cellAddresses, [["A11", "B11"]]);
				Util.assertCompareArray(rangeViewRows.value[1].cellAddresses, [["A12", "B12"]]);
				Util.assertCompareArray(rangeViewRows.value[2].cellAddresses, [["A13", "B13"]]);
				Util.assertCompareArray(rangeViewRows.value[3].cellAddresses, [["A14", "B14"]]);
				Util.assertCompareArray(rangeViewRows.value[4].cellAddresses, [["A19", "B19"]]);
				Util.assertCompareArray(rangeViewRows.value[5].cellAddresses, [["A20", "B20"]]);
				Util.assertCompareArray(rangeViewRows.value[6].cellAddresses, [["A21", "B21"]]);
				Util.assertCompareArray(rangeViewRows.value[7].cellAddresses, [["A22", "B22"]]);
				Util.assertCompareArray(rangeViewRows.value[8].cellAddresses, [["A23", "B23"]]);
				Util.assertCompareArray(rangeViewRows.value[9].cellAddresses, [["A24", "B24"]]);
				Util.assertCompareArray(rangeViewRows.value[10].cellAddresses, [["A25", "B25"]]);
				Util.assertCompareArray(rangeViewRows.value[11].cellAddresses, [["A26", "B26"]]);
				Util.assertCompareArray(rangeViewRows.value[12].cellAddresses, [["A27", "B27"]]);
				Util.assertCompareArray(rangeViewRows.value[13].cellAddresses, [["A28", "B28"]]);
				Util.assertCompareArray(rangeViewRows.value[14].cellAddresses, [["A29", "B29"]]);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:B40')", { rowHidden: false, columnHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_RangeView_RowsCollectionValuesSet_cvt_REST_V13() {
		var rangeValuesToSet = [[1, 2], ["=A1", "=SUM(A1:B1)"], [5, 6], [7, 8], [9, 10]];
		var rangeViewRowsToPatch = [[20, 21]];
		RestUtility.patch("worksheets('Sheet1')/range(address='A1:B5')", { values: rangeValuesToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A3')", { rowHidden: true }))
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:B5')/visibleView/rows/itemAt(index=2)", { values: rangeViewRowsToPatch }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((rangeView) => {
				Util.assertCompareArray(rangeView["values"], rangeViewRowsToPatch);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:B5')", { rowHidden: false, columnHidden: false }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?
module ExcelTest {
}
?module ExcelTest {
}
?module ExcelTest {
	export function test_Worksheet_LoadAllSheets_bvt_REST_V11() {
		RestUtility.get("worksheets")
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				Util.assert(data.value.length > 2, "Should have at least 2 worksheets");
				for (var i = 0; i < data.value.length; i++) {
					RichApiTest.log.comment("Sheet.name=" + data.value[i].name);
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_Worksheet_LoadSheetsExpand_cvt_REST_V11() {
		var createdChartId;
		ChartUtil.Rest.removeAll()
			.then(ChartUtil.Rest.Thenable.createBasicChart())
			.then((createdChart) => {
				createdChartId = RestUtility.getODataId(createdChart);
			})
			.then(RestUtility.Thenable.get("worksheets?$expand=charts"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				for (var i = 0; i < data.value.length; i++) {
					RichApiTest.log.comment("Sheet.name=" + data.value[i].name);
					Util.assert(data.value[i].charts && Array.isArray(data.value[i].charts), "Should get charts");
					for (var j = 0; j < data.value[i].charts.length; j++) {
						RichApiTest.log.comment("chart.name=" + data.value[i].charts[j].name);
					}
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_Worksheet_LoadSheetsTop_cvt_REST_V11() {
		RestUtility.get("worksheets?$top=2")
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				Util.assertCompareValues(2, data.value.length);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_Worksheet_LoadSheetsTopSkip_cvt_REST_V11() {
		var skippedName: string;
		RestUtility.get("worksheets?$top=1")
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				Util.assertCompareValues(1, data.value.length);
				skippedName = data.value[0].name;
			})
			.then(RestUtility.Thenable.get("worksheets?$skip=1&$top=2"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				Util.assertCompareValues(2, data.value.length);
				for (var i = 0; i < data.value.length; i++) {
					Util.assert(data.value[i].name !== skippedName, "should skip " + skippedName);
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_Worksheet_WorksheetCollectionAdd_cvt_REST_V11() {
		var sheetName = "Sheet a' b";
		RestUtility.get("worksheets")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((value: any) => {
				for (var i = 0; i < value.value.length; i++) {
					if (value.value[i].name == sheetName) {
						RichApiTest.log.comment("deleting " + value.value[i].name);
						return RestUtility.deleteItem(value.value[i]);
					}
				}
			})
			.then(RestUtility.Thenable.post("worksheets/add", { "name": sheetName }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((value: any) => {
				RestUtility.validateValue(value.name, sheetName);
			})
			.then(RestUtility.Thenable.get("worksheets(" + RestUtility.encodeODataLiteral(sheetName) + ")"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((value: any) => {
				RestUtility.validateValue(value.name, sheetName);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetActiveWorksheet_cvt_REST_V11() {
		
		var valueToSet = [[1]];
		RestUtility.patch("worksheets/activeworksheet/range(address='A10')", { values: valueToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range: any) => {
				Util.assert(Util.compareArray(valueToSet, range.values), "Compare range value");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_Delete_cvt_REST_V11(): void {
		RestUtility.post("worksheets", { "name": "foo1" + Math.random()})
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.Created))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((item) => RestUtility.deleteItem(item))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_ActivateShouldFail_cvt_REST_V11() {
		RestUtility.ensureDisabledApiFailed("worksheets('sheet1')/activate", RichApiTest.RestUtility.httpMethodPost);
	}
	export function test_Worksheet_GetCell_cvt_REST_V11(): void {
		RestUtility.invokeGetAndValidateResponse("worksheets('sheet1')/cell(row=1,column=1)", "Sheet1!B2", (body) => body.address);
	}
	export function test_Worksheet_GetRangeWithoutInput_cvt_REST_V11(): void {
		RestUtility.invokeGetAndValidateResponse("worksheets('sheet1')/range(address=null)", "Sheet1!1:1048576", (body) => body.address);
	}
	export function test_Worksheet_Id_cvt_REST_V11() {
		
		if (Util.isApple()) { return ExcelTest.pass(); }
		RestUtility.invokeGetAndValidateResponse("worksheets('sheet1')/id", "{00000000-0001-0000-0100-000000000000}", (body) => body.value);
	}
	export function test_Worksheet_Position_cvt_REST_V11(): void {
		var expectedPosition = 1;
		RestUtility.patch("worksheets('Sheet1')", { "position": expectedPosition })
			.then(() => RestUtility.invokeGetAndValidateResponse("worksheets('sheet1')/position", expectedPosition, (body) => body.value));
	}
	export function test_Worksheet_Name_cvt_REST_V11(): void {
		RestUtility.invokeGetAndValidateResponse("worksheets('sheet1')/name", "Sheet1", (body) => body.value);
	}
	
	export function test_Worksheet_UsedRangeEmpty_cvt_REST_V11(): void {
		Util.clearSheetRest("Sheet1")
			.then(RestUtility.Thenable.get("worksheets('sheet1')/usedrange(valuesOnly=false)"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!A1", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_UsedRange_cvt_REST_V11() {
		Util.clearSheetRest("Sheet1")
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')/range(address='A1:C3')", { values: [[1, "", 3], ["", 5, 6], ["", 8, 9]] }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('Sheet1')/range(address='A1:C1')/clear", { applyTo: Excel.ClearApplyTo.all }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/usedrange(valuesOnly=false)"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				Util.assertCompareValues("Sheet1!B2:C3", range["address"], "Address");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_Visibility_cvt_REST_V11(): void {
		RestUtility.invokeGetAndValidateResponse("worksheets('sheet1')/visibility", Excel.SheetVisibility.visible, (body) => body.value);
	}
	export function test_Worksheet_Count$All_cvt_REST_V14(): void {
		_injectCollectionCountTest_REST("worksheets")
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_Count$VisibleOnly_cvt_REST_V14(): void {
		var visibleElementCount: number = 0;
		return OfficeExtension.Promise.resolve()
			.then(RestUtility.Thenable.get("worksheets"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				for (var i = 0; i < data.value.length; i++) {
					if (data.value[i].visibility === Excel.SheetVisibility.visible) {
						visibleElementCount++;
					}
				}
				RichApiTest.log.comment("Count of sheets in returned list that are visible: " + visibleElementCount);
			})
			.then(RestUtility.Thenable.get("worksheets/count(true)"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				var reportedCount = data.value;
				RichApiTest.log.comment("Reported visibleOnly sheet count: " + reportedCount);
				Util.assert(() => reportedCount === visibleElementCount);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_FirstLast$VisibleOnly_cvt_REST_V15(): void {
		var nameOfFirstFromCollection: string;
		var nameOfLastFromCollection: string;
		return OfficeExtension.Promise.resolve()
			.then(RestUtility.Thenable.get("worksheets"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				nameOfFirstFromCollection = data.value[0].name;
				nameOfLastFromCollection = data.value[data.value.length - 1].name;
			})
			.then(RestUtility.Thenable.get("worksheets/first"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				Util.assertCompareValues(nameOfFirstFromCollection, data.name);
			})
			.then(RestUtility.Thenable.get("worksheets/last"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				Util.assertCompareValues(nameOfLastFromCollection, data.name);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_NextPrevious$VisibleOnly_cvt_REST_V15(): void {
		var sheets: Array<{ name: string }>;
		var nameOfNextFromCollection: string;
		return OfficeExtension.Promise.resolve()
			.then(RestUtility.Thenable.get("worksheets"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => sheets = data.value)
			.then(() => RestUtility.get(`worksheets('${sheets[0].name}')/next`))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				Util.assertCompareValues(sheets[1].name, data.name);
			})
			.then(() => RestUtility.get(`worksheets('${sheets[1].name}')/previous`))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => {
				Util.assertCompareValues(sheets[0].name, data.name);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_NextPreviousOutOfBounds$VisibleOnly_cvt_REST_V15(): void {
		var sheets: Array<{ name: string }>;
		var nameOfNextFromCollection: string;
		return OfficeExtension.Promise.resolve()
			.then(RestUtility.Thenable.get("worksheets"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((data: any) => sheets = data.value)
			.then(() => RestUtility.get(`worksheets('${sheets[0].name}')/previous`))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NotFound))
			.then(() => RestUtility.get(`worksheets('${sheets[sheets.length - 1].name}')/next`))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NotFound))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_TabColorSetColor_cvt_REST_V17() {
		RestUtility.patch("worksheets('Sheet1')", { tabColor: "#FF0000" })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(RestUtility.Thenable.get("worksheets('Sheet1')"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues(worksheet["tabColor"], "#FF0000");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_TabColorSetNamedColor_cvt_REST_V17() {
		RestUtility.patch("worksheets('Sheet1')", { tabColor: "red" })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(RestUtility.Thenable.get("worksheets('Sheet1')"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues(worksheet["tabColor"], "#FF0000");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_TabColorSetAutoColor_cvt_REST_V17() {
		RestUtility.patch("worksheets('Sheet1')", { tabColor: "" })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(RestUtility.Thenable.get("worksheets('Sheet1')"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues(worksheet["tabColor"], "");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_TabColorSetNull_cvt_REST_V17() {
		var orginalColor: string;
		return OfficeExtension.Promise.resolve()
			.then(RestUtility.Thenable.get("worksheets('Sheet1')"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet: any) => orginalColor = worksheet["tabColor"])
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')", { tabColor: null })) 
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues(worksheet["tabColor"], orginalColor); 
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetSetGridlines_cvt_REST_V17() {
		RestUtility.patch("worksheets('Sheet1')", { gridlines: false })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues(worksheet["gridlines"], false);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')", { gridlines: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues(worksheet["gridlines"], true);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetSetHeadings_cvt_REST_V17() {
		RestUtility.patch("worksheets('Sheet1')", { headings: false })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues(worksheet["headings"], false);
			})
			.then(RestUtility.Thenable.patch("worksheets('Sheet1')", { headings: true }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues(worksheet["headings"], true);
			})
			.then(ExcelTest.pass)	
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_FreezePanes_cvt_REST_V17() {
		RestUtility.post("worksheets('Sheet1')/freezePanes/unfreeze", {})
			.then(RestUtility.Thenable.post("worksheets('Sheet1')/freezePanes/freezeRows", {}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.post("worksheets('Sheet1')/freezePanes/freezeColumns", {}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/freezePanes/location"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((frozenRange: Excel.Range) => {
				Util.assert(!frozenRange["isNullObject"])
				Util.assertCompareValues("Sheet1!A1", frozenRange["address"]);
			})
			.then(RestUtility.Thenable.post("worksheets('Sheet1')/freezePanes/unfreeze", {}))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('Sheet1')/freezePanes/location"))
			.then(RestUtility.Thenable.validateErrorCode("ItemNotFound"))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetStandardWidth_cvt_REST_V17() {
		var strandardWidth = 8.43;
		ExcelTest.RestUtility.get("worksheets('Sheet1')")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (worksheet) {
				ExcelTest.Util.assertCompareValues(worksheet["standardWidth"], strandardWidth);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_SetStandardWidth_cvt_REST_V17() {
		var expectedWidth = 2.71;
		ExcelTest.RestUtility.patch("worksheets('Sheet1')", { standardWidth: expectedWidth})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (worksheet) {
				ExcelTest.Util.assertCompareValues(worksheet["standardWidth"], expectedWidth);
			})
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('Sheet1')", { standardWidth: 8.43 }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_SetStandardWidthWithNegativeInvalidValue_cvt_REST_V17() {
		ExcelTest.RestUtility.patch("worksheets('Sheet1')", { standardWidth: -1 })
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.InternalServeError))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (errorInfo) {
				ExcelTest.Util.assertCompareValues(errorInfo["error"]["code"], Excel.ErrorCodes.generalException)
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_SetStandardWidthWithPositiveInvalidValue_cvt_REST_V17() {
		ExcelTest.RestUtility.patch("worksheets('Sheet1')", { standardWidth: 256 })
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.InternalServeError))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (errorInfo) {
				ExcelTest.Util.assertCompareValues(errorInfo["error"]["code"], Excel.ErrorCodes.generalException)
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_GetStandardHeight_cvt_REST_V17() {
		var strandardHeight = 15;
		ExcelTest.RestUtility.get("worksheets('Sheet1')")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (worksheet) {
				ExcelTest.Util.assertCompareValues(worksheet["standardHeight"], strandardHeight);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Worksheet_Copy$NotSpecified_cvt_REST_V17() {
		var sheet1Position;
		RestUtility.get("worksheets('Sheet1')/position")
			.then(RestUtility.Thenable.validateStatus(200))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(response => {
				sheet1Position = response["value"];
			})
			.then(RestUtility.Thenable.post("worksheets('SheetToCopy')/copy", {}))
			.then(RestUtility.Thenable.validateStatus(200))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(worksheet => {
				Util.assertCompareValues('SheetToCopy (2)', worksheet["name"]);
				Util.assertCompareValues(sheet1Position, worksheet["position"]);
			})
			.then(RestUtility.Thenable.get("worksheets('SheetToCopy (2)')/range(address='A1:D1')"))
			.then(RestUtility.Thenable.validateStatus(200))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(range => {
				Util.assertCompareArray(range["values"], [['Hello World', 12.34, true, 12345]]);
			})
			.then(RestUtility.Thenable.get("worksheets('SheetToCopy (2)')"))
			.then(RestUtility.Thenable.validateStatus(200))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then(copiedSheet => RestUtility.deleteItem(copiedSheet))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export module SortUtil {
		export function SetInitialState(): OfficeExtension.IPromise<any> {
			return RestUtility.patch("worksheets('SortFilter')/range(address='A1:A6')", { values: SortUtil.singleColumnDataset })
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK));
		}
		export function SetInitialTextState(): OfficeExtension.IPromise<any> {
			return RestUtility.patch("worksheets('SortFilter')/range(address='A1:A6')", { values: SortUtil.singleColumnLetterDataset })
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK));
		}
		export function SetInitialSingleRowState(): OfficeExtension.IPromise<any> {
			return RestUtility.patch("worksheets('SortFilter')/range(address='A1:E1')", { values: SortUtil.singleRowDataset })
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK));
		}
		export function SetInitialTwoColState(): OfficeExtension.IPromise<any> {
			return RestUtility.patch("worksheets('SortFilter')/range(address='A1:B6')", { values: SortUtil.twoColumnDataset })
				.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK));
		}
	}
	export function test_SortFilter_SortRange_cvt_REST_V12() {
		ExcelTest.SortUtil.SetInitialState()
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('SortFilter')/range(address='A1:A6')/sort/apply", { fields: [{ key: 0 }] }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('SortFilter')/range(address='A1:A6')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((values) => {
				var val = (<any>values).values;
				if (!Util.compareArray(val, [[84], [65], [54], [23], [21], [2]])) {
					throw "Values were not as expected: '" + [[84], [65], [54], [23], [21], [2]] + "' Actual: '" + val + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeAscending_cvt_REST_V12() {
		ExcelTest.SortUtil.SetInitialState()
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('SortFilter')/range(address='A1:A6')/sort/apply",
				{
					fields: [{
						key: 0,
						ascending: true
					}]
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('SortFilter')/range(address='A1:A6')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((values) => {
				var val = (<any>values).values;
				var expected = [[2], [21], [23], [54], [65], [84]];
				if (!Util.compareArray(val, expected)) {
					throw "Values were not as expected: '" + expected + "' Actual: '" + val + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeHasHeader_cvt_REST_V12() {
		ExcelTest.SortUtil.SetInitialState()
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('SortFilter')/range(address='A1:A6')/sort/apply",
				{
					fields: [{
						key: 0,
					}],
					matchCase: false,
					hasHeaders: true
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('SortFilter')/range(address='A1:A6')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((values) => {
				var val = (<any>values).values;
				var expected = [[54], [84], [65], [23], [21], [2]];
				if (!Util.compareArray(val, expected)) {
					throw "Values were not as expected: '" + expected + "' Actual: '" + val + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeAscendingHasHeader_cvt_REST_V12() {
		ExcelTest.SortUtil.SetInitialState()
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('SortFilter')/range(address='A1:A6')/sort/apply",
				{
					fields: [{
						key: 0,
						ascending: true
					}],
					matchCase: false,
					hasHeaders: true
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('SortFilter')/range(address='A1:A6')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((values) => {
				var val = (<any>values).values;
				var expected = [[54], [2], [21], [23], [65], [84]];
				if (!Util.compareArray(val, expected)) {
					throw "Values were not as expected: '" + expected + "' Actual: '" + val + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeMatchCase_cvt_REST_V12() {
		ExcelTest.SortUtil.SetInitialTextState()
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('SortFilter')/range(address='A1:A6')/sort/apply",
				{
					fields: [{
						key: 0,
						ascending: true
					}],
					matchCase: true
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('SortFilter')/range(address='A1:A6')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((values) => {
				var val = (<any>values).values;
				var expected = [["aA"], ["Aa"], ["bB"], ["Bb"], ["cc"], ["CC"]];
				if (!Util.compareArray(val, expected)) {
					throw "Values were not as expected: '" + expected + "' Actual: '" + val + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeColumn_cvt_REST_V12() {
		ExcelTest.SortUtil.SetInitialSingleRowState()
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('SortFilter')/range(address='A1:E1')/sort/apply",
				{
					fields: [{
						key: 0,
						ascending: true
					}],
					matchCase: false,
					hasHeaders: false,
					orientation: Excel.SortOrientation.columns
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('SortFilter')/range(address='A1:E1')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((values) => {
				var val = (<any>values).values;
				var expected = [[3, 14, 46, 65, 845]];
				if (!Util.compareArray(val, expected)) {
					throw "Values were not as expected: '" + expected + "' Actual: '" + val + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeMultiple_cvt_REST_V12() {
		ExcelTest.SortUtil.SetInitialTwoColState()
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('SortFilter')/range(address='A1:B6')/sort/apply",
				{
					fields: [{
						key: 1,
						ascending: true
					},
					{
						key: 0,
						ascending: false
					}]
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('SortFilter')/range(address='A1:B6')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((values) => {
				var val = (<any>values).values;
				var expected = [[84, 7], [21, 13], [65, 24], [23, 24], [2, 76], [54, 91]];
				if (!Util.compareArray(val, expected)) {
					throw "Values were not as expected: '" + expected + "' Actual: '" + val + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeCellColor_cvt_REST_V12() {
		ExcelTest.SortUtil.SetInitialState()
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('SortFilter')/range(address='A1:A6')/format/fill", { color: "#FFFFFF" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('SortFilter')/range(address='A1')/format/fill", { color: "#0000FF" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('SortFilter')/range(address='A4')/format/fill", { color: "Tomato" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('SortFilter')/range(address='A5')/format/fill", { color: "PapayaWhip" }))
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('SortFilter')/range(address='A1:A6')/sort/apply",
				{
					fields: [
						{
							key: 0,
							sortOn: Excel.SortOn.cellColor,
							color: "#0000FF",
						},
						{
							key: 0,
							sortOn: Excel.SortOn.cellColor,
							color: "Tomato",
							ascending: true
						},
						{
							key: 0,
							sortOn: Excel.SortOn.cellColor,
							color: "PapayaWhip",
							ascending: true
						}]
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('SortFilter')/range(address='A1:A6')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((values) => {
				var val = (<any>values).values;
				var expected = [[65], [21], [23], [84], [2], [54]];
				if (!Util.compareArray(val, expected)) {
					throw "Values were not as expected: '" + expected + "' Actual: '" + val + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeFontColor_cvt_REST_V12() {
		ExcelTest.SortUtil.SetInitialState()
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('SortFilter')/range(address='A1:A6')/format/font", { color: "#000000" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('SortFilter')/range(address='A1')/format/font", { color: "CornflowerBlue" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('SortFilter')/range(address='A4')/format/font", { color: "FireBrick" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('SortFilter')/range(address='A5')/format/font", { color: "Peru" }))
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('SortFilter')/range(address='A1:A6')/sort/apply",
				{
					fields: [
						{
							key: 0,
							sortOn: Excel.SortOn.fontColor,
							color: "CornflowerBlue",
						},
						{
							key: 0,
							sortOn: Excel.SortOn.fontColor,
							color: "FireBrick",
							ascending: true
						},
						{
							key: 0,
							sortOn: Excel.SortOn.fontColor,
							color: "Peru",
							ascending: true
						}]
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('SortFilter')/range(address='A1:A6')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((values) => {
				var val = (<any>values).values;
				var expected = [[65], [21], [23], [84], [2], [54]];
				if (!Util.compareArray(val, expected)) {
					throw "Values were not as expected: '" + expected + "' Actual: '" + val + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortRangeIcon_cvt_REST_V12() {
		ExcelTest.SortUtil.SetInitialState()
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('SortFilter')/range(address='A11:A16')/sort/apply",
				{
					fields: [
						{
							key: 0,
							sortOn: Excel.SortOn.icon,
							icon: Excel.icons.fiveArrows.yellowSideArrow,
							ascending: true
						},
						{
							key: 0,
							sortOn: Excel.SortOn.icon,
							icon: Excel.icons.fiveArrows.yellowUpInclineArrow,
							ascending: true
						},
						{
							key: 0,
							sortOn: Excel.SortOn.value,
							ascending: true
						}]
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('SortFilter')/range(address='A11:A16')"))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((values) => {
				var val = (<any>values).values;
				var expected = [[485], [546], [123], [213], [656], [789]];
				if (!Util.compareArray(val, expected)) {
					throw "Values were not as expected: '" + expected + "' Actual: '" + val + "'";
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableBasic_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/apply",
				{
					fields: [{
						key: 0,
					}],
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				var expected = [[67, 782, "Aa"],
					[67, 12, "Bb"],
					[45, 94, "aA"],
					[45, 34, "CC"],
					[37, 41, "cc"],
					[18, 12, "bB"]];
				if (!Util.compareArray(range["values"], expected)) {
					throw new Error("Range not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableAscending_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/apply",
				{
					fields: [{
						key: 1,
						ascending: true
					}],
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				var expected = [[67, 12, "Bb"],
					[18, 12, "bB"],
					[45, 34, "CC"],
					[37, 41, "cc"],
					[45, 94, "aA"],
					[67, 782, "Aa"]];
				if (!Util.compareArray(range["values"], expected)) {
					throw new Error("Range not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableMatchCase_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/apply",
				{
					fields: [{
						key: 2,
						ascending: true
					}],
					matchCase: true
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				var expected = [[45, 94, "aA"],
					[67, 782, "Aa"],
					[18, 12, "bB"],
					[67, 12, "Bb"],
					[37, 41, "cc"],
					[45, 34, "CC"]];
				if (!Util.compareArray(range["values"], expected)) {
					throw new Error("Range not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableMultipleSortLevel_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/apply",
				{
					fields: [{
						key: 0,
						ascending: true
					},
					{
						key: 1,
						ascending: false
					}],
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				var expected = [[18, 12, "bB"],
					[37, 41, "cc"],
					[45, 94, "aA"],
					[45, 34, "CC"],
					[67, 782, "Aa"],
					[67, 12, "Bb"]];
				if (!Util.compareArray(range["values"], expected)) {
					throw new Error("Range not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableFontColor_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/format/font", { color: "black" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=0, column=0)/format/font", { color: "SteelBlue" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=3, column=0)/format/font", { color: "Chartreuse" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=4, column=0)/format/font", { color: "Bisque" }))
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/apply",
				{
					fields: [{
						key: 0,
						sortOn: Excel.SortOn.fontColor,
						color: "SteelBlue"
					},
					{
						key: 0,
						sortOn: Excel.SortOn.fontColor,
						color: "Chartreuse",
						ascending: true
					},
					{
						key: 0,
						sortOn: Excel.SortOn.fontColor,
						color: "Bisque",
						ascending: true
					}],
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				var expected = [[18, 12, "bB"],
					[45, 34, "CC"],
					[67, 782, "Aa"],
					[67, 12, "Bb"],
					[37, 41, "cc"],
					[45, 94, "aA"]];
				if (!Util.compareArray(range["values"], expected)) {
					throw new Error("Range not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_SortTableCellColor_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/format/fill", { color: "white" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=0, column=0)/format/fill", { color: "BurlyWood" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=3, column=0)/format/fill", { color: "Crimson" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=4, column=0)/format/fill", { color: "Moccasin" }))
			.then(ExcelTest.RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/apply",
				{
					fields: [{
						key: 0,
						sortOn: Excel.SortOn.cellColor,
						color: "BurlyWood"
					},
						{
							key: 0,
							sortOn: Excel.SortOn.cellColor,
							color: "Crimson",
							ascending: true
						},
						{
							key: 0,
							sortOn: Excel.SortOn.cellColor,
							color: "Moccasin",
							ascending: true
						}],
				}))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((range) => {
				var expected = [[18, 12, "bB"],
					[45, 34, "CC"],
					[67, 782, "Aa"],
					[67, 12, "Bb"],
					[37, 41, "cc"],
					[45, 94, "aA"]];
				if (!Util.compareArray(range["values"], expected)) {
					throw new Error("Range not sorted as expected");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterCustom_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.custom,
						criterion1: ">60",
						operator: Excel.FilterOperator.and,
						criterion2: "<100"
					}
				}
				))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [false, true, true, true, true, true];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((filter) => {
				Util.assertCompareValues(Excel.FilterOn.custom, filter["criteria"]["filterOn"]);
				Util.assertCompareValues(">60", filter["criteria"]["criterion1"]);
				Util.assertCompareValues(Excel.FilterOperator.and, filter["criteria"]["operator"]);
				Util.assertCompareValues("<100", filter["criteria"]["criterion2"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterTop_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.topItems,
						criterion1: "3"
					}
				}
				))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [false, false, true, true, true, false];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((filter) => {
				Util.assertCompareValues(Excel.FilterOn.topItems, filter["criteria"]["filterOn"]);
				Util.assertCompareValues("3", filter["criteria"]["criterion1"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterTopPercent_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.topPercent,
						criterion1: "50"
					}
				}
				))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [false, false, true, true, true, false];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((filter) => {
				Util.assertCompareValues(Excel.FilterOn.topPercent, filter["criteria"]["filterOn"]);
				Util.assertCompareValues("50", filter["criteria"]["criterion1"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterBottomItems_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.bottomItems,
						criterion1: "3"
					}
				}
				))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [true, true, false, false, false, true];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((filter) => {
				Util.assertCompareValues(Excel.FilterOn.bottomItems, filter["criteria"]["filterOn"]);
				Util.assertCompareValues("3", filter["criteria"]["criterion1"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterBottomPercent_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.bottomPercent,
						criterion1: "33"
					}
				}
				))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [true, true, false, false, true, true];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((filter) => {
				Util.assertCompareValues(Excel.FilterOn.bottomPercent, filter["criteria"]["filterOn"]);
				Util.assertCompareValues("33", filter["criteria"]["criterion1"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterCellColor_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/format/fill/clear"))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=0, column=0)/format/fill", { color: "BurlyWood" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=3, column=0)/format/fill", { color: "Crimson" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=4, column=0)/format/fill", { color: "Moccasin" }))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 0 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.cellColor,
						color: "crimson"
					}
				}
				))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [true, true, true, false, true, true];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 0 + ")/filter"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((filter) => {
				Util.assertCompareValues(Excel.FilterOn.cellColor, filter["criteria"]["filterOn"]);
				Util.assertCompareValues("#DC143C", filter["criteria"]["color"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterFontColor_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/format/font", { color: "black" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=0, column=0)/format/font", { color: "SteelBlue" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=3, column=0)/format/font", { color: "Chartreuse" }))
			.then(ExcelTest.RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/cell(row=4, column=0)/format/font", { color: "Bisque" }))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 0 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.fontColor,
						color: "Chartreuse"
					}
				}
				))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [true, true, true, false, true, true];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 0 + ")/filter"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((filter) => {
				Util.assertCompareValues(Excel.FilterOn.fontColor, filter["criteria"]["filterOn"]);
				Util.assertCompareValues("#7FFF00", filter["criteria"]["color"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterDynamic_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.dynamic,
						dynamicCriteria: Excel.DynamicFilterCriteria.aboveAverage
					}
				}
				))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [true, false, true, true, true, true];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((filter) => {
				Util.assertCompareValues(Excel.FilterOn.dynamic, filter["criteria"]["filterOn"]);
				Util.assertCompareValues(Excel.DynamicFilterCriteria.aboveAverage, filter["criteria"]["dynamicCriteria"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterValuesStringOnly_cvt_REST_V12() {
		var filterValues = ['782', '12', '94'];
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.values,
						values: filterValues
					}
				}
				))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [false, false, false, false, true, true];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((filter) => {
				Util.assertCompareValues(Excel.FilterOn.values, filter["criteria"]["filterOn"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_SortFilter_FilterNone_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.custom,
						criterion1: ">60",
						operator: Excel.FilterOperator.and,
						criterion2: "<100"
					}
				}
				))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [false, true, true, true, true, true];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(RestUtility.Thenable.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((filter) => {
				Util.assertCompareValues(Excel.FilterOn.custom, filter["criteria"]["filterOn"]);
				Util.assertCompareValues(">60", filter["criteria"]["criterion1"]);
				Util.assertCompareValues(Excel.FilterOperator.and, filter["criteria"]["operator"]);
				Util.assertCompareValues("<100", filter["criteria"]["criterion2"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_SortFilter_FilterClear_cvt_REST_V12() {
		RestUtility.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/sort/clear"))
			.then(RestUtility.Thenable.patch("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange", { values: ExcelTest.SortUtil.tableDataset }))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.post("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/columns/itemAt(index=" + 1 + ")/filter/apply",
				{
					criteria: {
						filterOn: Excel.FilterOn.topItems,
						criterion1: "3"
					}
				}
				))
			.then(RestUtility.Thenable.postAsUrlAction("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/clearFilters"))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(function () {
				return OfficeExtension.Promise.all(
					[0, 1, 2, 3, 4, 5].map(function (item) {
						return RestUtility.get("worksheets('" + ExcelTest.SortUtil.sheetName + "')/tables('" + ExcelTest.SortUtil.tableName + "')/databodyrange/row(row=" + item + ")");
					}));
			})
			.then(function (e) {
				var expected = [false, false, false, false, false, false];
				var visibilities = e.map((row) => {
					return RestUtility.getBodyAsObject(row, (range) => {
						return range["rowHidden"];
					});
				});
				for (var i = 0; i < e.length; i++) {
					Util.assertCompareValues(expected[i], visibilities[i], "row '" + i + "' - rowHidden");
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Style_CreateStyle_cvt_REST_V17() {
		ExcelTest.RestUtility.get("styles")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.post("styles/add", { name: "New Style" }))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("styles('New Style')"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Style_ApplyStyle_cvt_REST_V17() {
		ExcelTest.RestUtility.patch("worksheets('Sheet1')/range(address='A1:A1')", { style: "Style 1" })
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:A1')/format"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(format => {
				ExcelTest.Util.assertCompareValues(19, format["textOrientation"])
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Style_ApplyBuiltInStyle_cvt_REST_V17() {
		ExcelTest.RestUtility.patch("worksheets('Sheet1')/range(address='A1:A1')", { style: "Bad" })
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(ExcelTest.RestUtility.Thenable.get("worksheets('Sheet1')/range(address='A1:A1')/format/fill"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(fill => {
				ExcelTest.Util.assertCompareValues("#FFC7CE", fill["color"])
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Style_DeleteStyle_cvt_REST_V17() {
		ExcelTest.RestUtility.get("styles('New Style')")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(item => ExcelTest.RestUtility.deleteItem(item))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.RestUtility.Thenable.get("styles('New Style')"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(RestUtility.Status.NotFound))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Style_GetStyleProperties_cvt_REST_V17() {
		ExcelTest.RestUtility.get("styles('Style 1')")
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (style) {
				ExcelTest.Util.assertCompareValues(false, style["addIndent"]);
				ExcelTest.Util.assertCompareValues(false, style["builtIn"]);
				ExcelTest.Util.assertCompareValues(true, style["formulaHidden"]);
				ExcelTest.Util.assertCompareValues("Right", style["horizontalAlignment"]);
				ExcelTest.Util.assertCompareValues(true, style["includeAlignment"]);
				ExcelTest.Util.assertCompareValues(true, style["includeBorder"]);
				ExcelTest.Util.assertCompareValues(true, style["includeFont"]);
				ExcelTest.Util.assertCompareValues(true, style["includeNumber"]);
				ExcelTest.Util.assertCompareValues(true, style["includePatterns"]);
				ExcelTest.Util.assertCompareValues(true, style["includeProtection"]);
				ExcelTest.Util.assertCompareValues(0, style["indentLevel"]);
				ExcelTest.Util.assertCompareValues(false, style["locked"]);
				ExcelTest.Util.assertCompareValues("Style 1", style["name"]);
				ExcelTest.Util.assertCompareValues("h:mm:ss;@", style["numberFormat"]);
				ExcelTest.Util.assertCompareValues(19, style["orientation"]);
				ExcelTest.Util.assertCompareValues("RightToLeft", style["readingOrder"]);
				ExcelTest.Util.assertCompareValues(false, style["shrinkToFit"]);
				ExcelTest.Util.assertCompareValues("Distributed", style["verticalAlignment"]);
				ExcelTest.Util.assertCompareValues(true, style["wrapText"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Style_PutStyleProperties_cvt_REST_V17() {
		ExcelTest.RestUtility.patch("styles('Test Style')", {
			addIndent: false,
			builtIn: false,
			formulaHidden: true,
			horizontalAlignment: "Right",
			includeAlignment: false,
			includeBorder: false,
			includeFont: true,
			includeNumber: false,
			includePatterns: true,
			includeProtection: true,
			indentLevel: 0,
			locked: false,
			name: "Test Style",
			numberFormat: "h:mm:ss;@",
			orientation: 19,
			readingOrder: "RightToLeft",
			shrinkToFit: false,
			verticalAlignment: "Distributed",
			wrapText: true
		})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.get("styles('Test Style')"))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(200))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(function (style) {
				ExcelTest.Util.assertCompareValues(false, style["addIndent"]);
				ExcelTest.Util.assertCompareValues(false, style["builtIn"]);
				ExcelTest.Util.assertCompareValues(true, style["formulaHidden"]);
				ExcelTest.Util.assertCompareValues("Right", style["horizontalAlignment"]);
				ExcelTest.Util.assertCompareValues(false, style["includeAlignment"]);
				ExcelTest.Util.assertCompareValues(false, style["includeBorder"]);
				ExcelTest.Util.assertCompareValues(true, style["includeFont"]);
				ExcelTest.Util.assertCompareValues(false, style["includeNumber"]);
				ExcelTest.Util.assertCompareValues(true, style["includePatterns"]);
				ExcelTest.Util.assertCompareValues(true, style["includeProtection"]);
				ExcelTest.Util.assertCompareValues(0, style["indentLevel"]);
				ExcelTest.Util.assertCompareValues(false, style["locked"]);
				ExcelTest.Util.assertCompareValues("Test Style", style["name"]);
				ExcelTest.Util.assertCompareValues("h:mm:ss;@", style["numberFormat"]);
				ExcelTest.Util.assertCompareValues(19, style["orientation"]);
				ExcelTest.Util.assertCompareValues("RightToLeft", style["readingOrder"]);
				ExcelTest.Util.assertCompareValues(false, style["shrinkToFit"]);
				ExcelTest.Util.assertCompareValues("Distributed", style["verticalAlignment"]);
				ExcelTest.Util.assertCompareValues(true, style["wrapText"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Table_GetColumnByName_cvt_REST_V11() {
		var sheetName = "ExistingTables";
		var tableName = "TableColumnTestRest6";
		var columnName = "Blue";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnName + "')",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["name"] != columnName) {
					throw "The REST response's name is not " + columnName;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnById_cvt_REST_V11() {
		var sheetName = "ExistingTables";
		var tableName = "TableColumnTestRest6";
		var columnId = "3";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnId + "')",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["id"] != columnId) {
					throw "The REST response's id is not " + columnId;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnByInvalidName_cvt_REST_V11() {
		var sheetName = "ExistingTables";
		var tableName = "TableColumnTestRest6";
		var columnName = "Magenta";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnName + "')",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusNotFound);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.itemNotFound) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.itemNotFound + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnByInvalidId_cvt_REST_V11() {
		var sheetName = "ExistingTables";
		var tableName = "TableColumnTestRest6";
		var columnId = "-1";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnId + "')",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusNotFound);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.itemNotFound) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.itemNotFound + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnByIndex_cvt_REST_V11() {
		var sheetName = "ExistingTables";
		var tableName = "TableColumnTestRest6";
		var columnIndex = 1;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns/itemAt(index=" + columnIndex + ")",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["index"] != columnIndex) {
					throw "The REST response's index is not " + columnIndex;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnByInvalidIndex_cvt_REST_V11() {
		var sheetName = "ExistingTables";
		var tableName = "TableColumnTestRest6";
		var columnIndex = -1;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns/itemAt(index=" + columnIndex + ")",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
			RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusBadRequest);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.invalidArgument) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnCount_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table4";
		var columnCount = 3;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["value"].length != columnCount) {
					throw "The REST response's value is not " + columnCount;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_AddColumnWithAddMethod_cvt_REST_V11() {
		var sheetName = "Tables";
		var tableAddress = sheetName + "!AA1:AC3";
		var d = {
			address: tableAddress,
			hasHeaders: false
		};
		var index = 1;
		Util.clearSheetRest(sheetName)
			.then(ExcelTest.RestUtility.Thenable.post("tables/add", d))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				var request: RichApiTest.RestRequestInfo = {
				url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + result["name"] + "')/columns/add",
				method: RichApiTest.RestUtility.httpMethodPost,
				body: JSON.stringify({ index: index })
				};
				RichApiTest.log.comment("Targetting '" + request.url + "'");
				return RichApiTest.RestUtility.invoke(request);
			})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_AddColumnWithName_cvt_REST_V14() {
		var sheetName = "Tables";
		var tableAddress = sheetName + "!AA1:AC3";
		var d = {
			address: tableAddress,
			hasHeaders: false
		};
		var index = 1;
		var newColumnName = "NewColumn";
		Util.clearSheetRest(sheetName)
			.then(ExcelTest.RestUtility.Thenable.post("tables/add", d))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				var request: RichApiTest.RestRequestInfo = {
					url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + result["name"] + "')/columns/add",
					method: RichApiTest.RestUtility.httpMethodPost,
					body: JSON.stringify({ index: index, name: newColumnName })
				};
				RichApiTest.log.comment("Targetting '" + request.url + "'");
				return RichApiTest.RestUtility.invoke(request);
			})
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusCreated);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["name"] != newColumnName) {
					throw "The REST response's name is not " + newColumnName;
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_AddColumnWithValuesAndName_cvt_REST_V14() {
		var sheetName = "Tables";
		var tableAddress = sheetName + "!AA1:AC3";
		var d = {
			address: tableAddress,
			hasHeaders: false
		};
		var index = 1;
		var tableName;
		var headerName = "NewColumn";
		Util.clearSheetRest(sheetName)
			.then(ExcelTest.RestUtility.Thenable.post("tables/add", d))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				var request: RichApiTest.RestRequestInfo = {
					url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + result["name"] + "')/columns/add",
					method: RichApiTest.RestUtility.httpMethodPost,
					body: JSON.stringify({ index: index })
				};
				tableName = result["name"];
				RichApiTest.log.comment("Targetting '" + request.url + "'");
				return RichApiTest.RestUtility.invoke(request);
			})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				var columnValuesToSet = [["a1"], ["a2"], ["a3"], ["a4"]];
				var patchUrl = "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + index + "')";
				return ExcelTest.RestUtility.patch(patchUrl, { values: columnValuesToSet, name: headerName });
			})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				var columnValuesToGet = [[headerName], ["a2"], ["a3"], ["a4"]];
				Util.assertCompareArray(result["values"], columnValuesToGet);
				Util.assertCompareValues(result["name"], headerName, "Column Name");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_AddColumnDeleteColumnNonGraph_cvt_REST_V11() {
		var sheetName = "Tables";
		var tableAddress = sheetName + "!BB1:BC3";
		var d = {
			address: tableAddress,
			hasHeaders: false
		};
		Util.clearSheetRest(sheetName)
			.then(ExcelTest.RestUtility.Thenable.post("tables/add", d))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				var request: RichApiTest.RestRequestInfo = {
				url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + result["name"] + "')/columns",
				method: RichApiTest.RestUtility.httpMethodPost,
				body: JSON.stringify({})
				};
				RichApiTest.log.comment("Targetting '" + request.url + "'");
				return RichApiTest.RestUtility.invoke(request);
			})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then(item => ExcelTest.RestUtility.deleteItem(item))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_GetColumnId_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var columnName = "Column1";
		var columnId = "1";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnName + "')/id",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["value"] != columnId) {
					throw "The REST response's value is not " + columnId;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnName_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var columnName = "Column1";
		var columnId = "1";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnId + "')/name",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["value"] != columnName) {
					throw "The REST response's value is not " + columnName;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnIndex_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var columnName = "Column1";
		var columnIndex = 0;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnName + "')/index",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["value"] != columnIndex) {
					throw "The REST response's value is not " + columnIndex;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnRange_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var columnName = "Column1";
		var rangeAddress = "ROTables!G5:G10";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnName + "')/range",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["address"] != rangeAddress) {
					throw "The REST response's address is not " + rangeAddress;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnHeaderRowRange_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var columnName = "Column1";
		var rangeAddress = "ROTables!G5";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnName + "')/headerrowrange",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["address"] != rangeAddress) {
					throw "The REST response's address is not " + rangeAddress;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnDataBodyRange_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var columnName = "Column1";
		var rangeAddress = "ROTables!G6:G9";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnName + "')/databodyrange",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["address"] != rangeAddress) {
					throw "The REST response's address is not " + rangeAddress;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnTotalRowRange_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var columnName = "Column1";
		var rangeAddress = "ROTables!G10";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnName + "')/totalrowrange",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["address"] != rangeAddress) {
					throw "The REST response's address is not " + rangeAddress;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnTotalRowRangeWithNoTotalRow_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table4";
		var columnName = "Column1";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnName + "')/totalrowrange",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusNotFound);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.itemNotFound) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.itemNotFound + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetColumnValues_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var columnName = "Column1";
		var rangeValues = [["Column1"], ["aaa"], ["bbb"], ["ccc"], ["ddd"], ["Total"]];
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns('" + columnName + "')",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (!Util.compareArray(result["values"], rangeValues)) {
					throw "The REST response's value is not " + rangeValues;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_ColumnCount_cvt_REST_V14() {
		_injectCollectionCountTest_REST("worksheets('ExistingTables')/tables('Table1')/columns")
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Table_GetRowByIndex_cvt_REST_V11() {
		var sheetName = "Tables";
		var tableName = "TableRowTestRest5";
		var rowIndex = 1;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/rows/itemAt(index=" + rowIndex + ")",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["index"] != rowIndex) {
					throw "The REST response's index is not " + rowIndex;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetRowByInvalidIndex_cvt_REST_V11() {
		var sheetName = "Tables";
		var tableName = "TableRowTestRest5";
		var rowIndex = -1;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/rows/itemAt(index=" + rowIndex + ")",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusBadRequest);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.invalidArgument) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetRowCount_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table4";
		var rowCount = 9;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/rows",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["value"].length != rowCount) {
					throw "The REST response's value is not " + rowCount;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_AddRowWithAddMethod_cvt_REST_V11() {
		var sheetName = "Tables";
		var tableName = "TableRowTestRest5";
		var index = 1;
		RichApiTest.log.comment("REST POST");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/rows/add",
			method: RichApiTest.RestUtility.httpMethodPost,
			body: JSON.stringify({index: index}),
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusCreated);
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_AddRow_cvt_REST_V11() {
		var sheetName = "Tables";
		var tableName = "TableRowTestRest5";
		var d: any = {
			index: 1
		};
		RichApiTest.log.comment("REST POST");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/rows",
			method: RichApiTest.RestUtility.httpMethodPost,
			body: JSON.stringify(d)
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusCreated);
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetRowIndex_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var rowIndex = 1;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/rows/itemAt(index=" + rowIndex + ")/index",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["value"] != rowIndex) {
					throw "The REST response's value is not " + rowIndex;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetRowRange_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var rowIndex = 1;
		var rangeAddress = "ROTables!G7:J7";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/rows/itemAt(index=" + rowIndex + ")/range",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["address"] != rangeAddress) {
					throw "The REST response's address is not " + rangeAddress;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetRowValues_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var rowIndex = 1;
		var rangeValues = [["bbb", 4, 5, 6]];
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/rows/itemAt(index=" + rowIndex + ")",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (!Util.compareArray(result["values"], rangeValues)) {
					throw "The REST response's value is not " + rangeValues;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_DeleteRow_cvt_REST_V11() {
		var sheetName = "Tables";
		var tableName = "TableRowTestRest5";
		var rowIndex = 1;
		RichApiTest.log.comment("REST DELETE");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/rows/itemAt(index=" + rowIndex + ")",
			method: RichApiTest.RestUtility.httpMethodDelete
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusNoContent);
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_RowCount_cvt_REST_V14() {
		_injectCollectionCountTest_REST("worksheets('ExistingTables')/tables('Table1')/rows")
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Table_LoadTableAndRangeAddress_bvt_REST_V11() {
		var tableName = "Table1";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "tables('" + tableName + "')",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["name"] != tableName) {
					throw "The REST response's name is not " + tableName;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_LoadNonexistingTableString_cvt_REST_V11() {
		var TABLENAME = "NonExisting";
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "tables('" + TABLENAME + "')",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusNotFound);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.itemNotFound) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.itemNotFound + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_LoadTableInt_cvt_REST_V11() {
		var tableId = "1";
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "tables('" + tableId + "')",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["id"] != tableId) {
					throw "The REST response's id is not " + tableId;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_LoadNonexistingTableInt_cvt_REST_V11() {
		var TABLENAME = 9001;
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "tables('" + TABLENAME + "')",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusNotFound);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.itemNotFound) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.itemNotFound + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_CreateTableInvalidSheetname_cvt_REST_V11() {
		var SHEETNAME = "Foo",
			TABLEADDRESS = SHEETNAME + "!A20:B22";
		var d = {
			address: TABLEADDRESS,
			hasHeaders: true
		};
		RichApiTest.log.comment("REST POST");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "tables/add",
			method: RichApiTest.RestUtility.httpMethodPost,
			body: JSON.stringify(d)
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusBadRequest);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.invalidArgument) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_CreateTableInvalidAddress_cvt_REST_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!FOO";
		var d = {
			address: TABLEADDRESS,
			hasHeaders: true
		};
		RichApiTest.log.comment("REST POST");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "tables/add",
			method: RichApiTest.RestUtility.httpMethodPost,
			body: JSON.stringify(d)
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusBadRequest);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.invalidArgument) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_CreateValidTable_cvt_REST_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!A50:B52";
		var d: any = {
			address: TABLEADDRESS,
			hasHeaders: true
		};
		Util.clearSheetRest(SHEETNAME)
			.then(ExcelTest.RestUtility.Thenable.post("tables/add", d))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_Retrieval_cvt_REST_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!C50:D52";
		var d: any = {
			address: TABLEADDRESS,
			hasHeaders: true
		};
		Util.clearSheetRest(SHEETNAME)
			.then(ExcelTest.RestUtility.Thenable.post("tables/add", d))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_RetrievalAndDeletion_cvt_REST_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!E50:F52";
		var d = {
			address: TABLEADDRESS,
			hasHeaders: true
		};
		Util.clearSheetRest(SHEETNAME)
			.then(ExcelTest.RestUtility.Thenable.post("tables/add", d))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				var request: RichApiTest.RestRequestInfo = {
					url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + "tables('" + result["name"] + "')",
					method: RichApiTest.RestUtility.httpMethodDelete
				};
				RichApiTest.log.comment("Invoking DELETE with URL: " + request.url);
				return RichApiTest.RestUtility.invoke(request);
			})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_PropertyPut_cvt_REST_V11() {
		var SHEETNAME = "Tables",
			TABLEADDRESS = SHEETNAME + "!G50:H52";
		var d = {
			address: TABLEADDRESS,
			hasHeaders: true
		};
		Util.clearSheetRest(SHEETNAME)
			.then(ExcelTest.RestUtility.Thenable.post("tables/add", d))
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.Created))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				if (!result) {
					throw "Cannot parse response";
				}
				var d = {
					name: "RestPatchTestTable",
					showHeaders: false,
					showTotals: true,
					style: "TableStyleDark6"
				};
				var request: RichApiTest.RestRequestInfo = {
					url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "tables('" + result["name"] + "')",
					method: RichApiTest.RestUtility.httpMethodPatch,
					body: JSON.stringify(d)
				};
				return RichApiTest.RestUtility.invoke(request);
			})
			.then(ExcelTest.RestUtility.Thenable.validateStatus(ExcelTest.RestUtility.Status.OK))
			.then(ExcelTest.RestUtility.Thenable.getBodyAsObject())
			.then((result) => {
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!Util.compareProperty(result, "showHeaders", false) ||
					!Util.compareProperty(result, "showTotals", true) ||
					!Util.compareProperty(result, "style", "TableStyleDark6")) {
					throw "One ore more properties were not set successfully."
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Table_Count_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableCount = 3;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["value"].length != tableCount) {
					throw "The REST response's value is not " + tableCount;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetItemAt_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table4";
		var index = 0;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables/itemAt(index=" + index + ")",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["name"] != tableName) {
					throw "The REST response's name is not " + tableName;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetItemAtInvalidIndex_cvt_REST_V11() {
		var sheetName = "ROTables";
		var index = -1;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables/itemAt(index=" + index + ")",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusBadRequest);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.invalidArgument) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.invalidArgument + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_Rows_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table4";
		var rowCount = 9;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/rows",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var rows = result["value"];
				if (!rows || rows.length != rowCount) {
					throw "The REST response's array length is not " + rowCount;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_Columns_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table4";
		var columnCount = 3;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/columns",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var rows = result["value"];
				if (!rows || rows.length != columnCount) {
					throw "The REST response's array length is not " + columnCount;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetRange_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var rangeAddress = "ROTables!G5:J10";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/range",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["address"] != rangeAddress) {
					throw "The REST response's address is not " + rangeAddress;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetHeaderRowRange_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var rangeAddress = "ROTables!G5:J5";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/headerrowrange",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["address"] != rangeAddress) {
					throw "The REST response's address is not " + rangeAddress;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetDataBodyRange_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var rangeAddress = "ROTables!G6:J9";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/databodyrange",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["address"] != rangeAddress) {
					throw "The REST response's address is not " + rangeAddress;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetTotalRowRange_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table5";
		var rangeAddress = "ROTables!G10:J10";
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/totalrowrange",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusOK);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				if (result["address"] != rangeAddress) {
					throw "The REST response's address is not " + rangeAddress;
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_GetTotalRowRangeWithNoTotalRow_cvt_REST_V11() {
		var sheetName = "ROTables";
		var tableName = "Table4";
		var success = true;
		RichApiTest.log.comment("REST GET");
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(ExcelTest.settings.baseUri) + "worksheets('" + sheetName + "')/tables('" + tableName + "')/totalrowrange",
			method: RichApiTest.RestUtility.httpMethodGet
		};
		RichApiTest.log.comment("Targetting '" + request.url + "'");
		RichApiTest.RestUtility.invoke(request)
			.then((resp: RichApiTest.RestResponseInfo) => {
				RichApiTest.RestUtility.verifyStatusCodeThrow(resp, RichApiTest.RestUtility.httpStatusNotFound);
				var result = JSON.parse(resp.body);
				if (!result) {
					throw "Cannot parse response";
				}
				var error = result["error"];
				if (!error) {
					throw "No error was returned";
				}
				if (!error["code"] || error["code"] != Excel.ErrorCodes.itemNotFound) {
					throw "Got error code: '" + error["code"] + "'. Expected :'" + Excel.ErrorCodes.itemNotFound + "'.";
				}
				RichApiTest.log.done(true);
			})
			.catch((ex) => {
				RichApiTest.log.fail(JSON.stringify(ex));
			});
	}
	export function test_Table_Worksheet_cvt_REST_V12() {
		RestUtility.get("tables('Table1')/worksheet")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((worksheet) => {
				Util.assertCompareValues("ExistingTables", worksheet["name"], "Name");
			})
			.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_Table_Count_cvt_REST_V14() {
		_injectCollectionCountTest_REST("worksheets('ExistingTables')/tables")
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_Workbook_GetSelectedRange_cvt_REST_V11() {
		
		var valueToSet = [[1]];
		RestUtility.patch("selectedrange/lastcell", { values: valueToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range: any) => {
				Util.assert(Util.compareArray(valueToSet, range.values), "Compare range value");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_GetActiveCell_cvt_REST_V11() {
		
		var valueToSet = [[1]];
		RestUtility.patch("activecell", { values: valueToSet })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range: any) => {
				Util.assert(Util.compareArray(valueToSet, range.values), "Compare range value");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_Application_cvt_REST_V11(): void {
		RestUtility.invokeGetAndValidateResponse("application", Excel.CalculationMode.automatic, (body) => body.calculationMode);
	}
	export function test_Workbook_ApplicationCalculationMode_cvt_REST_V11(): void {
		RestUtility.invokeGetAndValidateResponse("application/calculationmode", Excel.CalculationMode.automatic, (body) => body.value);
	}
	export function test_Workbook_ApplicationCalculation_cvt_REST_V11(): void {
		RestUtility.postAsUrlAction("application/calculate", { "calculationtype": 1 })
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.NoContent))
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_ProcessQuery_cvt_REST_V11(): void {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		var rangeValue = 12345;
		var rangeValuesToGet = [[rangeValue.toString(), rangeValue.toString()], [rangeValue.toString(), "24690"]];
		var body = "{\"Actions\":[{\"Id\":2,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":1},{\"Id\":4,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":3},{\"Id\":6,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":5},{\"Id\":8,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":7},{\"Id\":9,\"ActionType\":4,\"Name\":\"Values\",\"ObjectPathId\":7,\"ArgumentInfo\":{\"Arguments\":[[[\"12345\",\"=A1\"],[\"=B1\",\"=A1+B1\"]]]}}],\"ObjectPaths\":{\"1\":{\"Id\":1,\"ObjectPathType\":1,\"Name\":\"\"},\"3\":{\"Id\":3,\"ObjectPathType\":4,\"Name\":\"Worksheets\",\"ParentObjectPathId\":1},\"5\":{\"Id\":5,\"ObjectPathType\":5,\"Name\":\"\",\"ParentObjectPathId\":3,\"ArgumentInfo\":{\"Arguments\":[\"Sheet1\"]}},\"7\":{\"Id\":7,\"ObjectPathType\":3,\"Name\":\"GetRange\",\"ParentObjectPathId\":5,\"ArgumentInfo\":{\"Arguments\":[\"A1:B2\"]}}}}";
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + "processQuery",
			method: RichApiTest.RestUtility.httpMethodPost,
			body: body
		};
		RichApiTest.log.comment("Invoking POST with URL: " + request.url);
		RichApiTest.RestUtility.invoke(request)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('" + sheetName + "')/range(address='" + rangeAddress + "')"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range: any) => {
				Util.assert(Util.compareArray(rangeValuesToGet, range.values), "Compare range value");
				Util.assertCompareValues(sheetName + "!" + rangeAddress, range.address);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_ProcessQuery$ReadOperation$ReadFlags_cvt_REST_V14(): void {
		
		
		
		
		
		
		
		
		var body = "{\"Actions\":[{\"Id\":2,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":1},{\"Id\":4,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":3},{\"Id\":6,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":5},{\"Id\":8,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":7},{\"Id\":9,\"ActionType\":2,\"Name\":\"\",\"ObjectPathId\":7,\"QueryInfo\":{}}],\"ObjectPaths\":{\"1\":{\"Id\":1,\"ObjectPathType\":1,\"Name\":\"\"},\"3\":{\"Id\":3,\"ObjectPathType\":4,\"Name\":\"Worksheets\",\"ParentObjectPathId\":1},\"5\":{\"Id\":5,\"ObjectPathType\":5,\"Name\":\"\",\"ParentObjectPathId\":3,\"ArgumentInfo\":{\"Arguments\":[\"Sheet1\"]}},\"7\":{\"Id\":7,\"ObjectPathType\":3,\"Name\":\"GetRange\",\"ParentObjectPathId\":5,\"ArgumentInfo\":{\"Arguments\":[\"A1:B2\"]}}}}";
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + "processQuery?flags=0",
			method: RichApiTest.RestUtility.httpMethodPost,
			body: body
		};
		
		RichApiTest.log.comment("Invoking POST with URL: " + request.url);
		RichApiTest.RestUtility.invoke(request)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then((resp) => {
				RichApiTest.log.comment(JSON.stringify(resp));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_ProcessQuery$ReadOperation$WriteFlags_cvt_REST_V14(): void {
		
		
		
		
		
		
		
		
		var body = "{\"Actions\":[{\"Id\":2,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":1},{\"Id\":4,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":3},{\"Id\":6,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":5},{\"Id\":8,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":7},{\"Id\":9,\"ActionType\":2,\"Name\":\"\",\"ObjectPathId\":7,\"QueryInfo\":{}}],\"ObjectPaths\":{\"1\":{\"Id\":1,\"ObjectPathType\":1,\"Name\":\"\"},\"3\":{\"Id\":3,\"ObjectPathType\":4,\"Name\":\"Worksheets\",\"ParentObjectPathId\":1},\"5\":{\"Id\":5,\"ObjectPathType\":5,\"Name\":\"\",\"ParentObjectPathId\":3,\"ArgumentInfo\":{\"Arguments\":[\"Sheet1\"]}},\"7\":{\"Id\":7,\"ObjectPathType\":3,\"Name\":\"GetRange\",\"ParentObjectPathId\":5,\"ArgumentInfo\":{\"Arguments\":[\"A1:B2\"]}}}}";
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + "processQuery?flags=1",
			method: RichApiTest.RestUtility.httpMethodPost,
			body: body
		};
		
		RichApiTest.log.comment("Invoking POST with URL: " + request.url);
		RichApiTest.RestUtility.invoke(request)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then((resp) => {
				RichApiTest.log.comment(JSON.stringify(resp));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function disabledtest_Workbook_ProcessQuery$WriteOperation$ReadFlags_cvt_REST_V14(): void {
		
		var body = "{\"Actions\":[{\"Id\":2,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":1},{\"Id\":4,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":3},{\"Id\":6,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":5},{\"Id\":8,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":7},{\"Id\":9,\"ActionType\":4,\"Name\":\"Values\",\"ObjectPathId\":7,\"ArgumentInfo\":{\"Arguments\":[[[\"12345\",\"=A1\"],[\"=B1\",\"=A1+B1\"]]]}}],\"ObjectPaths\":{\"1\":{\"Id\":1,\"ObjectPathType\":1,\"Name\":\"\"},\"3\":{\"Id\":3,\"ObjectPathType\":4,\"Name\":\"Worksheets\",\"ParentObjectPathId\":1},\"5\":{\"Id\":5,\"ObjectPathType\":5,\"Name\":\"\",\"ParentObjectPathId\":3,\"ArgumentInfo\":{\"Arguments\":[\"Sheet1\"]}},\"7\":{\"Id\":7,\"ObjectPathType\":3,\"Name\":\"GetRange\",\"ParentObjectPathId\":5,\"ArgumentInfo\":{\"Arguments\":[\"A1:B2\"]}}}}";
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + "processQuery?flags=0",
			method: RichApiTest.RestUtility.httpMethodPost,
			body: body
		};
		
		RichApiTest.log.comment("Invoking POST with URL: " + request.url);
		RichApiTest.RestUtility.invoke(request)
			.then((resp) => {
				Util.assert(resp.body.indexOf("AccessDenied") > 0, "Expect Access Denied in the respose");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_ProcessQuery$WriteOperation$WriteFlags_cvt_REST_V14(): void {
		var sheetName = "Sheet1";
		var rangeAddress = "A1:B2";
		
		var body = "{\"Actions\":[{\"Id\":2,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":1},{\"Id\":4,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":3},{\"Id\":6,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":5},{\"Id\":8,\"ActionType\":1,\"Name\":\"\",\"ObjectPathId\":7},{\"Id\":9,\"ActionType\":4,\"Name\":\"Values\",\"ObjectPathId\":7,\"ArgumentInfo\":{\"Arguments\":[[[\"12345\",\"=A1\"],[\"=B1\",\"=A1+B1\"]]]}}],\"ObjectPaths\":{\"1\":{\"Id\":1,\"ObjectPathType\":1,\"Name\":\"\"},\"3\":{\"Id\":3,\"ObjectPathType\":4,\"Name\":\"Worksheets\",\"ParentObjectPathId\":1},\"5\":{\"Id\":5,\"ObjectPathType\":5,\"Name\":\"\",\"ParentObjectPathId\":3,\"ArgumentInfo\":{\"Arguments\":[\"Sheet1\"]}},\"7\":{\"Id\":7,\"ObjectPathType\":3,\"Name\":\"GetRange\",\"ParentObjectPathId\":5,\"ArgumentInfo\":{\"Arguments\":[\"A1:B2\"]}}}}";
		var request: RichApiTest.RestRequestInfo = {
			url: RichApiTest.RestUtility.getBaseUrlUsingOverride(settings.baseUri) + "processQuery?flags=1",
			method: RichApiTest.RestUtility.httpMethodPost,
			body: body
		};
		
		RichApiTest.log.comment("Invoking POST with URL: " + request.url);
		RichApiTest.RestUtility.invoke(request)
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.get("worksheets('" + sheetName + "')/range(address='" + rangeAddress + "')"))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((range: any) => {
				Util.assertCompareValues(sheetName + "!" + rangeAddress, range.address);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_GetName_cvt_REST_V17() {
		var orginalColor: string;
		return OfficeExtension.Promise.resolve()
			.then(RestUtility.Thenable.get(""))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((workbook) => {
				Util.assertCompareValues("AgaveTest.xlsx", workbook["name"]); 
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_GetReadOnly_cvt_REST_V18() {
		RestUtility.get("")
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((workbook) => {
				Util.assertCompareValues(true, workbook["readOnly"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_GetSaved_cvt_REST_V18() {
		RestUtility.patch("worksheets('Sheet1')/range(address='A1')", { values: [[1]] })
			.then(RestUtility.Thenable.get(""))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((workbook) => {
				Util.assertCompareValues(true, workbook["saved"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_SetSavedfalse_cvt_REST_V18() {
		RestUtility.patch("", { saved: false })
			.then(RestUtility.Thenable.get(""))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((workbook) => {
				Util.assertCompareValues(false, workbook["saved"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Workbook_SetSavedTrue_cvt_REST_V18() {
		RestUtility.patch("", { saved: true })
			.then(RestUtility.Thenable.get(""))
			.then(RestUtility.Thenable.validateStatus(RestUtility.Status.OK))
			.then(RestUtility.Thenable.getBodyAsObject())
			.then((workbook) => {
				Util.assertCompareValues(true, workbook["saved"]);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_OfficeJS_BindingAddFromSelection_cvt_JScript_V10() {
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync(callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData.rows, dataToSet);
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingAddFromNamedRange_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		Util.promisify(
			(callback) => Office.context.document.bindings.addFromNamedItemAsync(
				"ChartsNovemberGlobalNamedRange",
					Office.BindingType.Matrix, { id: bindingId }, callback))
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync(callback));
			})
			.then(function (bindingReadBackArray: any) {
				var ctx = new Excel.RequestContext();
				var range = ctx.workbook.names.getItem("ChartsNovemberGlobalNamedRange").getRange();
				range.load("values");
				return ctx.sync().then(function () {
					Util.assertCompareArray(bindingReadBackArray, range.values);
				});
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingAddWithSameName_cvt_JScript_V10() {
		var bindingId = "TestBindingSameName";
		var existingBindingCount = 0;
		OfficeExtension.Utility.promisify((callback) => Office.context.document.bindings.getAllAsync(callback))
			.then((bindings: Office.Binding[]) => {
				RichApiTest.log.comment("Existing binding count = " + existingBindingCount);
				existingBindingCount = bindings.length;
			})
			.then(() => {
				var ctx = new Excel.RequestContext();
				var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4");
				range.select();
				return ctx.sync()
			})
			.then(() => {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Matrix, { id: bindingId }, callback));
			})
			.then(() => {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromNamedItemAsync(
						"ChartsNovemberGlobalNamedRange",
						Office.BindingType.Matrix, { id: bindingId }, callback))
			})
			.then(function () {
				RichApiTest.log.comment("invoking releaseById");
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(() => {
				RichApiTest.log.comment("invoking getAllAsync");
				return OfficeExtension.Utility.promisify((callback) => Office.context.document.bindings.getAllAsync(callback));
			})
			.then((bindings: Office.Binding[]) => {
				RichApiTest.log.comment("binding count = " + bindings.length);
				Util.assertCompareValues(existingBindingCount, bindings.length);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingIdGetsAssignedAutomatically_cvt_JScript_V10() {
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, callback));
			})
			.then(function (value: Office.Binding) {
				RichApiTest.log.comment(value.id);
				Util.assert(() => Util.startsWith(value.id, 'UnnamedBinding'));
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(value.id, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
	}
	export function test_OfficeJS_BindingWithFormatting_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		var bindingId = "TestBinding";
		var valuesToSet = [
			["Price", "Item"],
			[3.1234567, "A"],
			[5, "B"],
		];
		var formatsToSet = [
			["@", "@"],
			["0.00", "@"],
			["0.00", "@"],
		];
		var expectedValues = [
			[3.12, "A"],
			[5.00, "B"],
		];
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A2:B4");
		range.numberFormat = formatsToSet;
		range.values = valuesToSet;
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync({ valueFormat: Office.ValueFormat.Formatted }, callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData.rows, expectedValues);
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingWithStartRowAndUsingCellAddress_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		var bindingId = "TestBinding";
		var dataToSet = [
			["Price", "Item"],
			[3, "A"],
			[5, "B"],
			[7, "C"],
			[9, "D"],
		];
		var expectedToReadBack = [
			[5, "B"],
			[7, "C"],
		];
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A2:B6");
		range.values = dataToSet;
		ctx.workbook.worksheets.getItem("Sheet2").activate(); 
		ctx.load(range, "address");
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromNamedItemAsync("Sheet1!A2:B6",
						Office.BindingType.Table,
						{ id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync({ startRow: 1, rowCount: 2 }, callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData.rows, expectedToReadBack);
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingWithStartRowAndUsingLocalAddress_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		var bindingId = "TestBinding";
		var dataToSet = [
			["Price", "Item"],
			[3, "A"],
			[5, "B"],
			[7, "C"],
			[9, "D"],
		];
		var expectedToReadBack = [
			[5, "B"],
			[7, "C"],
		];
		var ctx = new Excel.RequestContext();
		var sheet2 = ctx.workbook.worksheets.getItem("Sheet2");
		var range = sheet2.getRange("A2:B6");
		range.values = dataToSet;
		sheet2.activate();
		ctx.load(range, "address");
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromNamedItemAsync("A2:B6",
						Office.BindingType.Table,
						{ id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync({ startRow: 1, rowCount: 2 }, callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData.rows, expectedToReadBack);
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingAddFromNamedItemUsingBindingThatAlreadyExists_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		var dataToSet = [
			["Price", "Item"],
			[3, "A"],
			[5, "B"],
			[7, "C"],
			[9, "D"],
		];
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A2:B6");
		range.values = dataToSet;
		sheet1.activate();
		ctx.load(range, "address");
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromNamedItemAsync("A2:B6",
						Office.BindingType.Matrix,
						{ id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync(callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData, dataToSet);
			})
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromNamedItemAsync("A2:B3",
						Office.BindingType.Matrix,
						{ id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync(callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData, [
					["Price", "Item"],
					[3, "A"]
				]);
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingWithStartRowOutOfBounds_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		var bindingId = "TestBinding";
		var dataToSet = [
			["Price", "Item"],
			[3, "A"],
			[5, "B"],
			[7, "C"],
			[9, "D"],
		];
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A2:B6");
		range.values = dataToSet;
		ctx.workbook.worksheets.getItem("Sheet2").activate(); 
		ctx.load(range, "address");
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromNamedItemAsync("Sheet1!A2:B6",
						Office.BindingType.Table,
						{ id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				var options = [
					{ startRow: 10 },
					{ startRow: -10 },
					{ startColumn: 5 },
					{ startColumn: -1 }
				];
				
				
				return OfficeExtension.Promise.all(options.map((option) => {
					RichApiTest.log.comment(JSON.stringify(option));
					return Util.promisify((callback) => value.getDataAsync(option, callback))
						.then(() => { throw new Error("Should have failed"); })
						.catch(function (error: Office.Error) {
							if (error.code === 1005 || error.code === 1003) {
								RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
							} else {
								Util.throwOfficeError(error);
							}
						});
				}));
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingReleaseWorks_cvt_JScript_V10() {
		var bindingId = "ID_123";
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A2:B6");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Matrix, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				Util.assertCompareValues(bindingId, value.id);
				return Util.promisify((callback) => Office.context.document.bindings.getByIdAsync(bindingId, callback));
			})
			.then(function (value: Office.Binding) {
				Util.assertCompareValues(bindingId, value.id);
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.getByIdAsync(bindingId, callback))
					.then(() => { throw new Error("Should have failed"); })
					.catch(function (error: Office.Error) {
						if (error.code === 3002) {
							RichApiTest.log.comment("Caught expected error of binding no longer being found: " + error.message);
						} else {
							Util.throwOfficeError(error);
						}
					});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingReuse_cvt_JScript_V10() {
		var bindingId = "ID_456789";
		var dataToSet = [
			["Price", "Item"],
			[3, "A"],
			[5, "B"],
		];
		Excel.run(function (ctx) {
			var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet1.getRange("A2:B4");
			range.values = dataToSet;
			range.select();
			return ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Matrix, { id: bindingId }, callback));
				})
				.then(function (value: Office.Binding) {
					Util.assertCompareValues(bindingId, value.id);
					return Util.promisify((callback) => value.getDataAsync(callback));
				})
				.then(function (readBackData: any) {
					Util.assertCompareArray(readBackData, dataToSet);
					range.getColumn(0).select();
					return ctx.sync();
				})
				.then(function (value: Office.Binding) {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Matrix, { id: bindingId }, callback));
				})
				.then(function (value: Office.Binding) {
					Util.assertCompareValues(bindingId, value.id);
					return Util.promisify((callback) => value.getDataAsync(callback));
				})
				.then(function (readBackData: any) {
					Util.assertCompareArray(readBackData, dataToSet.map((value) => [value[0]]));
					return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
				})
				.then(function () {
					
					return Util.promisify((callback) => Office.context.document.bindings.getByIdAsync(bindingId, callback))
						.catch(function (error) {
							if (error.code === 3002) {
								RichApiTest.log.comment("Caught expected error of binding no longer being found: " + error.message);
							} else {
								Util.throwOfficeError(error);
							}
						});
				})
		})
		.then(ExcelTest.pass)
		.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingFilteredData_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		var dataToSet = [
			["Price", "Item", "Description"],
			[3, "A", "Aaa"],
			[5, "B", "Bbb"],
		];
		var expectedBodyWithFilter = [
			[5, "Bbb"],
		];
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		sheet1.getRange("A:C").delete(Excel.DeleteShiftDirection.left);
		var range = sheet1.getRange("A2:C4");
		range.getColumn(1).getEntireColumn().columnHidden = true;
		range.values = dataToSet;
		ctx.load(range, "address");
		ctx.sync()
			.then(function () {
				var table = ctx.workbook.tables.add(range.address, true)
				table.columns.getItemAt(0).filter.applyTopItemsFilter(1);
				table.getRange().select(); 
			})
			.then(ctx.sync)
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync({ filterType: Office.FilterType.OnlyVisible }, callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData.rows, expectedBodyWithFilter);
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
			.then(() => {
				
				sheet1.getRange("A:C").delete(Excel.DeleteShiftDirection.left);
				return ctx.sync();
			});
	}
	export function test_OfficeJS_BindingGetDataAsyncCoercionTableAsText_cvt_JScript_V10() {
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync({ coercionType: "text" }, callback));
			})
			.then(function (readBackData: any) {
				Util.assert(readBackData.rows === undefined);
				Util.assertCompareValues("1\t2\n3\t4\n5\t6", readBackData);
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingGetDataAsyncCoercionMatrix_cvt_JScript_V10() {
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync({ coercionType: "matrix" }, callback));
			})
			.then(function (readBackData: any) {
				Util.assert(readBackData.rows === undefined);
				Util.assertCompareArray(readBackData, dataToSet);
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingAddFromAddressFailsOnDiscontinuous_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		Util.promisify(
			(callback) => Office.context.document.bindings.addFromNamedItemAsync(
				"Sheet1!A5:B6, Sheet1!D8:E10",
				Office.BindingType.Matrix, { id: bindingId }, callback))
			.then(function () {
				throw new Error("Expect to fail");
			})
			.catch((error: Office.Error) => {
				
				if (error.code === 3006 || error.code === 3008) {
					RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
				} else {
					Util.throwOfficeError(error);
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingAddFromNamedRangeFailsIfDoesntExist_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		Util.promisify(
			(callback) => Office.context.document.bindings.addFromNamedItemAsync(
				"ANameThatNoOneNamed",
				Office.BindingType.Matrix, { id: bindingId }, callback))
			.then(function () {
				throw new Error("Expect to fail");
			})
			.catch((error: Office.Error) => {
				if (error.code == 3006) {
					RichApiTest.log.comment("Caught expected error " + error.message);
				} else {
					Util.throwOfficeError(error);
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingsGetAll_cvt_JScript_V10() {
		var bindingId1 = "TestBinding1";
		var bindingId2 = "TestBinding2";
		var bindingId3 = "TestBinding3";
		var existingBindingCount = 0;
		var newBindings: Array<Office.Binding> = [];
		Util.promisify((callback) => Office.context.document.bindings.getAllAsync(callback))
			.then(function (bindings: Office.Binding[]) {
				RichApiTest.log.comment("Found " + bindings.length + " existing bindings");
				existingBindingCount = bindings.length;
				return OfficeExtension.Promise.all([
					Util.promisify((callback) => Office.context.document.bindings.addFromNamedItemAsync(
						"Sheet1!A1", Office.BindingType.Matrix, { id: bindingId1 }, callback)).then((binding: Office.Binding) => newBindings.push(binding)),
					Util.promisify((callback) => Office.context.document.bindings.addFromNamedItemAsync(
						"Sheet1!A2", Office.BindingType.Matrix, { id: bindingId2 }, callback)).then((binding: Office.Binding) => newBindings.push(binding)),
					Util.promisify((callback) => Office.context.document.bindings.addFromNamedItemAsync(
						"Sheet1!A3", Office.BindingType.Matrix, { id: bindingId3 }, callback)).then((binding: Office.Binding) => newBindings.push(binding))
				]);
			}).then(() => {
				return Util.promisify((callback) => Office.context.document.bindings.getAllAsync(callback))
			}).then(function (bindings: Office.Binding[]) {
				Util.assertCompareValues(3 + existingBindingCount, bindings.length);
				
				var promisesToDeleteBindings = newBindings.map(
					(binding) => Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(binding.id, callback)));
				return OfficeExtension.Promise.all(promisesToDeleteBindings)
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.getAllAsync(callback));
			})
			.then(function (bindings: Office.Binding[]) {
				Util.assertCompareValues(existingBindingCount, bindings.length);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingOnSheetThatGetsDeleted_cvt_JScript_V10() {
		var bindingId = "TestBinding" + Math.floor(Math.random() * 1000000);
		var initialBindingCount = 0;
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.add();
		var range = sheet.getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync()
			.then(function () {
				if (Util.isWAC()) {
					throw new IntentionalSkip("Blocked by https://office.visualstudio.com/DefaultCollection/OC/_workitems/edit/501191");
				}
				return Util.promisify((callback) => Office.context.document.bindings.getAllAsync(callback));
			})
			.then(function (bindings: Office.Binding[]) {
				initialBindingCount = bindings.length;
				RichApiTest.log.comment("Initial count " + bindings.length);
			})
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, { id: bindingId }, callback));
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.getByIdAsync(bindingId, callback))
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync(callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData.rows, dataToSet);
			})
			.then(function () {
				sheet.delete();
				return ctx.sync();
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.getAllAsync(callback));
			})
			.then(function (bindings: Office.Binding[]) {
				Util.assertCompareValues(initialBindingCount + 1, bindings.length, "After adding the binding and deleting the sheet");
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.getByIdAsync(bindingId, callback));
			})
			.then(function (value: Office.Binding) {
			return Util.promisify((callback) => value.getDataAsync(callback))
				.then(() => { throw new Error("Should have failed"); })
				.catch((error: Office.Error) => {
					if (error.code == 1000) {
						RichApiTest.log.comment("Expected (legacy behavior) error of " + error.code + ":" + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				});
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingCanOnlyBeRemovedOnce_cvt_JScript_V10() {
		var bindingId = "TestBinding" + Math.floor(Math.random() * 1000000);
		var initialBindingCount = 0;
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.add();
		var range = sheet.getRange("A2:B4");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.getAllAsync(callback));
			})
			.then(function (bindings: Office.Binding[]) {
				initialBindingCount = bindings.length;
				RichApiTest.log.comment("Initial count " + bindings.length);
			})
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, { id: bindingId }, callback));
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.getByIdAsync(bindingId, callback))
			})
			.then(function (value: Office.Binding) {
				Util.assertCompareValues(bindingId, value.id);
			})
			.then(function () {
				
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback));
			})
			.then(function () {
				
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
					.then(() => { throw new Error("Should have failed"); })
					.catch((error: Office.Error) => {
						if (error.code == 3002) {
							RichApiTest.log.comment("Expected (legacy behavior) error of " + error.code + ":" + error.message);
						} else {
							Util.throwOfficeError(error);
						}
					});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingTextBindingSingleCell_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		var dataToSet = [["text"]];
		
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A3");
		range.select();
		range.clear();
		range.values = dataToSet;
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Text, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync(callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareValues("text", readBackData);
			})
			.then(function () {
				
				sheet1.getRange("1:2").insert(Excel.InsertShiftDirection.down);
				return ctx.sync();
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.getByIdAsync(bindingId, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync(callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareValues("text", readBackData);
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingTextBindingSetDataAsync_cvt_JScript_V10() {
		var bindingId = "ID_TextBindingSetData";
		var startData = [["foobar"]];
		var newData = [["raboof"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.setSelectedDataAsync(startData,
						{ coercionType: Office.CoercionType.Text }, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Text, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.setDataAsync(newData, { coercionType: Office.CoercionType.Text }, callback));
				})
				.then(function () {
					var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
					ctx.load(range);
					return ctx.sync().then(function () {
						Util.assertCompareArray(range.values, newData);
					})
				})
				.then(function () {
					return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_BindingTextBindingOnlyWorksOnSingleCell_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A3:B4");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Text, { id: bindingId }, callback))
					.then(() => { throw new Error("Should have failed"); })
					.catch((error: Office.Error) => {
						if (error.code == 3004) {
							RichApiTest.log.comment("Received expected failure: " + error.code + ":" + error.message);
						} else {
							Util.throwOfficeError(error);
						}
				});
				
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingMatrixBindingSetDataAsync_cvt_JScript_V10() {
		var bindingId = "ID_MatrixBindingSetData";
		var startData = [["header1", "header2"], ["foo", "bar"], ["123", "456"]];
		var newData = [["h1", "h2"], ["oof", "rab"], ["456", "123"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5:C7");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(startData,
							{ coercionType: Office.CoercionType.Matrix }, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Matrix, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.setDataAsync(newData, { coercionType: Office.CoercionType.Matrix }, callback));
				})
				.then(function () {
					var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5:C7");
					ctx.load(range);
					return ctx.sync().then(function () {
						Util.assertCompareArray(range.values, newData);
					})
				})
				.then(function () {
					return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_BindingCanBeSuperLargeButWillFailWhenRetrievingData_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A:B");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Matrix, { id: bindingId }, callback))
			})
			.then(function (binding: Office.Binding) {
				return Util.promisify((callback) => binding.getDataAsync(callback))
					.then(() => { throw new Error("Should have failed"); })
					.catch((error: Office.Error) => {
						if (error.code == 1008) {
							RichApiTest.log.comment("Expected failure since data too large: " + error.code + ":" + error.message);
						} else {
							Util.throwOfficeError(error);
						}
					});
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_OfficeSelectSuccess_cvt_JScript_V10() {
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Matrix, { id: bindingId }, callback));
			})
			.then(function () {
				return Util.promisify((callback) => Office.select("binding#" + bindingId).getDataAsync(callback))
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData, dataToSet);
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_OfficeSelectNotFound_cvt_JScript_V10() {
		Office.select("binding#somethingterriblynonexistant", function (result) {
			if (result.status == Office.AsyncResultStatus.Succeeded) {
				RichApiTest.log.fail("Should have failed but didn't");
			} else {
				RichApiTest.log.pass("Correctly failed to find nonexistant binding");
			}
		}).getDataAsync(function (result) {
			
		});
	}
	export function test_OfficeJS_BindingReadBackWithCoercionType_cvt_JScript_V10() {
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync({ coercionType: Office.CoercionType.Matrix }, callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData, dataToSet);
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingReadBackWithInvalidCoercionType_cvt_JScript_V10() {
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync({ coercionType: Office.CoercionType.Ooxml }, callback))
					.then(() => { throw new Error("Should have failed"); })
					.catch((error: Office.Error) => {
						if (error.code == 5007) {
							RichApiTest.log.comment("Expected failure since invalid coercion: " + error.code + ":" + error.message);
						} else {
							Util.throwOfficeError(error);
						}
					});
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_BindingReuseId_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem("sheet1").getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Matrix, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync(callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData, dataToSet);
			})
			.then(function () {
			ctx.workbook.worksheets.getItem("sheet1").getRange("A2:B3").select();
				return ctx.sync();
			})
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Matrix, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync(callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData, [[1, 2],[3, 4]]);
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export async function test_OfficeJS_DeleteBindingReferencedSheet_cvt_JScript_V10() {
		await Excel.run(async(ctx) => {
			var sheet1: Excel.Worksheet = null;
			var sheet2: Excel.Worksheet = null;
			var sheet3: Excel.Worksheet = null;
			try {
				sheet1 = ctx.workbook.worksheets.add();
				sheet2 = ctx.workbook.worksheets.add();
				sheet3 = ctx.workbook.worksheets.add();
				
				var table1 = sheet1.tables.add("A1:A1", false).load("name");
				var table2 = sheet2.tables.add("A1:A1", false).load("name");
				var table3 = sheet3.tables.add("A1:A1", false).load("name");
				await ctx.sync();
				
				sheet1.activate();
				await ctx.sync();
				
				await Util.promisify((callback) => Office.context.document.bindings.addFromNamedItemAsync(table1.name, Office.BindingType.Table, { id: table1.name }, callback));
				await Util.promisify((callback) => Office.context.document.bindings.addFromNamedItemAsync(table2.name, Office.BindingType.Table, { id: table2.name }, callback));
				await Util.promisify((callback) => Office.context.document.bindings.addFromNamedItemAsync(table3.name, Office.BindingType.Table, { id: table3.name }, callback));
				await ctx.sync();
				
				sheet2.delete();
				sheet2 = null;
				await ctx.sync();
				
				var binding1: Office.Binding = await Util.promisify<Office.Binding>((callback) => Office.context.document.bindings.getByIdAsync(table1.name, callback));
				var binding2: Office.Binding = await Util.promisify<Office.Binding>((callback) => Office.context.document.bindings.getByIdAsync(table2.name, callback));
				var binding3: Office.Binding = await Util.promisify<Office.Binding>((callback) => Office.context.document.bindings.getByIdAsync(table3.name, callback));
				await ctx.sync();
				
				await Util.promisify((callback) => binding1.getDataAsync(callback));
				await Util.promisify((callback) => binding3.getDataAsync(callback));
				
				try {
					await Util.promisify((callback) => binding2.getDataAsync(callback));
					RichApiTest.log.fail("binding2 incorrectly points to a valid ref");
				}
				catch (error) {
					
					
					if (error.code == 1000 || error.code == 3002) {
						RichApiTest.log.comment("Received expected failure: " + error.code + ":" + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				}
			}
			finally {
				if (sheet1 != null) {
					sheet1.delete();
				}
				if (sheet2 != null) {
					sheet2.delete();
				}
				if (sheet3 != null) {
					sheet3.delete();
				}
				await ctx.sync();
			}
		});
	}
}
?module ExcelTest {
	export function test_OfficeJS_SelectionChangedEvent_cvt_JScript_V10() {
		
		
		var bindingId = "TestBinding" + Math.floor(Math.random() * 1000000);
		var eventFireCounter = 0;
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A1:B6");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Matrix, { id: bindingId }, callback))
			})
			.then(function (binding: Office.Binding) {
				return Util.promisify((callback) => binding.addHandlerAsync(Office.EventType.BindingSelectionChanged, function () {
					eventFireCounter++;
				}, callback));
			})
			.then(function () {
				sheet1.getRange("A3:B4").select();
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues(1, eventFireCounter, "eventFireCounter"));
			})
			.then(function () {
				
				sheet1.getRange("A2").select();
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues(2, eventFireCounter, "eventFireCounter"));
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_DataChangedEvent_cvt_JScript_V10() {
		
		var bindingId = "TestBinding" + Math.floor(Math.random() * 1000000);
		var eventFireCounter = 0;
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A1:B6");
		range.clear();
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Matrix, { id: bindingId }, callback))
			})
			.then(function (binding: Office.Binding) {
				return Util.promisify((callback) => binding.addHandlerAsync(Office.EventType.BindingDataChanged, function () {
					eventFireCounter++
				}, callback));
			})
			.then(function () {
				sheet1.getRange("A3:B4").values = [[1,2],[3,4]];
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues(1, eventFireCounter, "eventFireCounter"));
			})
			.then(function () {
				
				sheet1.getRange("A2").values = [[99]];
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues(2, eventFireCounter, "eventFireCounter"));
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_MultipleEventHandlers_cvt_JScript_V10() {
		
		var bindingId = "TestBinding" + Math.floor(Math.random() * 1000000);
		var binding: Office.Binding;
		var eventFireCounter = 0;
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet1.getRange("A1:B6");
		range.clear();
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Matrix, { id: bindingId }, callback))
			})
			.then(function (value: Office.Binding) {
				binding = value;
				return Util.promisify((callback) => binding.addHandlerAsync(Office.EventType.BindingDataChanged, function () {
					eventFireCounter++;
				}, callback));
			})
			.then(function () {
				return Util.promisify((callback) => binding.addHandlerAsync(Office.EventType.BindingDataChanged, function () {
					eventFireCounter++;
				}, callback));
			})
			.then(function () {
				return Util.promisify((callback) => binding.addHandlerAsync(Office.EventType.BindingDataChanged, function () {
					eventFireCounter++;
				}, callback));
			})
			.then(function () {
				sheet1.getRange("A3:B4").values = [[1, 2], [3, 4]];
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues(3, eventFireCounter, "eventFireCounter"));
			})
			.then(function () {
				
				sheet1.getRange("A2").values = [[99]];
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues(6, eventFireCounter, "eventFireCounter"));
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_EventDocumentSelectionChangedMultiple_cvt_JScript_V10() {
		if (Util.isWAC()) {
			RichApiTest.log.comment("Skip test due to WAC issue, see bug #OfficeMain: 2940260")
			RichApiTest.log.done(true); 
			return;
		}
		var eventFireCounter = 0;
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		sheet1.getCell(0, 0).select();
		ctx.sync()
			.then(function () {
				return Util.promisify((callback) => Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, function () {
					eventFireCounter++;
				}, callback));
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, function () {
					eventFireCounter++;
				}, callback));
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, function () {
					eventFireCounter++;
				}, callback));
			})
			.then(function () {
				sheet1.getRange("A3:B4").select();
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues(3, eventFireCounter, "eventFireCounter"));
			})
			.then(function () {
				
				sheet1.getRange("A2").select();
				sheet1.getRange("A5").select();
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues(6, eventFireCounter, "eventFireCounter"));
			})
			.then(function () {
				Util.promisify((callback) => Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, callback));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_EventDocumentSelectionChangedAcrossSheets_cvt_JScript_V10() {
		if (Util.isWAC()) {
			RichApiTest.log.comment("Skip test due to WAC issue, see bug #OfficeMain: 2940260")
			RichApiTest.log.done(true); 
			return;
		}
		var eventFireCounter = 0;
		
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		sheet1.getCell(0, 0).select();
		ctx.sync()
			.then(function () {
				return Util.promisify((callback) => Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, function () {
					eventFireCounter++;
				}, callback));
			})
			.then(function () {
				ctx.workbook.worksheets.getItem("Sheet2").getRange("A5").select();
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues(1, eventFireCounter, "eventFireCounter first time"));
			})
			.then(function () {
				
				sheet1.activate();
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues(2, eventFireCounter, "eventFireCounter second time"));
			})
			.then(function () {
				Util.promisify((callback) => Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, callback));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_EventRemoveReAdd_cvt_JScript_V10() {
		if (Util.isWAC()) {
			RichApiTest.log.comment("Skip test due to WAC issue, see bug #OfficeMain: 2940260");
			RichApiTest.log.done(true); 
			return;
		}
		var eventFireLog = "";
		var ctx = new Excel.RequestContext();
		var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
		sheet1.getCell(0, 0).select();
		ctx.sync()
			.then(function () {
				return Util.promisify((callback) => Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, function () {
					eventFireLog += "FIRST";
				}, callback));
			})
			.then(function () {
				ctx.workbook.worksheets.getItem("Sheet2").getRange("A5").select();
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues("FIRST", eventFireLog, "eventFireLog"));
			})
			.then(function () {
				Util.promisify((callback) => Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, callback));
			})
			.then(function () {
				ctx.workbook.worksheets.getItem("Sheet2").getRange("C5").select();
				return ctx.sync();
			})
			.then(function () {
				
				return Util.wait(500, () => Util.assertCompareValues("FIRST", eventFireLog, "eventFireLog"));
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, function () {
					eventFireLog += "SECOND";
				}, callback));
			})
			.then(function () {
				ctx.workbook.worksheets.getItem("Sheet2").getRange("E5").select();
				return ctx.sync();
			})
			.then(function () {
				return Util.wait(500, () => Util.assertCompareValues("FIRSTSECOND", eventFireLog, "eventFireLog"));
			})
			.then(function () {
				Util.promisify((callback) => Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, callback));
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_OfficeJS_GoToByIDBindingFound_cvt_JScript_V10() {
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet.getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.bindings.addFromSelectionAsync(
						Office.BindingType.Table, { id: bindingId }, callback));
			})
			.then(function (value: Office.Binding) {
				return Util.promisify((callback) => value.getDataAsync(callback));
			})
			.then(function (readBackData: any) {
				Util.assertCompareArray(readBackData.rows, dataToSet);
				sheet.getRange("A3").select();
				return ctx.sync();
			})
			.then(function () {
				var currentSelection = ctx.workbook.getSelectedRange();
				currentSelection.load("values");
				return ctx.sync().then(function () {
					Util.assertCompareArray(currentSelection.values, [[3]]);
				});
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.goToByIdAsync(bindingId, Office.GoToType.Binding, callback));
			})
			.then(function () {
				var currentSelection = ctx.workbook.getSelectedRange();
				currentSelection.load("values");
				return ctx.sync().then(function () {
					Util.assertCompareArray(currentSelection.values, dataToSet);
				});
			})
			.then(function () {
				return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback))
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_GoToByIDNamedItemFound_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet.getRange("A2:B4");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify((callback) => Office.context.document.goToByIdAsync(
					"ChartsNovemberGlobalNamedRange", Office.GoToType.NamedItem, callback));
			})
			.then(function () {
				var currentSelection = ctx.workbook.getSelectedRange();
				currentSelection.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Charts!E2:F5", currentSelection.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_GoToByIDNamedItemMissing_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet.getRange("A2:B4");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify((callback) => Office.context.document.goToByIdAsync(
					"MissingNamedRangeSorry", Office.GoToType.NamedItem, callback))
				.then(() => { throw new Error("Should have failed"); })
				.catch(function (error: Office.Error) {
					if (error.code === 7002) {
						RichApiTest.log.comment("Caught expected error of binding no longer being found: " + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_GoToByIDBindingMissing_cvt_JScript_V10() {
		var bindingId = "AbsolutelyMissingBindingAAAA";
		Util.promisify((callback) => Office.context.document.goToByIdAsync(bindingId, Office.GoToType.Binding, callback))
			.then(() => { throw new Error("Should have failed"); })
			.catch(function (error: Office.Error) {
				if (error.code === 7002) {
					RichApiTest.log.comment("Caught expected error of binding no longer being found: " + error.message);
				} else {
					Util.throwOfficeError(error);
				}
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_GoToByIDAddress_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet.getRange("A2:B4");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify((callback) => Office.context.document.goToByIdAsync(
					"Charts!A:B", Office.GoToType.NamedItem, callback));
			})
			.then(function () {
				var currentSelection = ctx.workbook.getSelectedRange();
				currentSelection.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Charts!A:B", currentSelection.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_GoToByIDCanBeLocalAddress_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem("Charts");
		var range = sheet.getRange("A2:B4");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify((callback) => Office.context.document.goToByIdAsync(
					"D5:E7", Office.GoToType.NamedItem, callback));
			})
			.then(function () {
				var currentSelection = ctx.workbook.getSelectedRange();
				currentSelection.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Charts!D5:E7", currentSelection.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_GoToByIDSheetNameOnly_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		
		ctx.workbook.worksheets.getItem("Charts").getRange("E8:F9").select();
		
		ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4").select();
		ctx.sync()
			.then(function () {
				
				return Util.promisify((callback) => Office.context.document.goToByIdAsync(
					"cHaRts", Office.GoToType.NamedItem, callback));
			})
			.then(function () {
				var currentSelection = ctx.workbook.getSelectedRange();
				currentSelection.load("address");
				return ctx.sync().then(function () {
					Util.assertCompareValues("Charts!A1", currentSelection.address);
				});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_GoToByIDInvalidAddress_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet.getRange("A2:B4");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify((callback) => Office.context.document.goToByIdAsync(
					"Charts!A", Office.GoToType.NamedItem, callback))
					.then(() => { throw new Error("Should have failed"); })
					.catch(function (error: Office.Error) {
						if (error.code === 7002) {
							RichApiTest.log.comment("Caught expected error of binding no longer being found: " + error.message);
						} else {
							Util.throwOfficeError(error);
						}
					});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_GoToByIdSelectionModeNoneNamedItem_cvt_JScript_V10() {
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem("Sheet1");
		var range = sheet.getRange("A2:B4");
		range.select();
		ctx.sync()
			.then(function () {
				return Util.promisify(function (callback) { 
					return Office.context.document.goToByIdAsync("ChartsNovemberGlobalNamedRange",
						Office.GoToType.NamedItem, { selectionMode: Office.SelectionMode.None }, callback);
				});
			})
			.then(function () {
				var currentSelection = ctx.workbook.getSelectedRange();
				currentSelection.load("address");
				return ctx.sync()
					.then(function () {
						Util.assertCompareValues("Charts!E2", currentSelection.address);
					});
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_GoToByIdSelectionModeNoneTable_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [
			["1000.50", "2000.10"],
			["1", "2"]
		];
		var bindingId = "ID_TblDataAsyncTD";
		var newData = [
			["123", "456"],
			["789", "foo"]
		];
		Util.clearSheetBefore("Sheet1", function () {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(function (callback) {
						return Office.context.document.setSelectedDataAsync(myTable, {
							coercionType: Office.CoercionType.Table
						}, callback);
					});
				})
				.then(function () {
					return Util.promisify(function (callback) {
						return Office.context.document.bindings.addFromSelectionAsync(Office.BindingType.Table, {
							id: bindingId
						}, callback);
					});
				})
				.then(function (value: Office.Binding) {
					var updateTable = new Office.TableData();
					updateTable.rows = newData;
					return Util.promisify(function (callback) {
						return value.setDataAsync(updateTable, callback);
					});
				})
				.then(function () {
					return Util.promisify(function (callback) {
						return Office.context.document.goToByIdAsync(bindingId, Office.GoToType.Binding, {
							"selectionMode": Office.SelectionMode.None
						}, callback);
					});
				})
				.then(function () {
					var currentSelection = ctx.workbook.getSelectedRange();
					currentSelection.load("address");
					return ctx.sync().then(function () {
						Util.assertCompareValues("Sheet1!B6", currentSelection.address);
					})
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_OfficeJS_GetFilePropertiesAsync_cvt_JScript_V10() {
		Util.promisify(function (callback) {
			return Office.context.document.getFilePropertiesAsync(callback);
		})
		.then(function (asyncResult: Office.AsyncResult) {
			var fileUrl = asyncResult.value.url;
			if (fileUrl == "") {
				
				ExcelTest.reportError;
			}
			else {
				ExcelTest.pass;
			}
		});
	}
}?module ExcelTest {
	export function test_Perf_OfficeJSBindingsSmall_cvt_JScript_V10() {
		var dataToSet = [
			[1, 2],
			[3, 4],
			[5, 6],
		];
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A2:B4");
		range.values = dataToSet;
		range.select();
		ctx.sync().then(function () {
			var counter = 0;
			var t0 = performance.now();
			function work() {
				counter++;
				Util.promisify<any>(function (callback) {
					return Office.context.document.bindings.addFromSelectionAsync(Office.BindingType.Table, {
						id: bindingId
					}, callback);
				})
				.then(function (value) {
					return Util.promisify(function (callback) {
						return value.getDataAsync(callback);
					});
				})
				.then(function () {
					return Util.promisify(function (callback) {
						return Office.context.document.bindings.releaseByIdAsync(bindingId, callback);
					});
				})
				.then(function () {
					if (counter < 1000) {
						work();
					} else {
						var t1 = performance.now();
						RichApiTest.log.comment("Total time: " + (t1 - t0) + " milliseconds.");
						ExcelTest.pass();
					}
				})
				.catch(ExcelTest.reportError);
			}
			work();
		}).catch(ExcelTest.reportError);
	}
	export function test_Perf_OfficeJSBindingsLarge_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		var sheetName = "Sheet1";
		var rangeAddress = "A1:Z100";
		var rangeValuesToSet = [];
		for (var row = 0; row < 100; row++) {
			var rowValue = [];
			for (var col = 0; col < 26; col++) {
				rowValue.push(row * col);
			}
			rangeValuesToSet.push(rowValue);
		}
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
		range.values = rangeValuesToSet;
		range.select();
		ctx.sync().then(function () {
			var counter = 0;
			var t0 = performance.now();
			function work() {
				counter++;
				Util.promisify<any>(function (callback) {
					return Office.context.document.bindings.addFromSelectionAsync(Office.BindingType.Table, {
						id: bindingId
					}, callback);
				})
				.then(function (value) {
					return Util.promisify(function (callback) {
						return value.getDataAsync(callback);
					});
				})
				.then(function () {
					return Util.promisify(function (callback) {
						return Office.context.document.bindings.releaseByIdAsync(bindingId, callback);
					});
				})
				.then(function () {
					if (counter < 500) {
						work();
					} else {
						var t1 = performance.now();
						RichApiTest.log.comment("Total time: " + (t1 - t0) + " milliseconds.");
						ExcelTest.pass();
					}
				})
				.catch(ExcelTest.reportError);
			}
			work();
		}).catch(ExcelTest.reportError);
	}
	export function test_Perf_OfficeJSBindingsAddAndReleaseOnly_cvt_JScript_V10() {
		var bindingId = "TestBinding";
		var ctx = new Excel.RequestContext();
		var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:B7");
		range.select();
		ctx.sync().then(function () {
			var counter = 0;
			var t0 = performance.now();
			function work() {
				counter++;
				Util.promisify<any>(function (callback) {
					return Office.context.document.bindings.addFromSelectionAsync(Office.BindingType.Table, {
						id: bindingId
					}, callback);
				})
				.then(function () {
					return Util.promisify(function (callback) {
						return Office.context.document.bindings.releaseByIdAsync(bindingId, callback);
					});
				})
				.then(function () {
					if (counter < 1000) {
						work();
					} else {
						var t1 = performance.now();
						RichApiTest.log.comment("Total time: " + (t1 - t0) + " milliseconds.");
						ExcelTest.pass();
					}
				})
				.catch(ExcelTest.reportError);
			}
			work();
		}).catch(ExcelTest.reportError);
	}
}
?module ExcelTest {
	export function test_OfficeJS_SetSelectedDataText_cvt_JScript_V10() {
		var valToSet = "foobar";
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(valToSet,
							{
								coercionType: Office.CoercionType.Text
							}, callback));
				})
				.then(function () {
					var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
					ctx.load(range);
					return ctx.sync().then(function () {
						Util.assertCompareValues(valToSet, range.values[0][0], "Value");
					})
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_SetSelectedDataMatrix_cvt_JScript_V10() {
		var valToSet = [["foo", "bar"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5:C5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(valToSet,
							{
								coercionType: Office.CoercionType.Matrix
							}, callback));
				})
				.then(function () {
					var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5:C5");
					ctx.load(range);
					return ctx.sync().then(function () {
						Util.assertCompareArray(valToSet, range.values);
					})
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	
	export function test_OfficeJS_SetSelectedDataImage_cvt_JScript_V10() {
		if (!Office.CoercionType.Image) {
			RichApiTest.log.pass('The "Image" coercion type is not supported on this platform. Skipping test');
			return;
		}
		Util.clearSheetBefore("Images", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Images").getRange("B5:C5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(ChartUtil.getDefaultChartValue(),
							{
								coercionType: Office.CoercionType.Image
							}, callback));
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_SetSelectedDataImageWidthHeight_cvt_JScript_V10() {
		if (!Office.CoercionType.Image) {
			RichApiTest.log.pass('The "Image" coercion type is not supported on this platform. Skipping test');
			return;
		}
		Util.clearSheetBefore("Images", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Images").getRange("B5:C5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(ChartUtil.getDefaultChartValue(),
							{
								coercionType: Office.CoercionType.Image,
								imageWidth: 100,
								imageHeight: 100,
							}, callback));
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_SetSelectedDataImageWidthHeightLeftTop_cvt_JScript_V10() {
		if (!Office.CoercionType.Image) {
			RichApiTest.log.pass('The "Image" coercion type is not supported on this platform. Skipping test');
			return;
		}
		Util.clearSheetBefore("Images", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Images").getRange("B5:C5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(ChartUtil.getDefaultChartValue(),
							{
								coercionType: Office.CoercionType.Image,
								imageWidth: 100,
								imageHeight: 100,
								imageLeft: 50,
								imageTop: 50,
							}, callback));
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_SetSelectedDataMatrixLarge_cvt_JScript_V10() {
		var arrLength = 100;
		var valToSet = new Array(arrLength);
		for (var i = 0; i < arrLength; i++) {
			valToSet[i] = new Array();
			valToSet[i][0] = "foo";
		}
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A1:A" + arrLength);
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(valToSet,
							{
								coercionType: Office.CoercionType.Matrix
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.getSelectedDataAsync(Office.CoercionType.Matrix, callback));
				})
				.then(function (readbackVal: any) {
					Util.assertCompareArray(readbackVal, valToSet);
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_SetSelectedDataUnboundedError_cvt_JScript_V10() {
		var arrLength = 10;
		var valToSet = new Array(arrLength);
		for (var i = 0; i < arrLength; i++) {
			valToSet[i] = new Array();
			valToSet[i][0] = "foo";
		}
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A:A");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(valToSet,
							{
								coercionType: Office.CoercionType.Matrix
							}, callback));
				})
				.then(() => { throw new Error("Should have failed"); })
				.catch(function (error: Office.Error) {
				if (error.code === 2009) {
					RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_SetSelectedDataWrongCoersion_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B3:C5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Matrix
							}, callback));
				})
				.then(() => { throw new Error("Should have failed"); })
				.catch(function (error: Office.Error) {
					if (error.code === 2000) {
						RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_SetSelectedDataWrongShape_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar", "baz"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B3:C5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Matrix
							}, callback));
				})
				.then(() => { throw new Error("Should have failed"); })
				.catch(function (error: Office.Error) {
					if (error.code === 2000) {
						RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_SetSelectedDataWrongShapeForTable_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar", "baz"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B3:C5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(() => { throw new Error("Should have failed"); })
				.catch(function (error: Office.Error) {
					if (error.code === 2000) {
						RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_GetSelectedDataMatrix_cvt_JScript_V10() {
		var valToSet = [["foo", "bar"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5:C5");
			range.values = valToSet;
			range.select();
			ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.getSelectedDataAsync(Office.CoercionType.Matrix, callback));
			})
			.then(function (readbackVal: any) {
				Util.assertCompareArray(readbackVal, valToSet);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_GetSelectedDataString_cvt_JScript_V10() {
		var valToSet = "foobar";
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.values = [[valToSet]];
			range.select();
			ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, callback));
			})
			.then(function (readbackVal: any) {
				Util.assertCompareValues(readbackVal, valToSet);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_GetSelectedDataTable_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.setSelectedDataAsync(myTable,
						{
							coercionType: Office.CoercionType.Table
						}, callback));
			})
			.then(function () {
				return Util.promisify(
					(callback) => Office.context.document.getSelectedDataAsync(Office.CoercionType.Table, callback));
				})
			.then(function (readbackVal: Office.TableData) {
				Util.assertCompareArray(readbackVal.headers, myTable.headers);
				Util.assertCompareArray(readbackVal.rows, myTable.rows);
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_GetSelectedDataWithFilter_cvt_JScript_V10() {
		var dataToSet = [
			["Price", "Item", "Description"],
			[3, "A", "Aaa"],
			[5, "B", "Bbb"],
		];
		var expectedHeadersWithFilter = [
			["Price", "Description"],
		];
		var expectedBodyWithFilter = [
			[5, "Bbb"],
		];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet1.getRange("A2:C4");
			range.getColumn(1).getEntireColumn().columnHidden = true;
			range.values = dataToSet;
			ctx.load(range, "address");
			ctx.sync()
				.then(function () {
					var table = ctx.workbook.tables.add(range.address, true)
					table.columns.getItemAt(0).filter.applyTopItemsFilter(1);
					table.getRange().select(); 
				})
				.then(ctx.sync)
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.getSelectedDataAsync(
							Office.CoercionType.Table,
							{ filterType: Office.FilterType.OnlyVisible },
							callback));
				})
				.then(function (readbackVal: Office.TableData) {
					Util.assertCompareArray(readbackVal.headers, expectedHeadersWithFilter);
					Util.assertCompareArray(readbackVal.rows, expectedBodyWithFilter);
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
				.then(function () {
					
					sheet1.getRange("A:C").delete(Excel.DeleteShiftDirection.left);
					return ctx.sync();
				});
		});
	}
	export function test_OfficeJS_GetSelectedDataNumberFormat_cvt_JScript_V10() {
		var valuesToSet = [
			["Price", "Item"],
			[3.1234567, "A"],
			[5, "B"],
		];
		var formatsToSet = [
			["@", "@"],
			["0.00", "@"],
			["0.00", "@"],
		];
		var expectedValues = [
			["Price", "Item"],
			[3.12, "A"],
			[5.00, "B"],
		];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet1.getRange("A2:B4");
			range.numberFormat = formatsToSet;
			range.values = valuesToSet;
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.getSelectedDataAsync(
							Office.CoercionType.Matrix,
							{ valueFormat: Office.ValueFormat.Formatted },
							callback));
				})
				.then(function (readbackVal: Office.TableData) {
					Util.assertCompareArray(readbackVal, expectedValues);
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_OfficeJS_GetSelectedDataErrorOnInvalidCoercion_cvt_JScript_V10() {
		var valuesToSet = [
			["Price", "Item"],
			[3.1234567, "A"],
			[5, "B"],
		];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet1.getRange("A2:B4");
			range.values = valuesToSet;
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.getSelectedDataAsync(
							Office.CoercionType.Table,
							{ filterType: Office.FilterType.OnlyVisible },
							callback))
						.then(function () {
							throw new Error("getSelectedDataAsync should NOT have succeeded");
						})
						.catch(function (error: Office.Error) {
							if (error.code === 1004) {
								RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
							} else {
								Util.throwOfficeError(error);
							}
						});
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_OfficeJS_GetSelectedDataErrorOnTooLargeOfData_cvt_JScript_V10() {
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var sheet1 = ctx.workbook.worksheets.getItem("Sheet1");
			var range = sheet1.getRange("A:A");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.getSelectedDataAsync(
							Office.CoercionType.Table,
							{ filterType: Office.FilterType.OnlyVisible },
							callback))
						.then(function () {
							throw new Error("getSelectedDataAsync should NOT have succeeded");
						})
						.catch(function (error: Office.Error) {
							if (error.code === 1008) {
								RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
							} else {
								Util.throwOfficeError(error);
							}
						});
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
}
?module ExcelTest {
	export function test_OfficeJS_SettingsBasicReadWriteWithNoAsync_cvt_JScript_V10() {
		Office.context.document.settings.set("MySetting", "MyValue");
		var returnValue = Office.context.document.settings.get("MySetting");
		RichApiTest.log.done(Util.compare(returnValue, "MyValue"));
		Office.context.document.settings.remove("MySetting");
	}
	export function test_OfficeJS_SettingsBasicReadWriteWithAsync_cvt_JScript_V10() {
		Office.context.document.settings.set("MySetting", "MyValue");
		Util.promisify((callback) => Office.context.document.settings.saveAsync(callback))
			.then(function () {
				Util.assertCompareValues("MyValue", Office.context.document.settings.get("MySetting"));
				
				
				Office.context.document.settings.set("MySetting", "Another value");
				return Util.promisify((callback) => Office.context.document.settings.refreshAsync(callback));
			})
			.then(function () {
				Util.assertCompareValues("MyValue", Office.context.document.settings.get("MySetting"));
				Office.context.document.settings.remove("MySetting");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_OfficeJS_SettingsRemovalPerists_cvt_JScript_V10() {
		Office.context.document.settings.set("MySetting", "MyValue");
		Util.promisify((callback) => Office.context.document.settings.saveAsync(callback))
			.then(function () {
				Util.assertCompareValues("MyValue", Office.context.document.settings.get("MySetting"));
				
				Office.context.document.settings.remove("MySetting");
				
				return Util.promisify((callback) => Office.context.document.settings.refreshAsync(callback));
			})
			.then(function () {
				Util.assertCompareValues("MyValue", Office.context.document.settings.get("MySetting"));
				
				Office.context.document.settings.remove("MySetting");
				return Util.promisify((callback) => Office.context.document.settings.saveAsync(callback));
			})
			.then(function() {
				Util.assertCompareValues(null, Office.context.document.settings.get("MySetting"));
				Office.context.document.settings.remove("MySetting");
			})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}?
module ExcelTest {
	export function test_OfficeJS_TableAddFromSelection_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{ coercionType: Office.CoercionType.Table }, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontFamily_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Data, format: { fontFamily: "Arial" } }
								]
							}, callback));
				})
				.then(function () {
					var tablefont = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().format.font;
					ctx.load(tablefont);
					return ctx.sync().then(function () {
						Util.assertCompareValues("Arial", tablefont.name, "font name");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontColor_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Headers, format: { fontColor: "blue" } }
								]
							}, callback));
				})
				.then(function () {
					var tablefont = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.font;
					ctx.load(tablefont);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#0000FF", tablefont.color, "fontColor");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontBold_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Headers, format: { fontStyle: "bold" } }
								]
							}, callback));
				})
				.then(function () {
					var tablefont = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.font;
					ctx.load(tablefont);
					return ctx.sync().then(function () {
						Util.assertCompareValues(true, tablefont.bold, "font bold");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontItalic_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Headers, format: { fontStyle: "italic" } }
								]
							}, callback));
				})
				.then(function () {
					var tablefont = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.font;
					ctx.load(tablefont);
					return ctx.sync().then(function () {
						Util.assertCompareValues(true, tablefont.italic, "font italic");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontSize_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Headers, format: { fontSize: 20 } }
								]
							}, callback));
				})
				.then(function () {
					var tablefont = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.font;
					ctx.load(tablefont);
					return ctx.sync().then(function () {
						Util.assertCompareValues(20, tablefont.size, "font size");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontUnderline_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Headers, format: { fontUnderlineStyle: "single" } }
								]
							}, callback));
				})
				.then(function () {
					var tablefont = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.font;
					ctx.load(tablefont);
					return ctx.sync().then(function () {
						Util.assertCompareValues(Excel.RangeUnderlineStyle.single, tablefont.underline, "font underline");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontDirection_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Headers, format: { fontDirection: "left-to-right" } }
								]
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontStrikethrough_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Data, format: { fontStrikethrough: true } }
								]
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontSuperscript_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Data, format: { fontSuperscript: true } }
								]
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontSubScript_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Data, format: { fontSubscript: true } }
								]
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatFontNormal_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Data, format: { fontNormal: true } }
								]
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatBorderColor_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Headers, format: { borderStyle: "dashed", borderColor: "green" } }
								]
							}, callback));
				})
				.then(function () {
					var tableBorder = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.borders.getItem(Excel.BorderIndex.edgeTop);
					ctx.load(tableBorder);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#00FF00", tableBorder.color, "border color");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatBorderStyle_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Headers, format: { borderStyle: "dashed" } }
								]
							}, callback));
				})
				.then(function () {
					var tableBorder = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.borders.getItem(Excel.BorderIndex.edgeTop);
					ctx.load(tableBorder);
					return ctx.sync().then(function () {
						Util.assertCompareValues(Excel.BorderLineStyle.dash, tableBorder.style, "border style");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatBorderAllEdgesStyle_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{
										cells: Office.Table.Headers, format:
										{
											borderTopStyle: "dashed", borderTopColor: "#FF0000",
											borderBottomStyle: "medium", borderBottomColor: "#00FF00",
											borderLeftStyle: "dotted", borderLeftColor: "#0000FF",
											borderRightStyle: "dash dot", borderRightColor: "#FFFF00"
										}
									}
								]
							}, callback));
				})
				.then(function () {
					var tableBorderTop = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.borders.getItem(Excel.BorderIndex.edgeTop);
					var tableBorderBottom = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.borders.getItem(Excel.BorderIndex.edgeBottom);
					var tableBorderLeft = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.borders.getItem(Excel.BorderIndex.edgeLeft);
					var tableBorderRight = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange().format.borders.getItem(Excel.BorderIndex.edgeRight);
					ctx.load(tableBorderTop);
					ctx.load(tableBorderBottom);
					ctx.load(tableBorderLeft);
					ctx.load(tableBorderRight);
					return ctx.sync().then(function () {
						Util.assertCompareValues(Excel.BorderLineStyle.dash, tableBorderTop.style, "borderTop style");
						Util.assertCompareValues("#FF0000", tableBorderTop.color, "borderTop color");
						Util.assertCompareValues(Excel.BorderLineStyle.continuous, tableBorderBottom.style, "borderBottom style");
						Util.assertCompareValues("#00FF00", tableBorderBottom.color, "borderBottom color");
						Util.assertCompareValues(Excel.BorderLineStyle.dot, tableBorderLeft.style, "borderLeft style");
						Util.assertCompareValues("#0000FF", tableBorderLeft.color, "borderLeft color");
						Util.assertCompareValues(Excel.BorderLineStyle.dashDot, tableBorderRight.style, "borderRight style");
						Util.assertCompareValues("#FFFF00", tableBorderRight.color, "borderRight color");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatBorderOutInlineStyle_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{
										cells: Office.Table.All, format:
										{
											borderOutlineStyle: "dashed", borderOutlineColor: "#FF0000",
											borderInlineStyle: "medium", borderInlineColor: "#00FF00",
										}
									}
								]
							}, callback));
				})
				.then(function () {
					var tableBorderOutline = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getRange().format.borders.getItem(Excel.BorderIndex.edgeTop);
					var tableBorderInline = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getRange().format.borders.getItem(Excel.BorderIndex.insideHorizontal);
					ctx.load(tableBorderOutline);
					ctx.load(tableBorderInline);
					return ctx.sync().then(function () {
						Util.assertCompareValues(Excel.BorderLineStyle.dash, tableBorderOutline.style, "borderOutline style");
						Util.assertCompareValues("#FF0000", tableBorderOutline.color, "borderOutline color");
						Util.assertCompareValues(Excel.BorderLineStyle.continuous, tableBorderInline.style, "borderInline style");
						Util.assertCompareValues("#00FF00", tableBorderInline.color, "borderInline color");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatBgColor_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Data, format: { backgroundColor: "red" } }
								]
							}, callback));
				})
				.then(function () {
					var tableFill = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().format.fill;
					ctx.load(tableFill);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#FF0000", tableFill.color, "table fill");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatBgColorOneRow_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: { row: 1 }, format: { backgroundColor: "red" } }
								]
							}, callback));
				})
				.then(function () {
					var tableFill = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().getRow(1).format.fill;
					ctx.load(tableFill);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#FF0000", tableFill.color, "table fill");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatBgColorOneCol_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					if (Util.isApple()) {
						throw new IntentionalSkip("V1 Table Formatting for column doesn't work in Mac/iOS. Skipping test");
					}
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: { column: 1 } , format: { backgroundColor: "red" } }
								]
							}, callback));
				})
				.then(function () {
					var tableFill = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().getColumn(1).format.fill;
					ctx.load(tableFill);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#FF0000", tableFill.color, "table fill");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatBgColorOneCell_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: { row: 1, column: 1 }, format: { backgroundColor: "red" } }
								]
							}, callback));
				})
				.then(function () {
					var tableFill = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().getCell(1,1).format.fill;
					ctx.load(tableFill);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#FF0000", tableFill.color, "table fill");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatCellWidth_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.All, format: { width: 5 } }
								]
							}, callback));
				})
				.then(function () {
					var tableFormat = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getRange().format;
					ctx.load(tableFormat);
					return ctx.sync().then(function () {
						Util.assertCompareValues(Util.isiOS() ? 36 : 30, tableFormat.columnWidth, "column width");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatCellWidthAutofit_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.All, format: { width: "auto fit" } }
								]
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatCellHeight_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.All, format: { height: 30 } }
								]
							}, callback));
				})
				.then(function () {
					var tableFormat = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getRange().format;
					ctx.load(tableFormat);
					return ctx.sync().then(function () {
						Util.assertCompareValues(30, tableFormat.rowHeight, "row height");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatCellHeightAutoFit_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.All, format: { height: "auto fit" } }
								]
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatWrapping_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.All, format: { wrapping: true } }
								]
							}, callback));
				})
				.then(function () {
					var tableFormat = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getRange().format;
					ctx.load(tableFormat);
					return ctx.sync().then(function () {
						Util.assertCompareValues(true, tableFormat.wrapText, "wrapText");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatHorizontalAlign_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Data, format: { alignHorizontal: "right" } }
								]
							}, callback));
				})
				.then(function () {
					var tableFormat = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().format;
					ctx.load(tableFormat);
					return ctx.sync().then(function () {
						Util.assertCompareValues(Excel.HorizontalAlignment.right, tableFormat.horizontalAlignment, "horizontal Alignment");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatVertAlign_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Data, format: { alignVertical: "bottom" } }
								]
							}, callback));
				})
				.then(function () {
					var tableFormat = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().format;
					ctx.load(tableFormat);
					return ctx.sync().then(function () {
						Util.assertCompareValues(Excel.VerticalAlignment.bottom, tableFormat.verticalAlignment, "vertical Alignment");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatNumberFormat_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["1000.50", "2000.10"], ["3000", "4000"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: { row: 0 }, format: { numberFormat: "#,###.00" } }
								]
							}, callback));
				})
				.then(function () {
					var tableRange = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(tableRange);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#,###.00", tableRange.numberFormat[0][0], "Number Format");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatUpdateSetFormats_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["1000.50", "2000.10"], ["1", "2"]];
		var bindingId = "ID_UpdateTblStyle";
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Data, format: { numberFormat: "#,###.00" } }
								]
							}, callback));
				})
				.then(function () {
					var tableRange = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(tableRange);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#,###.00", tableRange.numberFormat[0][0], "Number Format");
					})
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.setFormatsAsync([
						{ cells: Office.Table.Data, format: { backgroundColor: "green" } }
					], callback));
				})
				.then(function () {
					var tableFill = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().format.fill;
					ctx.load(tableFill);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#00FF00", tableFill.color, "Tablefill color");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableFormatClearFormats_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["1000.50", "2000.10"], ["1", "2"]];
		var bindingId = "ID_UpdateTblStyle";
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								cellFormat: [
									{ cells: Office.Table.Data, format: { backgroundColor: "red" } }
								]
							}, callback));
				})
				.then(function () {
					var tableFill = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().format.fill;
					ctx.load(tableFill);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#FF0000", tableFill.color, "Table fill");
					})
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.clearFormatsAsync(callback));
				})
				.then(function () {
					var tableFill = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().format.fill;
					ctx.load(tableFill);
					return ctx.sync().then(function () {
						Util.assertCompareValues("#FFFFFF", tableFill.color, "Table fill");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableOptionsStyle_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								tableOptions: { style: "TableStyleMedium1" }
							}, callback));
				})
				.then(function () {
					var table = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0);
					ctx.load(table);
					return ctx.sync().then(function () {
						Util.assertCompareValues("TableStyleMedium1", table.style, "table style");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableOptionsHeaderRow_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								tableOptions: { headerRow: false }
							}, callback));
				})
				.then(function () {
					var table = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0);
					ctx.load(table);
					return ctx.sync().then(function () {
						Util.assertCompareValues(false, table.showHeaders, "table header");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableOptionsTotalRow_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								tableOptions: { totalRow: true }
							}, callback));
				})
				.then(function () {
					var table = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0);
					ctx.load(table);
					return ctx.sync().then(function () {
						Util.assertCompareValues(true, table.showTotals, "table totals");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableOptionsFirstColumn_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								tableOptions: { firstColumn: true }
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableOptionsLastColumn_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								tableOptions: { lastColumn: true }
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableOptionsBandedRows_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								tableOptions: { bandedRows: true }
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableOptionsBandedColumns_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								tableOptions: { bandedColumns: true }
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableOptionsfilterButton_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.rows = [["a", "b"], ["1", "2"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								tableOptions: { filterButton: true }
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableOptionsUpdate_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["1000.50", "2000.10"], ["1", "2"]];
		var bindingId = "ID_UpdateTblStyle";
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								tableOptions: { totalRow: true }
							}, callback));
				})
				.then(function () {
					var table = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0);
					ctx.load(table);
					return ctx.sync().then(function () {
						Util.assertCompareValues(true, table.showTotals, "table totals");
					})
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.setTableOptionsAsync({ totalRow: false }, callback));
				})
				.then(function () {
					var table = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0);
					ctx.load(table);
					return ctx.sync().then(function () {
						Util.assertCompareValues(false, table.showTotals, "table totals");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableBindingSetDataAsyncTData_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["1000.50", "2000.10"], ["1", "2"]];
		var bindingId = "ID_TblDataAsyncTD";
		var newData = [["123", "456"], ["789", "foo"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					var updateTable = new Office.TableData();
					updateTable.rows = newData;
					return Util.promisify((callback) => value.setDataAsync(updateTable, callback));
				})
				.then(function () {
					var range = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(range);
					return ctx.sync().then(function () {
						Util.assertCompareArray(range.values, newData);
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableBindingSetDataAsyncTDataHeader_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["1000.50", "2000.10"], ["1", "2"]];
		var bindingId = "ID_TblDataAsyncTD";
		var newHeader = [["baz", "contoso"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					var updateTable = new Office.TableData();
					updateTable.headers = newHeader;
					return Util.promisify((callback) => value.setDataAsync(updateTable, callback));
				})
				.then(function () {
					var range = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getHeaderRowRange();
					ctx.load(range);
					return ctx.sync().then(function () {
						Util.assertCompareArray(range.values, newHeader);
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableBindingSetDataAsyncTDataStartCol_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["123", "456"], ["1", "2"]];
		var bindingId = "ID_TblDataAsyncTDStartCol";
		var newDataToSet = [["789"], ["foo"]];
		var newHeader = [["baz"]];
		var newFullData = [["123", "789"], ["1", "foo"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					var updateTable = new Office.TableData();
					updateTable.rows = newDataToSet;
					updateTable.headers = newHeader;
					return Util.promisify((callback) => value.setDataAsync(updateTable, { coercionType: Office.CoercionType.Table, startColumn: 1 }, callback));
				})
				.then(function () {
					var range = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(range);
					return ctx.sync().then(function () {
						Util.assertCompareArray(range.values, newFullData);
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableBindingSetDataAsyncTDataStartRow_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["123", "456"], ["1", "2"]];
		var bindingId = "ID_TblDataAsyncTDStartRow";
		var newDataToSet = [["789", "101112"]];
		var newFullData = [["123", "456"], ["789", "101112"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					var updateTable = new Office.TableData();
					updateTable.rows = newDataToSet;
					return Util.promisify((callback) => value.setDataAsync(updateTable, { coercionType: Office.CoercionType.Table, startRow: 1 }, callback));
				})
				.then(function () {
					var range = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(range);
					return ctx.sync().then(function () {
						Util.assertCompareArray(range.values, newFullData);
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableBindingSetDataAsyncMatrix_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["1000.50", "2000.10"], ["1", "2"]];
		var bindingId = "ID_TblDataAsyncMatrix";
		var newData = [["h1", "h2"], ["123", "456"], ["789", "foo"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.setDataAsync(newData, callback));
				})
				.then(function () {
					var range = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getRange();
					ctx.load(range);
					return ctx.sync().then(function () {
						Util.assertCompareArray(range.values, newData);
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableBindingSetDataForAdHocTable_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.rows = [["1000.50", "2000.10"], ["1", "2"]];
		var bindingId = "ID_AdHocForSetData";
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5:C6");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.setDataAsync(myTable, callback));
				})
				.then(function () {
					var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5:C6");
					ctx.load(range);
					return ctx.sync().then(function () {
						Util.assertCompareArray(range.values, myTable.rows);
					})
				})
				.then(function () {
					return Util.promisify((callback) => Office.context.document.bindings.releaseByIdAsync(bindingId, callback));
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_OfficeJS_TableAddRows_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		var bindingId = "ID_AddRowsTbl";
		var rowsToAdd = [["9", "8"], ["7", "6"]];
		var totalBody = [["a", "b"], ["1", "2"], ["9", "8"], ["7", "6"]]
		var cellNextToTable = [["here"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.workbook.worksheets.getItem("Sheet1").getRange("B8").values = cellNextToTable;
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.addRowsAsync(rowsToAdd, callback));
				})
				.then(function () {
					var tableRange = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(tableRange);
					var nextToTableRange = ctx.workbook.worksheets.getItem("Sheet1").getRange("B10");
					ctx.load(nextToTableRange);
					return ctx.sync().then(function () {
						Util.assertCompareArray(totalBody, tableRange.values);
						Util.assertCompareArray(cellNextToTable, nextToTableRange.values);
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableAddRowsNoHeader_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.rows = [["a", "b"], ["1", "2"]];
		var bindingId = "ID_AddRowsTbl";
		var rowsToAdd = [["9", "8"], ["7", "6"]];
		var totalBody = [["a", "b"], ["1", "2"], ["9", "8"], ["7", "6"]]
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table,
								tableOptions: { headerRow: false }
							}, callback));
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange().select();
					return ctx.sync();
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.addRowsAsync(rowsToAdd, callback));
				})
				.then(function () {
					var tableRange = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(tableRange);
					return ctx.sync().then(function () {
						Util.assertCompareArray(totalBody, tableRange.values);
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableAddCols_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		var bindingId = "ID_AddColsTbl";
		var colsToAdd = [["9"], ["8"]];
		var totalBody = [["a", "b", "9"], ["1", "2", "8"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.addColumnsAsync(colsToAdd, callback));
				})
				.then(function () {
					var tableRange = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(tableRange);
					return ctx.sync().then(function () {
						Util.assertCompareArray(totalBody, tableRange.values);
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableAddColsTData_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		var bindingId = "ID_AddColsTbl";
		var colsToAdd = new Office.TableData();
		colsToAdd.headers = [["baz", "boo"]]
		colsToAdd.rows = [["9", "10"], ["8", "11"]];
		var totalBody = [["a", "b", "9", "10"], ["1", "2", "8", "11"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.addColumnsAsync(colsToAdd, callback));
				})
				.then(function () {
					var tableRange = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(tableRange);
					return ctx.sync().then(function () {
						Util.assertCompareArray(totalBody, tableRange.values);
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableAddColsTDataNoHeader_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		var bindingId = "ID_AddColsTbl";
		var colsToAdd = new Office.TableData();
		colsToAdd.rows = [["9", "10"], ["8", "11"]];
		var totalBody = [["a", "b", "9", "10"], ["1", "2", "8", "11"]];
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.addColumnsAsync(colsToAdd, callback));
				})
				.then(function () {
					var tableRange = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(tableRange);
					return ctx.sync().then(function () {
						Util.assertCompareArray(totalBody, tableRange.values);
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableDeleteAllDataValues_cvt_JScript_V10() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		var bindingId = "ID_DeleteValsTbl";
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.setSelectedDataAsync(myTable,
							{
								coercionType: Office.CoercionType.Table
							}, callback));
				})
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: bindingId }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.deleteAllDataValuesAsync(callback));
				})
				.then(function () {
					var tableRange = ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).getDataBodyRange();
					ctx.load(tableRange);
					return ctx.sync().then(function () {
						Util.assertCompareValues(1, tableRange.rowCount, "rowcount");
						Util.assertCompareValues(2, tableRange.columnCount, "colcount");
					})
				})
				.then(function () {
					ctx.workbook.worksheets.getItem("Sheet1").tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError)
		});
	}
	export function test_OfficeJS_TableDeleteAllDataValuesFailsForAdHocTable_cvt_JScript_V10() {
		Util.clearSheetBefore("Sheet1", () => {
			var ctx = new Excel.RequestContext();
			var range = ctx.workbook.worksheets.getItem("Sheet1").getRange("A3:B5");
			range.select();
			ctx.sync()
				.then(function () {
					return Util.promisify(
						(callback) => Office.context.document.bindings.addFromSelectionAsync(
							Office.BindingType.Table, { id: "TestBinding" }, callback));
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify((callback) => value.deleteAllDataValuesAsync(callback))
						.then(() => { throw new Error("Should have failed"); })
						.catch((error: Office.Error) => {
							if (error.code == 3010) {
								RichApiTest.log.comment("Expected error of " + error.code + ":" + error.message);
							} else {
								Util.throwOfficeError(error);
							}
						});
				})
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_OfficeJS_SheetProtectionAddTable_cvt_JScript_V12() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		var bindingId = "ID_AddRowsTbl";
		var sheetName = "Protection";
		var rangeAddressUnlocked = "B5:C9";
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem(sheetName);
		var range = sheet.getRange("B5");
		Util.clearSheetBefore(sheetName, () => {
			range.select();
			ctx.sync()
				.then(function () {
					sheet.getRange(rangeAddressUnlocked).format.protection.locked = false;
					sheet.protection.protect({ allowAutoFilter: true, allowFormatCells: true });
					return ctx.sync();
				})
				.then(function () {
					return Util.promisify(function (callback) {
						return Office.context.document.setSelectedDataAsync(myTable, {
							coercionType: Office.CoercionType.Table
						}, callback);
					});
				})
				.then(function () {
					var tableRange = sheet.tables.getItemAt(0).getDataBodyRange();
					ctx.load(tableRange);
					return ctx.sync()
						.then(function () {
							Util.assertCompareArray(myTable.rows, tableRange.values);
						});
				})
				.then(function () {
					sheet.protection.unprotect();
					sheet.tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_OfficeJS_SheetProtectionAddTableFails_cvt_JScript_V12() {
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		var sheetName = "Protection";
		var rangeAddressUnlocked = "B5:C9";
		var ctx = new Excel.RequestContext();
		var sheet = ctx.workbook.worksheets.getItem(sheetName);
		var range = sheet.getRange("B5");
		Util.clearSheetBefore(sheetName, () => {
			range.select();
			ctx.sync()
				.then(function () {
					sheet.getRange(rangeAddressUnlocked).format.protection.locked = false;
					sheet.protection.protect({ allowAutoFilter: false, allowFormatCells: true});
					return ctx.sync();
				})
				.then(function () {
					return Util.promisify(function (callback) {
						return Office.context.document.setSelectedDataAsync(myTable, {
							coercionType: Office.CoercionType.Table
						}, callback);
					});
				})
				.then(() => { throw new Error("Should have failed"); })
				.catch(function (error: Office.Error) {
					if (error.code === 8001) {
						RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				})
				.then(function () {
					sheet.protection.unprotect();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_OfficeJS_SheetProtectionAddTableRows_cvt_JScript_V12() {
		var sheetName = "Protection";
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		var bindingId = "ID_AddRowsTbl";
		var rowsToAdd = [["9", "8"], ["7", "6"]];
		var rangeAddressUnlocked = "B5:C9";
		Util.clearSheetBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange("B5");
			range.select();
			ctx.sync()
				.then(function() {
					sheet.getRange(rangeAddressUnlocked).format.protection.locked = false;
					sheet.protection.protect({ allowAutoFilter: true, allowFormatCells: true });
					return ctx.sync();
				})
				.then(function () {
					return Util.promisify(function (callback) {
						return Office.context.document.setSelectedDataAsync(myTable, {
							coercionType: Office.CoercionType.Table
						}, callback);
					});
				})
				.then(function () {
					return Util.promisify(function (callback) { return Office.context.document.bindings.addFromSelectionAsync(Office.BindingType.Table, { id: bindingId }, callback); });
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify(function (callback) { return value.addRowsAsync(rowsToAdd, callback); });
				})
				.then(() => { throw new Error("Should have failed"); })
				.catch(function (error: Office.Error) {
					if (error.code === 8001) {
						RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				})
				.then(function () {
					sheet.protection.unprotect();
					sheet.tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
	export function test_OfficeJS_SheetProtectionAddTableCols_cvt_JScript_V12() {
		var sheetName = "Protection";
		var rangeAddressUnlocked = "B5:E9";
		var myTable = new Office.TableData();
		myTable.headers = ["foo", "bar"];
		myTable.rows = [["a", "b"], ["1", "2"]];
		var bindingId = "ID_AddRowsTbl";
		var colsToAdd = [["9"], ["6"]];
		Util.clearSheetBefore(sheetName, () => {
			var ctx = new Excel.RequestContext();
			var sheet = ctx.workbook.worksheets.getItem(sheetName);
			var range = sheet.getRange("B5");
			range.select();
			ctx.sync()
				.then(function () {
					sheet.getRange(rangeAddressUnlocked).format.protection.locked = false;
					sheet.protection.protect({ allowAutoFilter: true, allowFormatCells: true});
					return ctx.sync();
				})
				.then(function () {
					return Util.promisify(function (callback) {
						return Office.context.document.setSelectedDataAsync(myTable, {
							coercionType: Office.CoercionType.Table
						}, callback);
					});
				})
				.then(function () {
					return Util.promisify(function (callback) { return Office.context.document.bindings.addFromSelectionAsync(Office.BindingType.Table, { id: bindingId }, callback); });
				})
				.then(function (value: Office.TableBinding) {
					return Util.promisify(function (callback) { return value.addColumnsAsync(colsToAdd, callback); });
				})
				.then(() => { throw new Error("Should have failed"); })
				.catch(function (error: Office.Error) {
					if (error.code === 8001) {
						RichApiTest.log.comment("Caught expected error: " + error.code + ": " + error.message);
					} else {
						Util.throwOfficeError(error);
					}
				})
				.then(function () {
					sheet.protection.unprotect();
					sheet.tables.getItemAt(0).delete();
				})
				.then(ctx.sync)
				.then(ExcelTest.pass)
				.catch(ExcelTest.reportError);
		});
	}
}
module ExcelTest {
	export function test_Pivot_GetPivotTables_cvt_COMBridge_V11Pivot() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri));
		var pivotTables = ctx.workbook.pivotTables;
		pivotTables.load();
		var oneName = null;
		var onePivotTable: Excel.PivotTable = null;
		ctx.sync()
			.then(function () {
				for (var i = 0; i < pivotTables.items.length; i++) {
					RichApiTest.log.comment("name=" + pivotTables.items[i].name);
					oneName = pivotTables.items[i].name;
				}
			})
			.then(function () {
				if (oneName) {
					onePivotTable = pivotTables.getItem(oneName);
					onePivotTable.load();
					return ctx.sync();
				}
			})
			.then(function () {
				if (onePivotTable) {
					RichApiTest.log.comment("OnePivot=" + onePivotTable.name);
				}
			})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_GetPivotCaches_cvt_COMBridge_V11Pivot() {
		var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri));
		var pivotCaches = ctx.workbook.pivotCaches;
		pivotCaches.load();
		ctx.sync()
			.then(function () {
				for (var i = 0; i < pivotCaches.items.length; i++) {
					RichApiTest.log.comment("index=" + pivotCaches.items[i].index);
					Util.assert(i == pivotCaches.items[i].index, "Expect index " + i);
				}
			})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotCache$Add_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Util.clearSheetBefore(sheetName, () => {
			var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri));
			var pivotCaches = ctx.workbook.pivotCaches;
			var range = ctx.workbook.worksheets.getItem(sheetName).getRange("A1:C5");
			range.values = [["Category", "Item", "Quantity"], ["Fruit", "Orange", 10], ["Veg", "Broccoli", 15], ["Fruit", "Pear", 20], ["Veg", "Cellery", 30]];
			pivotCaches.add(Excel.PivotTableSourceType.database, range);
			pivotCaches.load();
			ctx.sync()
				.then(function () {
					for (var i = 0; i < pivotCaches.items.length; i++) {
						RichApiTest.log.comment("index=" + pivotCaches.items[i].index);
					}
				})
				.then(pass)
				.catch(reportError);
		})
	}
	export function test_Pivot_PivotTables$AddWithFields_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		var pivotTableName = "PivotTableName" + Math.random();
		Util.clearSheetBefore(sheetName, () => {
			var ctx = new Excel.RequestContext(RichApiTest.RestUtility.getRequestUrlAndHeaderInfo(settings.baseUri));
			var pivotCaches = ctx.workbook.pivotCaches;
			var range = ctx.workbook.worksheets.getItem(sheetName).getRange("A1:C5");
			range.values = [["Category", "Item", "Quantity"], ["Fruit", "Orange", 10], ["Veg", "Broccoli", 15], ["Fruit", "Pear", 20], ["Veg", "Cellery", 30]];
			pivotCaches.load();
			var pivotCache = pivotCaches.add(Excel.PivotTableSourceType.database, range);
			var targetRange = range.getOffsetRange(5, 5);
			var pt = ctx.workbook.pivotTables.add(pivotTableName, targetRange, pivotCache);
			var fieldCategory = pt.pivotFields.getItem("Category");
			fieldCategory.orientation = Excel.PivotFieldOrientation.rowField;
			fieldCategory.position = 0;
			var fieldItem = pt.pivotFields.getItem("Item");
			fieldItem.orientation = Excel.PivotFieldOrientation.rowField;
			fieldItem.position = 1;
			var fieldQuantity = pt.pivotFields.getItem("Quantity");
			pt.addDataField(fieldQuantity, "Sum of Quantity", Excel.ConsolidationFunction.sum);
			ctx.workbook.pivotTables.load();
			ctx.sync()
				.then(function () {
					for (var i = 0; i < pivotCaches.items.length; i++) {
						RichApiTest.log.comment("index=" + pivotCaches.items[i].index);
					}
					for (var i = 0; i < ctx.workbook.pivotTables.items.length; i++) {
						RichApiTest.log.comment("name=" + ctx.workbook.pivotTables.items[i].name);
					}
				})
				.then(pass)
				.catch(reportError);
		})
	}
	export function test_Pivot_ColumnField$Properties_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			var pivotField = pivotTable.pivotFields.getItem("Product");
			pivotField.load();
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment("PivotTable: '" + pivotTable.name + "'");
					RichApiTest.log.comment("PivotField properties: '" + JSON.stringify(pivotField) + "'");
					Util.assertCompareValues(Excel.PivotFieldOrientation.columnField, pivotField.orientation, "Orientation");
					Util.assertCompareValues(0, pivotField.position, "Position");
					Util.assertCompareValues(null, pivotField.numberFormat, "NumberFormat");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_RowField$Properties_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			var pivotField = pivotTable.pivotFields.getItem("Date");
			pivotField.load();
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment("PivotTable: '" + pivotTable.name + "'");
					RichApiTest.log.comment("PivotField properties: '" + JSON.stringify(pivotField) + "'");
					Util.assertCompareValues(Excel.PivotFieldOrientation.rowField, pivotField.orientation, "Orientation");
					Util.assertCompareValues(1, pivotField.position, "Position");
					Util.assertCompareValues("d-mmm", pivotField.numberFormat, "NumberFormat");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_DataField$Properties_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			var pivotField = pivotTable.pivotFields.getItem("Sum of Price per Unit");
			pivotField.load();
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment("PivotTable: '" + pivotTable.name + "'");
					RichApiTest.log.comment("PivotField properties: '" + JSON.stringify(pivotField) + "'");
					Util.assertCompareValues(Excel.PivotFieldOrientation.dataField, pivotField.orientation, "Orientation");
					Util.assertCompareValues(0, pivotField.position, "Position");
					Util.assertCompareValues("$#,##0.00", pivotField.numberFormat, "NumberFormat");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$GetDataField_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			var pivotField = pivotTable.getDataField(0);
			pivotField.load();
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment("PivotTable: '" + pivotTable.name + "'");
					RichApiTest.log.comment("PivotField properties: '" + JSON.stringify(pivotField) + "'");
					Util.assertCompareValues(Excel.PivotFieldOrientation.dataField, pivotField.orientation, "Orientation");
					Util.assertCompareValues(0, pivotField.position, "Position");
					Util.assertCompareValues("$#,##0.00", pivotField.numberFormat, "NumberFormat");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotField$PivotItems_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			var pivotField = pivotTable.pivotFields.getItem("Months");
			pivotField.load();
			var pivotItems = pivotField.pivotItems;
			pivotItems.load();
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment("PivotTable: '" + pivotTable.name + "'");
					for (var i = 0; i < pivotItems.items.length; i++) {
						RichApiTest.log.comment("PivotItem properties: '" + JSON.stringify(pivotItems.items[i]) + "'");
					}
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotItemProperties_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			var pivotField = pivotTable.pivotFields.getItem("Months");
			pivotField.load();
			var pivotItem = pivotField.pivotItems.getItem("Feb");
			pivotItem.load();
			return ctx.sync()
				.then(function () {
					RichApiTest.log.comment("PivotTable: '" + pivotTable.name + "'");
					RichApiTest.log.comment("PivotItem properties: '" + JSON.stringify(pivotItem) + "'");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$NamingProperties_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					pivotTable.compactLayoutColumnHeader = "foobar";
					pivotTable.compactLayoutRowHeader = "barfoo";
					pivotTable.grandTotalName = "oofrab";
					ctx.load(pivotTable);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("foobar", pivotTable.compactLayoutColumnHeader, "Column Header");
							Util.assertCompareValues("barfoo", pivotTable.compactLayoutRowHeader, "Row Header");
							Util.assertCompareValues("oofrab", pivotTable.grandTotalName, "Grand Total");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotTable$DisplayContextTooltips_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, pivotTable.displayContextTooltips, "Default value of displayContextTooltips is true");
					pivotTable.displayContextTooltips = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.displayContextTooltips, "PivotTable.displayContextTooltips is now false");
					pivotTable.displayContextTooltips = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.displayContextTooltips, "PivotTable.displayContextTooltips is back to true");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$DisplayErrorString_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(false, pivotTable.displayErrorString, "Default value of displayErrorString is false");
					Util.assertCompareValues("", pivotTable.errorString, "Default value of errorString is ''");
					pivotTable.displayErrorString = true;
					pivotTable.errorString = "test123";
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.displayErrorString, "PivotTable.displayErrorString is now true");
					Util.assertCompareValues("test123", pivotTable.errorString, "PivotTable.errorString is now 'test123'");
					pivotTable.displayErrorString = false;
					pivotTable.errorString = "";
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.displayErrorString, "PivotTable.displayErrorString is back to false");
					Util.assertCompareValues("", pivotTable.errorString, "PivotTable.errorString is back to ''");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$DisplayFieldCaptions_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, pivotTable.displayFieldCaptions, "Default value of displayFieldCaptions is true");
					pivotTable.displayFieldCaptions = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.displayFieldCaptions, "PivotTable.displayFieldCaptions is now false");
					pivotTable.displayFieldCaptions = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.displayFieldCaptions, "PivotTable.displayFieldCaptions is back to true");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$DisplayNullString_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, pivotTable.displayNullString, "Default value of displayNullString is true");
					Util.assertCompareValues("", pivotTable.nullString, "Default value of nullString is ''");
					pivotTable.nullString = "test123";
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues("test123", pivotTable.nullString, "PivotTable.nullString is now 'test123'");
					pivotTable.displayNullString = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.displayNullString, "PivotTable.displayNullString is now false");
					pivotTable.nullString = "";
					pivotTable.displayNullString = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.displayNullString, "PivotTable.displayNullString is back to true");
					Util.assertCompareValues("", pivotTable.nullString, "PivotTable.nullString is back to ''");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$EnableFieldDialog_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, pivotTable.enableFieldDialog, "Default value of enableFieldDialog is true");
					pivotTable.enableFieldDialog = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.enableFieldDialog, "PivotTable.enableFieldDialog is now false");
					pivotTable.enableFieldDialog = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.enableFieldDialog, "PivotTable.enableFieldDialog is back to true");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$EnableFieldList_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, pivotTable.enableFieldList, "Default value of enableFieldList is true");
					pivotTable.enableFieldList = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.enableFieldList, "PivotTable.enableFieldList is now false");
					pivotTable.enableFieldList = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.enableFieldList, "PivotTable.enableFieldList is back to true");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$EnableWizard_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, pivotTable.enableWizard, "Default value of enableWizard is true");
					pivotTable.enableWizard = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.enableWizard, "PivotTable.enableWizard is now false");
					pivotTable.enableWizard = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.enableWizard, "PivotTable.enableWizard is back to true");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$AllowMultipleFilters_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(false, pivotTable.allowMultipleFilters, "Default value of allowMultipleFilters is false");
					pivotTable.allowMultipleFilters = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.allowMultipleFilters, "PivotTable.allowMultipleFilters is now true");
					pivotTable.allowMultipleFilters = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.allowMultipleFilters, "PivotTable.allowMultipleFilters is back to false");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$AlternativeText_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(null, pivotTable.alternativeText, "Default value of alternativeText is null");
					pivotTable.alternativeText = "test123";
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues("test123", pivotTable.alternativeText, "PivotTable.alternativeText is now 'test123'");
					pivotTable.alternativeText = null;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(null, pivotTable.alternativeText, "PivotTable.alternativeText is back to null");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$ColumnGrandTotals_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, pivotTable.columnGrandTotals, "Default value of columnGrandTotals is true");
					pivotTable.columnGrandTotals = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.columnGrandTotals, "PivotTable.columnGrandTotals is now false");
					pivotTable.columnGrandTotals = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.columnGrandTotals, "PivotTable.columnGrandTotals is back to true");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$RowGrandTotals_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, pivotTable.rowGrandTotals, "Default value of rowGrandTotals is true");
					pivotTable.rowGrandTotals = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.rowGrandTotals, "PivotTable.rowGrandTotals is now false");
					pivotTable.rowGrandTotals = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.rowGrandTotals, "PivotTable.rowGrandTotals is back to true");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$GetColumnRange_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			var columnRange = pivotTable.getColumnRange();
			columnRange.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("PivotTable!I2:L3", columnRange.address, "PivotTable columnRange");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	export function test_Pivot_PivotTable$GetRowRange_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			var rowRange = pivotTable.getRowRange();
			rowRange.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("PivotTable!H3:H13", rowRange.address, "PivotTable rowRange");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	
	export function test_Pivot_PivotTable$GetEntireRange_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			var range = pivotTable.getEntireRange();
			range.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("PivotTable!H2:L13", range.address, "PivotTable range");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$FieldListSortAscending_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(false, pivotTable.fieldListSortAscending, "Default value of fieldListSortAscending is false");
					pivotTable.fieldListSortAscending = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.fieldListSortAscending, "PivotTable.fieldListSortAscending is now true");
					pivotTable.fieldListSortAscending = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.fieldListSortAscending, "PivotTable.fieldListSortAscending is back to false");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$HasAutoFormat_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(true, pivotTable.hasAutoFormat, "Default value of hasAutoFormat is true");
					pivotTable.hasAutoFormat = false;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(false, pivotTable.hasAutoFormat, "PivotTable.hasAutoFormat is now false");
					pivotTable.hasAutoFormat = true;
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(true, pivotTable.hasAutoFormat, "PivotTable.hasAutoFormat is back to true");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$Hidden_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(false, pivotTable.hidden, "PivotTable hidden (read-only)");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$PreserveFormatting_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "preserveFormatting", true);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$PrintDrillIndicators_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "printDrillIndicators", false);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$PrintTitles_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "printTitles", false);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$RefreshDateAndRefreshName_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					
					Util.assert(pivotTable.refreshName !== null, "Check if pivotTable.refreshName is loaded");
					Util.assert(pivotTable.refreshDate !== null, "Check if pivotTable.refreshDate is loaded");
					Util.assert(Object.prototype.toString.call(pivotTable.refreshDate).slice(8, -1) === "Date", "Check if pivotTable.refreshDate is of type Date");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$RepeatItemsOnEachPrintedPage_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "repeatItemsOnEachPrintedPage", true);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$SaveData_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "saveData", true);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$ShowDrillIndicators_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "showDrillIndicators", true);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$ShowPageMultipleItemLabel_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "showPageMultipleItemLabel", true);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$ShowTableStyleColumnHeaders_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "showTableStyleColumnHeaders", true);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$ShowTableStyleColumnStripes_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "showTableStyleColumnStripes", false);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$ShowTableStyleLastColumn_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "showTableStyleLastColumn", true);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$ShowTableStyleRowHeaders_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "showTableStyleRowHeaders", true);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$ShowTableStyleRowStripes_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "showTableStyleRowStripes", false);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$ShowValuesRow_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "showValuesRow", false);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$SmallGrid_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "smallGrid", false);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$SortUsingCustomLists_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "sortUsingCustomLists", true);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$SubtotalHiddenPageItems_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(false, pivotTable.subtotalHiddenPageItems, "PivotTable.subtotalHiddenPageItems");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$Summary_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testProperty(ctx, pivotTable, "PivotTable", "summary", null, "A table that holds fruit sales by month");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$Tag_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testProperty(ctx, pivotTable, "PivotTable", "tag", "", "test-tag");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$TotalsAnnotation_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues(false, pivotTable.subtotalHiddenPageItems, "PivotTable.subtotalHiddenPageItems");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$VacatedStyle_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testProperty(ctx, pivotTable, "PivotTable", "vacatedStyle", "", "BlackAndBlue");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$Value_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testProperty(ctx, pivotTable, "PivotTable", "value", "PivotTable1", "FooBarBaz");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$RefreshTable_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			var refreshDate = null;
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					refreshDate = pivotTable.refreshDate;
					pivotTable.refreshTable();
					pivotTable.load();
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValuesNotEqual(refreshDate.valueOf(), pivotTable.refreshDate.valueOf(), "Test refreshDate has been updated with pivotTable.refreshTable()");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$Update_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					pivotTable.update();
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$GetDataPivotField_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			var dataPivotField = null;
			return ctx.sync()
				.then(function () {
					dataPivotField = pivotTable.getDataPivotField();
					dataPivotField.load();
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues("foo", dataPivotField.name, "PivotTable.getDataPivotField()");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$InGridDropZones_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "inGridDropZones", false);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$PivotSelect_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var range;
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					pivotTable.pivotSelect("Months[Jan]", "LabelOnly");
					range = ctx.workbook.getSelectedRange();
					range.load();
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues("PivotTable!H4:H8", range.address, "PivotTable.pivotSelect()");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$RowAxisLayout_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.rowAxisLayout("TabularRow");
			return ctx.sync();
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$EnableDataValueEditing_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "enableDataValueEditing", false);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$ManualUpdate_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			return ctx.sync()
				.then(function () {
					return Util.testBoolProperty(ctx, pivotTable, "PivotTable", "manualUpdate", false);
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$GetPageRange_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("GroupedPivotTable").pivotTables.getItem("PivotTable1");
			var pageRange = pivotTable.getPageRange();
			pageRange.load();
			return ctx.sync()
				.then(function () {
					Util.assertCompareValues("GroupedPivotTable!H1:I1", pageRange.address, "PivotTable.getPageRange()");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotField$GetVisibleFields_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			var visibleFields = pivotTable.getVisibleFields();
			var count = null;
			visibleFields.load();
			return ctx.sync()
				.then(function () {
					count = visibleFields.getCount();
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(4, count.value, "PivotTable.getVisibleFields()");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$RepeatAllLabels_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.repeatAllLabels(Excel.PivotFieldRepeatLabels.repeatLabels);
			return ctx.sync();
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotTable$SubtotalLocation_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("PivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.subtotalLocation(Excel.SubtotalLocationType.atTop);
			return ctx.sync();
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_DataField$ChangeFunction_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var dataField = pivotTable.getDataField(0);
					dataField.aggregationFunction = Excel.ConsolidationFunction.average;
					dataField.caption = "Average of Quantity";
					ctx.load(dataField);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.ConsolidationFunction.average, dataField.aggregationFunction, "DataField Function");
							Util.assertCompareValues("Average of Quantity", dataField.caption, "DataField Caption");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_DataField$ChangeCalculation_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var dataField = pivotTable.getDataField(0);
					dataField.calculation = Excel.PivotFieldCalculation.percentOfParentRow;
					ctx.load(dataField);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.PivotFieldCalculation.percentOfParentRow, dataField.calculation, "DataField Calculation");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_DataField$ChangeCalculationRunningTotal_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var dataField = pivotTable.getDataField(0);
					dataField.calculation = Excel.PivotFieldCalculation.runningTotal;
					ctx.load(dataField);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.PivotFieldCalculation.runningTotal, dataField.calculation, "DataField Calculation");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_RowFieldItem$ShowDetail_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, false)
				.then(function (pivotTable: Excel.PivotTable) {
					var rowField = pivotTable.pivotFields.getItem("Months");
					rowField.showDetail = false;
					var janItem = rowField.pivotItems.getItem("Jan");
					ctx.load(janItem);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(false, janItem.showDetail, "ShowDetail");
							janItem.showDetail = true;
							ctx.load(janItem);
							return ctx.sync();
						})
						.then(function () {
							Util.assertCompareValues(true, janItem.showDetail, "ShowDetail after change");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	export function test_Pivot_PivotField$SubtotalsAuto_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Category");
					fieldCategory.orientation = Excel.PivotFieldOrientation.columnField;
					fieldCategory.position = 0;
					fieldCategory.subtotals = {
						automatic: true
					}
					ctx.load(fieldCategory);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, fieldCategory.subtotals.automatic, "Automatic");
							Util.assertCompareValues(false, fieldCategory.subtotals.sum, "Sum");
							Util.assertCompareValues(false, fieldCategory.subtotals.count, "Count");
							Util.assertCompareValues(false, fieldCategory.subtotals.average, "Average");
							Util.assertCompareValues(false, fieldCategory.subtotals.max, "Max");
							Util.assertCompareValues(false, fieldCategory.subtotals.min, "Min");
							Util.assertCompareValues(false, fieldCategory.subtotals.product, "Product");
							Util.assertCompareValues(false, fieldCategory.subtotals.countNumbers, "CountNumbers");
							Util.assertCompareValues(false, fieldCategory.subtotals.standardDeviation, "StdDev");
							Util.assertCompareValues(false, fieldCategory.subtotals.standardDeviationP, "StdDevP");
							Util.assertCompareValues(false, fieldCategory.subtotals.variation, "Variation");
							Util.assertCompareValues(false, fieldCategory.subtotals.variationP, "VariationP");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$SubtotalsAutoIgnoreOthers_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Category");
					fieldCategory.orientation = Excel.PivotFieldOrientation.columnField;
					fieldCategory.position = 0;
					fieldCategory.subtotals = {
						automatic: true,
						sum: true,
						countNumbers: true
					}
					ctx.load(fieldCategory);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, fieldCategory.subtotals.automatic, "Automatic");
							Util.assertCompareValues(false, fieldCategory.subtotals.sum, "Sum");
							Util.assertCompareValues(false, fieldCategory.subtotals.count, "Count");
							Util.assertCompareValues(false, fieldCategory.subtotals.average, "Average");
							Util.assertCompareValues(false, fieldCategory.subtotals.max, "Max");
							Util.assertCompareValues(false, fieldCategory.subtotals.min, "Min");
							Util.assertCompareValues(false, fieldCategory.subtotals.product, "Product");
							Util.assertCompareValues(false, fieldCategory.subtotals.countNumbers, "CountNumbers");
							Util.assertCompareValues(false, fieldCategory.subtotals.standardDeviation, "StdDev");
							Util.assertCompareValues(false, fieldCategory.subtotals.standardDeviationP, "StdDevP");
							Util.assertCompareValues(false, fieldCategory.subtotals.variation, "Variation");
							Util.assertCompareValues(false, fieldCategory.subtotals.variationP, "VariationP");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$SubtotalsAllOff_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Category");
					fieldCategory.orientation = Excel.PivotFieldOrientation.columnField;
					fieldCategory.position = 0;
					fieldCategory.subtotals = {
						automatic: false,
						sum: false,
						count: false,
						average: false,
						max: false,
						min: false,
						product: false,
						countNumbers: false,
						standardDeviation: false,
						standardDeviationP: false,
						variation: false,
						variationP: false,
					}
					ctx.load(fieldCategory);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(false, fieldCategory.subtotals.automatic, "Automatic");
							Util.assertCompareValues(false, fieldCategory.subtotals.sum, "Sum");
							Util.assertCompareValues(false, fieldCategory.subtotals.count, "Count");
							Util.assertCompareValues(false, fieldCategory.subtotals.average, "Average");
							Util.assertCompareValues(false, fieldCategory.subtotals.max, "Max");
							Util.assertCompareValues(false, fieldCategory.subtotals.min, "Min");
							Util.assertCompareValues(false, fieldCategory.subtotals.product, "Product");
							Util.assertCompareValues(false, fieldCategory.subtotals.countNumbers, "CountNumbers");
							Util.assertCompareValues(false, fieldCategory.subtotals.standardDeviation, "StdDev");
							Util.assertCompareValues(false, fieldCategory.subtotals.standardDeviationP, "StdDevP");
							Util.assertCompareValues(false, fieldCategory.subtotals.variation, "Variation");
							Util.assertCompareValues(false, fieldCategory.subtotals.variationP, "VariationP");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$SubtotalsCustomSome_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Category");
					fieldCategory.orientation = Excel.PivotFieldOrientation.columnField;
					fieldCategory.position = 0;
					fieldCategory.subtotals = {
						sum: true,
						average: true,
						standardDeviation: true,
					}
					ctx.load(fieldCategory);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(false, fieldCategory.subtotals.automatic, "Automatic");
							Util.assertCompareValues(true, fieldCategory.subtotals.sum, "Sum");
							Util.assertCompareValues(false, fieldCategory.subtotals.count, "Count");
							Util.assertCompareValues(true, fieldCategory.subtotals.average, "Average");
							Util.assertCompareValues(false, fieldCategory.subtotals.max, "Max");
							Util.assertCompareValues(false, fieldCategory.subtotals.min, "Min");
							Util.assertCompareValues(false, fieldCategory.subtotals.product, "Product");
							Util.assertCompareValues(false, fieldCategory.subtotals.countNumbers, "CountNumbers");
							Util.assertCompareValues(true, fieldCategory.subtotals.standardDeviation, "StdDev");
							Util.assertCompareValues(false, fieldCategory.subtotals.standardDeviationP, "StdDevP");
							Util.assertCompareValues(false, fieldCategory.subtotals.variation, "Variation");
							Util.assertCompareValues(false, fieldCategory.subtotals.variationP, "VariationP");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$SubtotalsCustomAll_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Category");
					fieldCategory.orientation = Excel.PivotFieldOrientation.columnField;
					fieldCategory.position = 0;
					fieldCategory.subtotals = {
						automatic: false,
						sum: true,
						count: true,
						average: true,
						max: true,
						min: true,
						product: true,
						countNumbers: true,
						standardDeviation: true,
						standardDeviationP: true,
						variation: true,
						variationP: true,
					}
					ctx.load(fieldCategory);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(false, fieldCategory.subtotals.automatic, "Automatic");
							Util.assertCompareValues(true, fieldCategory.subtotals.sum, "Sum");
							Util.assertCompareValues(true, fieldCategory.subtotals.count, "Count");
							Util.assertCompareValues(true, fieldCategory.subtotals.average, "Average");
							Util.assertCompareValues(true, fieldCategory.subtotals.max, "Max");
							Util.assertCompareValues(true, fieldCategory.subtotals.min, "Min");
							Util.assertCompareValues(true, fieldCategory.subtotals.product, "Product");
							Util.assertCompareValues(true, fieldCategory.subtotals.countNumbers, "CountNumbers");
							Util.assertCompareValues(true, fieldCategory.subtotals.standardDeviation, "StdDev");
							Util.assertCompareValues(true, fieldCategory.subtotals.standardDeviationP, "StdDevP");
							Util.assertCompareValues(true, fieldCategory.subtotals.variation, "Variation");
							Util.assertCompareValues(true, fieldCategory.subtotals.variationP, "VariationP");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$PageField_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Category");
					fieldCategory.orientation = Excel.PivotFieldOrientation.pageField;
					fieldCategory.enableMultiplePageItems = true;
					var vegItem = fieldCategory.pivotItems.getItem("Veg");
					vegItem.visible = false;
					var fruitItem = fieldCategory.pivotItems.getItem("Fruit");
					ctx.load(fieldCategory);
					ctx.load(fruitItem);
					ctx.load(vegItem);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, fieldCategory.enableMultiplePageItems, "Multiple page items");
							Util.assertCompareValues(false, vegItem.visible, "Veg category visibility");
							Util.assertCompareValues(true, fruitItem.visible, "Fruit Category visibility");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$DataRange_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Item");
					var fieldRange = fieldCategory.getDataRange();
					ctx.load(fieldRange);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("Sheet1!H8:K8", fieldRange.address, "Range");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$GetChildField_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("GroupedPivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			var product2Field = pivotTable.pivotFields.getItem("Product2");
			var childField = null;
			product2Field.load();
			return ctx.sync()
				.then(function () {
					childField = product2Field.getChildField();
					childField.load();
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues("Product", childField.name, "PivotField.getChildField()");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotField$GetChildItems_cvt_COMBridge_V11Pivot() {
		Excel.run(function (ctx) {
			var pivotTable = ctx.workbook.worksheets.getItem("GroupedPivotTable").pivotTables.getItem("PivotTable1");
			pivotTable.load();
			var productField = pivotTable.pivotFields.getItem("Product");
			var childItems = null;
			var count = null;
			productField.load();
			return ctx.sync()
				.then(function () {
					childItems = productField.getChildItems();
					childItems.load();
					count = childItems.getCount();
					return ctx.sync();
				})
				.then(function () {
					Util.assertCompareValues(2, count.value, "PivotField.getChildItems()");
				})
		})
			.then(ExcelTest.pass)
			.catch(ExcelTest.reportError);
	}
	export function test_Pivot_PivotItem$VariousProperties_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Item");
					var vegItem = fieldCategory.pivotItems.getItem("Orange");
					ctx.load(fieldCategory);
					ctx.load(vegItem);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(true, vegItem.visible, "visibility");
							Util.assertCompareValues(false, vegItem.calculated, "Calculated");
							Util.assertCompareValues(2, vegItem.recordCount, "RecordCount");
							Util.assertCompareValues(null, vegItem.drilledDown, "DrilledDown");
							Util.assertCompareValues(true, vegItem.showDetail, "ShowDetaul");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotItem$DataRange_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Item");
					var vegItem = fieldCategory.pivotItems.getItem("Orange");
					var vegRange = vegItem.getDataRange();
					ctx.load(vegRange);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues("Sheet1!J9:J14", vegRange.address, "Range");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotItem$Value_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Item");
					var vegItem = fieldCategory.pivotItems.getItem("Orange");
					ctx.load(vegItem);
					return ctx.sync()
						.then(function () {
							Util.testProperty(ctx, vegItem, "PivotItem", "value", "Orange", "foobar");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotChart$AddChart_cvt_COMBridge_V11Pivot() {
		var sheetName = "PivotChart";
		var pivotChart = null;
		Util.removeAllChartsBefore(sheetName, function () {
			Excel.run(function (ctx) {
				return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
					.then(function (pivotTable: Excel.PivotTable) {
						var pivotTableWorksheet = pivotTable.worksheet;
						return ctx.sync()
							.then(function () {
								pivotChart = pivotTable.addChart("ColumnClustered", "auto");
								pivotChart.load("worksheet");
								return ctx.sync();
							})
							.then(function () {
								Util.assertCompareValues(pivotTableWorksheet.id, pivotChart.worksheet.id, "Pivot Chart worksheet");
							})
					})
			})
			.then(pass)
			.catch(reportError)
		})
	}
	export function test_Pivot_PivotChart$AddChartWithPageField_cvt_COMBridge_V11Pivot() {
		var sheetName = "PivotChart";
		var pivotChart = null;
		Util.removeAllChartsBefore(sheetName, function () {
			Excel.run(function (ctx) {
				return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
					.then(function (pivotTable: Excel.PivotTable) {
						var pivotTableWorksheet = pivotTable.worksheet;
						var fieldCategory = pivotTable.pivotFields.getItem("Category");
						fieldCategory.orientation = Excel.PivotFieldOrientation.pageField;
						ctx.load(fieldCategory);
						return ctx.sync()
							.then(function () {
								pivotChart = pivotTable.addChart("ColumnClustered", "auto");
								pivotChart.load("worksheet");
								return ctx.sync();
							})
							.then(function () {
								Util.assertCompareValues(pivotTableWorksheet.id, pivotChart.worksheet.id, "Pivot Chart worksheet");
							})
					})
			})
			.then(pass)
			.catch(reportError)
		})
	}
	export function test_Pivot_PivotChart$AddChartNoSeriesBy_cvt_COMBridge_V11Pivot() {
		var sheetName = "PivotChart";
		var pivotChart = null;
		Util.removeAllChartsBefore(sheetName, function () {
			Excel.run(function (ctx) {
				return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
					.then(function (pivotTable: Excel.PivotTable) {
						var pivotTableWorksheet = pivotTable.worksheet;
						return ctx.sync()
							.then(function () {
								pivotChart = pivotTable.addChart("ColumnClustered");
								pivotChart.load("worksheet");
								return ctx.sync();
							})
							.then(function () {
								Util.assertCompareValues(pivotTableWorksheet.id, pivotChart.worksheet.id, "Pivot Chart worksheet");
							})
					})
			})
				.then(pass)
				.catch(reportError)
		})
	}
	export function test_Pivot_PivotChart$AddChartWithInvalidType_cvt_COMBridge_V11Pivot() {
		var sheetName = "PivotChart";
		var pivotChart = null;
		Util.removeAllChartsBefore(sheetName, function () {
			Excel.run(function (ctx) {
				return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
					.then(function (pivotTable: Excel.PivotTable) {
						var pivotTableWorksheet = pivotTable.worksheet;
						return ctx.sync()
							.then(function () {
								pivotChart = pivotTable.addChart("XYScatter", "auto");
								pivotChart.load("worksheet");
								return ctx.sync();
							})
							.then(function () {
								RichApiTest.log.fail();
								RichApiTest.log.done(true);
							})
							.catch(function (e) {
								Util.assertCompareValues(e.code, "InvalidArgument");
								RichApiTest.log.pass();
								RichApiTest.log.done(true);
							})
					})
			})
				.then(pass)
				.catch(reportError)
		})
	}
	export function test_Pivot_PivotField$AutoSort_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldDate = pivotTable.pivotFields.getItem("Date");
					fieldDate.autoSort(Excel.SortOrder.descending, "Date");
					var fieldLoad = pivotTable.pivotFields.getItem("Date");
					ctx.load(fieldLoad);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.SortOrder.descending, fieldLoad.autoSortOrder, "SortOrder");
							Util.assertCompareValues("Date", fieldLoad.autoSortField, "Sort By Field");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$AutoSortAscending_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, false)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldDate = pivotTable.pivotFields.getItem("Months");
					fieldDate.autoSort(Excel.SortOrder.ascending, "Months");
					var fieldLoad = pivotTable.pivotFields.getItem("Months");
					ctx.load(fieldLoad);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.SortOrder.ascending, fieldLoad.autoSortOrder, "SortOrder");
							Util.assertCompareValues("Months", fieldLoad.autoSortField, "Sort By Field");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$AutoSortColumnBySum_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, false)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldDate = pivotTable.pivotFields.getItem("Category");
					fieldDate.autoSort(Excel.SortOrder.ascending, "Sum of Quantity");
					var fieldLoad = pivotTable.pivotFields.getItem("Category");
					ctx.load(fieldLoad);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(Excel.SortOrder.ascending, fieldLoad.autoSortOrder, "SortOrder");
							Util.assertCompareValues("Sum of Quantity", fieldLoad.autoSortField, "Sort By Field");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$PageFieldCurrentPage_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Category");
					fieldCategory.orientation = Excel.PivotFieldOrientation.pageField;
					var vegItem = fieldCategory.pivotItems.getItem("Veg");
					fieldCategory.currentPage = vegItem;
					var fruitItem = fieldCategory.pivotItems.getItem("Fruit");
					ctx.load(fieldCategory);
					ctx.load(fruitItem);
					ctx.load(vegItem);
					var loadedCurrentPageItem = fieldCategory.currentPage;
					ctx.load(loadedCurrentPageItem);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(false, fieldCategory.enableMultiplePageItems, "Multiple page items");
							Util.assertCompareValues(true, vegItem.visible, "Veg category visibility");
							Util.assertCompareValues(false, fruitItem.visible, "Fruit Category visibility");
							Util.assertCompareValues("Veg", loadedCurrentPageItem.sourceName, "CurrentPage Name");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export function test_Pivot_PivotField$PageFieldCurrentPageDate_cvt_COMBridge_V11Pivot() {
		var sheetName = "Sheet1";
		Excel.run(function (ctx) {
			return Util.clearSheetAndAddPivotTable(ctx, sheetName, true)
				.then(function (pivotTable: Excel.PivotTable) {
					var fieldCategory = pivotTable.pivotFields.getItem("Category");
					fieldCategory.orientation = Excel.PivotFieldOrientation.rowField;
					var fieldDate = pivotTable.pivotFields.getItem("Date");
					fieldDate.orientation = Excel.PivotFieldOrientation.pageField;
					var dateItem = fieldDate.pivotItems.getItem("2/10/2017");
					fieldDate.currentPage = dateItem;
					var dateItemHidden = fieldDate.pivotItems.getItem("1/3/2017");
					ctx.load(fieldDate);
					ctx.load(dateItem);
					ctx.load(dateItemHidden);
					var loadedCurrentPageItem = fieldDate.currentPage;
					ctx.load(loadedCurrentPageItem);
					return ctx.sync()
						.then(function () {
							Util.assertCompareValues(false, fieldDate.enableMultiplePageItems, "Multiple page items");
							Util.assertCompareValues(true, dateItem.visible, "2/10/2017 visibility");
							Util.assertCompareValues(false, dateItemHidden.visible, "1/3/2017 visibility");
							Util.assertCompareValues("2/10/2017", loadedCurrentPageItem.name, "CurrentPage Name");
						})
				})
		})
			.then(pass)
			.catch(reportError);
	}
	export async function test_Pivot_PivotCache$GetPivotCacheAddress_cvt_COMBridge_V12Pivot() {
		await Excel.run(async (ctx) => {
			var pivotCache = ctx.workbook.pivotCaches.getItemAt(0);
			ctx.load(pivotCache);
			await ctx.sync();
			Util.assertCompareValues("Table11", pivotCache.sourceData, "Pivot Source Data");
		});
	}
}
