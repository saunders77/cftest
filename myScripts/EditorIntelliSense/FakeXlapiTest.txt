declare namespace FakeExcelTest {
    function testRequestMessage(): void;
    function testFakeResponse(): void;
    function testSimpleRequest(): void;
    function testUnicode(): void;
    function testWorkbook(): void;
    function testUpdateValue(): void;
    function testUpdateText(): void;
    function testObjectNewAndObjectAsParameter(): void;
    function testArrayValue(): void;
    function testValue2DArray(): void;
    function testText2DArray(): void;
    function testValueArray2(): void;
    function testErrorWorksheet(): void;
    function testErrorWorksheet2(): void;
    function testErrorWorksheet2_rest(): void;
    function testErrorMethodAccessDenied(): void;
    function testErrorMethodBounds(): void;
    function testErrorMethod2Abort(): void;
    function testErrorMethod2AccessDenied(): void;
    function testObjectCount(): void;
    function testObjectCountSimple(): void;
    function testTraceFailure(): void;
    function test_tracehandler_success(): void;
    function test_tracehandler_failure(): void;
    function test_error_causedbyload(): void;
    function test_error_causedbyexpand(): void;
    function test_error_getNullablePrimitiveShouldNotFail(): void;
    function test_error_getNullablePrimitiveShouldNotFail$extension(): void;
    function test_error_ErrorMethodAccessDenied(): void;
    function test_error_ErrorMethodBounds(): void;
    function test_error_ErrorMethodBounds2(): void;
    function test_error_ErrorMethodBounds3(): void;
    function testWorksheetCollection(): void;
    function testWorksheetCollectionThenOneItem(): void;
    function testWorksheetCollectionActiveWorksheetActiveCell(): void;
    function testWorksheetCollectionAdd(): void;
    function testWorksheetCollection_rest(): void;
    function worksheetCollectionAddMethod_rest(appendAdd: boolean, appendDollar: boolean): void;
    function testWorksheetCollectionAdd_rest(): void;
    function testWorksheetCollectionAddMethod_rest(): void;
    function testWorksheetCollectionAddMethodDollar_rest(): void;
    function testActiveCell(): void;
    function testActiveCellInvalidAfterRequest(): void;
    function logError(error: Error): void;
    function reportError(error: Error): void;
    function pass(): void;
    function assert(condition: boolean, message: string): void;
    function syncExpectError(ctx: OfficeExtension.ClientRequestContext, errorCode: string, errorLocation?: string, statement?: string): OfficeExtension.IPromise<any>;
    function testGetSheets_rest(): void;
    function testPatchRange_rest(): void;
    function testPatchRange2_rest(): void;
    function testGetActiveSheetUsingAwait(): Promise<void>;
    function testGetActiveSheet(): void;
    function testGetActiveSheet_rest(): void;
    function testGetChart(): void;
    function testGetCharts(): void;
    function testGetChartsAndThenUpdate(): void;
    function testCreateChart(): void;
    function testCreateChartAndThenUpdateChart(): void;
    function testCreateChartAndThenUpdateChart2(): void;
    function testAddingOnNoneCollectionObject(): void;
    function testAddingOnNoneCollectionObject$NoLoad(): void;
    function testUpdateChart(): void;
    function testDeleteChart(): void;
    function testGetCharts_rest(): void;
    function testGetChartByName_rest(): void;
    function testGetChartByName2_rest(): void;
    function testGetChartByInt_rest(): void;
    function testPatchChart_rest(): void;
    function testGetChartByType_rest(): void;
    function testGetChartByType2_rest(): void;
    function testGetChartByTypeTitle_rest(): void;
    function testCreateChart_rest(): void;
    function testDeleteChart_rest(): void;
    function testGetAddChart_rest(): void;
    function testPatchAddChart_rest(): void;
    function testDeleteAddChart_rest(): void;
    function testSomeAction_rest(): void;
    function testSomeAction2_rest(): void;
    function testNullable1(): void;
    function testNullable2(): void;
    function test_datatype_EnumArray_JScript(): void;
    function test_datatype_Enum2DArray_JScript(): void;
    function test_datatype_string_REST(): Promise<void>;
    function test_datatype_NumericEnum_JScript(): void;
    function testKeepReference0(): void;
    function testKeepReference1(): void;
    function testKeepReference2(): void;
    function testKeepReferenceNoLoad(): void;
    function testChartsTop(): void;
    function testChartsTopSkip(): void;
    function testChartsTopSkipEnd(): void;
    function testWorksheetsTop(): void;
    function testWorksheetsTopSkip(): void;
    function testWorksheetsTopSkipEnd(): void;
    function testExpand(): void;
    function testSelectOnCollectionWithItemsSlashQuery(): void;
    function testExpand_rest(): void;
    function testSelectExpand(): void;
    function testSelectExpandWithoutExpand(): void;
    function testSelectExpandWithoutExpand2(): void;
    function testSelectExpandError(): void;
    function testSelectExpand_rest(): void;
    function testNotLoaded(): void;
    function testOnAccessSetProperty(): void;
    function testOnAccessLoad(): void;
    function testOnAccessMethod(): void;
    function testChartsForEach(): void;
    function testChartsForEachPageRead(): void;
    function testChartsForEachPageReadWrite(): void;
    function forEachPageAsync(collection: any, pageSize: number, action: (items: Array<any>) => OfficeExtension.IPromise<any>): OfficeExtension.IPromise<any>;
    function forEachPageAsyncOnePage(collection: any, top: number, skip: number, action: (items: Array<any>) => OfficeExtension.IPromise<any>): OfficeExtension.IPromise<any>;
    function testParamValidationBool(): void;
    function testParamValidationInt(): void;
    function testParamValidationDouble(): void;
    function testParamValidationDouble2(): void;
    function testParamValidationString(): void;
    function testParamValidationRange(): void;
    function testObjectPathExp(): void;
    function testObjectPathInvalid(): void;
    function testInvalidDispatchParameter(): void;
    function testInvalidClientContext(): void;
    function testNotLoadedClientResultThrows(): void;
    function testPromisesExecuteAsync(): void;
    function testEnumArray(): void;
    function testWacFind(): void;
    function testRequestFlagHack1(): void;
    function testRequestFlagHack2(): void;
    function testNullRange(): void;
    function testNullRangeLoad(): void;
    function testNullRangeMethod(): void;
    function testNullRangePropertyWithoutLoad(): void;
    function testNullRangePropertyWithLoad(): void;
    function testNullRangeMethodReturnValue(): void;
    function testNullRangePropertyThenNullMethod(): void;
    function testNullRangePropertyThenNullMethod2(): void;
    function testNullRangeReadBeforeSync(): void;
    function testNullRangeExpand(): void;
    function testRangeNotNull(): void;
    function testNullRangeParam(): void;
    function testRange_rest(): void;
    function testNullRangeGet_rest(): void;
    function testNullRangePatch_rest(): void;
    function testNullRangeDelete_rest(): void;
    function testNullChartDelete_rest(): void;
    function testVoidMethod_rest(): void;
    function testScalarMethod_rest(): void;
    function testBlockedMethodKeepReference_rest(): void;
    function testBlockedMethodNotRest_rest(): void;
    function testBlockedMethodIndexer_rest(): void;
    function testBlockedProperty_rest(): void;
    function testExcludedProperty_rest(): void;
    function testExcludedProperty2_rest(): void;
    function testPostToPrimitiveProperty_rest(): void;
    function testPatchToPrimitiveProperty_rest(): void;
    function testPostToObjectProperty_rest(): void;
    function testPostToFunction_rest(): void;
    function testMethodParameter_rest(): void;
    function testMethodParameterInvalid_rest(): void;
    function testExecuteAsyncShortCircuits(): void;
    function testExecuteAsyncAllowsValuePassThrough1(): void;
    function testExecuteAsyncAllowsValuePassThrough2(): void;
    function testExecuteAsyncAllowsValuePassThrough3(): void;
    function testUrlPathEncode(): void;
    function testUrlKeyValueDecode(): void;
    function test_stream_basic(): void;
    function test_matrix_basic(): void;
    function testReferencesAddRemoveArrayOfRefs(): void;
    function test_run_basic(): void;
    function test_run_previousAndSubsequentRefCountsGetReflected(): void;
    function test_run_failsIfDontReturnPromise1(): void;
    function test_run_failsIfDontReturnPromise2(): void;
    function test_run_failsIfDontReturnPromise3(): void;
    function test_run_throwsCorrectly1(): void;
    function test_run_throwsCorrectly2(): void;
    function test_run_invalidatesReferencedObject1(): void;
    function test_run_invalidatesReferencedObject2(): void;
    function test_run_invalidatesReferencedObject3(): void;
    function test_run_canKeepReferenceExplicitly(): void;
    function test_run_doesFinalSyncEvenIfUserForgot(): void;
    function test_run_emulateFailureOnInitialClenaups(): void;
    function test_run_emulateCleanupFailure(): void;
    function testRestOnly_rest(): void;
    function test_complextype_load_JScript(): void;
    function test_complextype_get_REST(): void;
    function test_complextype_arrayinput_JScript(): void;
    function test_complextype_arrayinput_REST(): void;
    function test_complextype_mixedArrayInput_JScript(): void;
    function test_complextype_mixedArrayInputODataType_JScript(): void;
    function test_complextype_mixedArrayInput_REST(): void;
    function test_complextype_propertyset_JScript(): void;
    function test_complextype_methodreturn_JScript(): void;
    function test_complextype_readmethodreturn_JScript(): void;
    function test_complextype_methodreturn_REST(): void;
    function test_complextype_methodreturn2_JScript(): void;
    function test_complextype_methodreturn2_REST(): void;
    function test_range_parameter_REST(): void;
    function test_range_parameter2_REST(): void;
    function test_range_invalidJson_REST(): void;
    function test_application_hasbase_JScript(): void;
    function test_datatype_2DArray_JScript(): void;
    function test_Promise_exposedPromiseWorks_JScript(): void;
    function test_parameter_negativeInt_REST(): void;
    function test_parameter_positiveInt_REST(): void;
    function test_parameter_invalidInt_REST(): void;
    function test_parameter_undefinedParam(): Promise<void>;
    function test_parameter_missingParam(): Promise<void>;
    function test_parameter_moreParam(): Promise<void>;
    function test_identity_retrieveWithoutLoad_JScript(): void;
    function test_event_registration$AddRemoveBeforeSync_JScript(): void;
    function test_event_registration$AddBeforeSyncRemoveAfterSync_JScript(): void;
    function test_event_NoImpactOnTrace$SuccessCase_JScript(): void;
    function test_event_NoImpactOnTrace$ErrorCase_JScript(): void;
    function test_event_handler$EventArg_JScript(): void;
    function test_event_handler$HandlerReturnNull_JScript(): void;
    function test_event_handler$HandlerReturnPromise_JScript(): void;
    function test_event_handler$HandlerReturnOtherValue_JScript(): void;
    function test_event_handler$HandlerThrowError_JScript(): void;
    function test_event_registration$ErrorAfterAddShouldNotFailRegisteration_JScript(): void;
    function test_event_registration$ErrorBeforeAddShouldFailRegisteration_JScript(): void;
    function test_event_registration$RegistrationErrorShouldFailSync(): void;
    function test_event_registration$UnregistrationErrorShouldNotFailSync(): void;
    function test_event_registration$ResolveEventSource_JScript(): void;
    function test_event_registration$UnregistrationErrorThenAddHandlerAgain(): void;
    function test_event_registration$AddTwiceRemoveTwice(): void;
    function test_event_registration$AddTwiceRemoveAll(): void;
    function test_event_richapievent$register_JScript(): void;
    function test_event_richapievent$isRemoteOverride_JScript(): void;
    function test_sessionevent_basic(): void;
    function test_sessionevent_basic$addAndRemove(): void;
    function testGetCountMethod(): void;
    function test_odataid_itemAt(): void;
    function test_unknownApi_primitiveProperty$set(): void;
    function test_unknownApi_primitiveProperty$get(): void;
    function test_unknownApi_objectProperty$load(): void;
    function test_unknownApi_objectProperty$withoutLoad(): void;
    function test_unknownApi_objectProperty$setSubProperty(): void;
    function test_unknownApi_primitiveMethod$invoke(): void;
    function test_unknownApi_objectMethod$invokeWithoutLoad(): void;
    function test_unknownApi_objectMethod$invokeThenLoad(): void;
    function test_unknownApi_objectMethod$invokeThenSetSubProperty(): void;
    function test_recursive_load$depth1(): void;
    function test_recursive_load$depth2(): void;
    function test_recursive_load$depth3(): void;
    function test_recursive_load$SectionWithCharts(): void;
    function test_recursive_load$SectionWithoutCharts(): void;
    function test_recursive_load$SectionWithoutChartsButExpandOnCharts(): void;
    function test_date_arg$date(): void;
    function test_date_arg$date2(): void;
    function test_date_arg$string(): void;
    function test_date_arg$stringWithoutMilliseconds(): void;
    function test_date_arg$null(): void;
    function test_date_arg$nullForNullable(): void;
    function test_date_arg$array(): void;
    function test_date_arg$invalidString(): void;
    function test_date_arg$invalidNumberString(): void;
    function test_date_arg$invalidNotCompleteDate(): void;
    function test_date_prop$load(): void;
    function test_date_prop$set(): void;
    function test_namevaluepairs_input_JScript(): void;
    function test_namevaluepairs_input_REST(): void;
    function test_namevaluepairs_inputAndOutput_JScript(): void;
    function test_namevaluepairs_inputAndOutput_REST(): void;
    function testOdataIdUsingItemForIndexerName(): void;
    function test_json_parse(): void;
    function test_json_stringify(): void;
    function test_json_stringifystruct(): void;
    function alwaysPolyfillFetch(func: any): any;
    function alwaysPolyfillUpdate(func: any): any;
    function test_json_retrieve$basic(): Promise<void>;
    function test_json_retrievepolyfill$basic(): any;
    function test_json_retrieve$setPropertyShouldFail(): Promise<void>;
    function test_json_retrieve$setPropertyShouldFail2(): Promise<void>;
    function test_json_retrievepolyfill$setPropertyShouldFail(): any;
    function test_json_retrieve$null(): Promise<void>;
    function test_json_retrievepolyfill$null(): any;
    function test_json_retrieve$accessIsNullObjectBeforeSyncShouldFail(): Promise<void>;
    function test_json_retrieve$accessPropertyBeforeSyncShouldFail(): Promise<void>;
    function test_json_retrieve$accessProxyBeforeSyncShouldSucceed(): Promise<void>;
    function test_json_retrieve$propertyAccessOnProxyObjectShouldFail(): Promise<void>;
    function test_json_retrieve$compare(): Promise<void>;
    function test_json_retrievepolyfill$compare(): any;
    function test_json_retrieve$collection(): Promise<void>;
    function test_json_retrievepolyfill$collection(): any;
    function test_json_retrieve$expand(): Promise<void>;
    function test_json_retrieve$expandVerifyProxy(): Promise<void>;
    function test_json_retrievepolyfill$expand(): any;
    function test_json_retrieveAndSync$basic(): Promise<void>;
    function test_json_retrieveAndSync$option(): Promise<void>;
    function test_json_update(): Promise<void>;
    function test_json_polyfillUpdate(): Promise<any>;
    function test_json_update$pendingStatement(): Promise<void>;
    function test_json_polyfillUpdate$pendingStatement(): Promise<void>;
    function test_json_update$readOnlyShouldFail(): Promise<void>;
    function test_json_update$unknownPropShouldFail(): Promise<void>;
    function test_json_update$navigationProp(): Promise<void>;
    function test_json_polyfillUpdate$navigationProp(): Promise<any>;
    function test_unchanged_basic(): Promise<void>;
    function test_unchanged_basic$changeIntValue(): Promise<void>;
    function test_unchanged_basic$changeStringValue(): void;
    function test_unchanged_basic$changeEnumArrayValue(): void;
    function test_unchanged_expand$basic(): void;
    function test_unchanged_expand$changeParent(): void;
    function test_unchanged_expand$changeChild(): void;
    function compareStringSet(set1: string[], set2: string[]): boolean;
    function assertQueryOption(query: OfficeExtension.QueryInfo, expected: string[]): void;
    function test_loadoption_basic(): void;
    function test_loadoption_basic2(): void;
    function test_loadoption_error(): void;
    function test_requestcontext_constructor(): void;
    function test_GeneralRuntime_ObjectSetReadOnlyPropertyWhenAllowedToSkipOver$innerProperty_cvt_JScript_V11(): void;
    function test_GeneralRuntime_ObjectSetReadOnlyPropertyWhenDisallowed$innerProperty_cvt_JScript_V11(): void;
    function test_requestcontext_autoKeepReference(): void;
    function test_pendingStatements_basic(): void;
    function test_pendingStatements_beforeSyncAndAfterSync(): void;
    function test_pendingStatements_beforeSyncAndAfterSync$track(): void;
    function test_pendingStatements_beforeSyncAndAfterSync$track2(): void;
    function test_pendingStatements_showDispose(): void;
    function test_pendingStatements_showDispose$track(): void;
    function testEarlyDisposeObject(enableFeature: any): void;
    function test_pendingStatements_perf$enableEarlyDisposeObject(): void;
    function test_pendingStatements_perf$disableEarlyDisposeObject(): void;
    function test_batch_one(): Promise<void>;
    function test_batch_two(): Promise<void>;
    function test_batch_two$setTimeout(): Promise<void>;
    function test_batch_promiseall$NoPromiseInsideBatch(): Promise<void>;
    function test_batch_promiseall$PromiseInsideBatchWillFail(): Promise<void>;
    function test_batch_error$CaughtError(): Promise<void>;
    function test_batch_error$CaughtErrorAfterTimeout(): Promise<void>;
    function test_batch_error$CaughtErrorShouldAllowOtherBatch(): Promise<void>;
    function test_batch_error$CaughtErrorShouldAllowOtherBatchTimeout(): Promise<void>;
    function expectErrorAsync(func: () => Promise<any>): Promise<any>;
    function test_batch_nested$shouldFail(): Promise<void>;
    function test_batch_actionOutsideOfBatch$WriteShouldFail(): Promise<void>;
    function test_batch_actionOutsideOfBatch$PropertyShouldSucceed(): Promise<void>;
    function test_batch_actionOutsideOfBatch$MethodShouldFail(): Promise<void>;
    function test_requestcontext_session$basic(): void;
    function test_requestcontext_session$run(): void;
    function test_requestcontext_embeddedSession$ctx(): void;
    function test_requestcontext_embeddedSession$run(): void;
    function test_requestcontext_embeddedSession$event(): void;
    function test_requestcontext_session$invokeOnce(): void;
    function test_extension_range$prop(): void;
    function test_extension_range$method(): void;
    function test_extension_range$object(): void;
    function test_extension_range$objectAndMethod(): void;
    function test_oneBasedValue_property$get(): void;
    function test_oneBasedValue_property$set(): void;
    function test_oneBasedValue_method$return(): void;
    function test_oneBasedValue_method$param(): void;
    function test_oneBasedValue_method$objectParam(): void;
    function test_convertValue_property$get(): void;
    function test_convertValue_property$set(): void;
    function test_convertValue_method$return(): void;
    function test_convertValue_method$param(): void;
    function test_convertValue_delegateProperty$get(): void;
    function test_convertValue_delegateProperty$set(): void;
    function test_convertValue_delegateMethod(): void;
    function test_convertValue_isMissingParam(): void;
    function test_asyncmethod_basic(): void;
    function test_asyncmethod_basic2(): void;
    function test_restrictedResource_basic1(): void;
    function test_restrictedResource_basic2(): void;
    function test_restrictedResource_expectFailure(): void;
    function test_restrictedResource_expectFailure2(): void;
    function test_util_formatString(): void;
}
